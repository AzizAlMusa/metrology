<launch>
  <arg name="direct_joint_control" default="false"/>
  <arg name="robot_name" default="add_post_pro_equiv" />
  <arg name="pipeline" default="ompl" />
  <!-- By default, we do not start a database (it can be large) -->
  <arg name="db" default="false" />
  <!-- Allow the user to specify the database location -->
  <arg name="db_path" default="$(find add_post_pro_equiv_moveit_config)/default_warehouse_mongo_db" />

  <!-- By default, we are not in debug mode -->
  <arg name="debug" default="false" />

  <!-- By default, we won't load or override the robot_description
  <arg name="load_robot_description" default="true"/> -->
  <env name="GAZEBO_MODEL_PATH" value="$(find add_post_pro_simulation)/gazebo_models/"/>

  <!-- Conditionally start Gazebo based on a parameter -->
  <group if="$(arg gazebo_enabled)">
    <!-- Gazebo specific options -->
    <arg name="gazebo_gui" default="true"/>
    <arg name="paused" default="false"/>
    <!-- By default, use the URDF location provided from the package -->
    <arg name="urdf_path" default="$(find add_post_pro_robot)/urdf/add_post_pro_equiv.urdf.xacro"/>

    <!-- Launch the gazebo simulator and spawn the robot -->
    <include file="$(find add_post_pro_equiv_moveit_config)/launch/gazebo.launch" >
      <arg name="paused" value="$(arg paused)"/>
      <arg name="gazebo_gui" value="$(arg gazebo_gui)"/>
      <arg name="urdf_path" value="$(arg urdf_path)"/>
      <arg name="world_path" default="$(find add_post_pro_simulation)/world/metrology.world"/>
    </include>
  </group>

  <!-- If needed, broadcast static tf for robot root -->
  <!-- Load the URDF, SRDF, and other .yaml configuration files on the param server -->
  <include file="$(find add_post_pro_equiv_moveit_config)/launch/planning_context.launch">
    <arg name="load_robot_description" value="false"/>
  </include>

  <!-- We do not have a robot connected, so publish fake joint states -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="use_gui" value="false"/>
    <param name="publish_frequency" type="double" value="125.0" />
    <rosparam param="source_list" subst_value="true">[/$(arg robot_name)/joint_states]</rosparam>
  </node>

  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" 
    type="robot_state_publisher" respawn="false" output="screen">
    <remap from="/joint_states" to="/$(arg robot_name)/joint_states" />
  </node>

  <!-- Run the main MoveIt! executable without trajectory execution (we do not have controllers configured by default) -->
  <include file="$(find add_post_pro_equiv_moveit_config)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="fake_execution" value="false"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
    <!-- <arg name="load_robot_description" value="$(arg load_robot_description)"/> -->
    <arg name="pipeline" value="$(arg pipeline)"/>
    <arg name="publish_monitored_planning_scene" value="true" />
  </include>

  <!-- Run Rviz and load the default config to see the state of the move_group node -->
  <include file="$(find add_post_pro_equiv_moveit_config)/launch/moveit_rviz.launch">
    <arg name="rviz_config" value="$(find add_post_pro_equiv_moveit_config)/launch/moveit.rviz"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <!-- Controllers for GAZEBO -->
  <group if="$(arg gazebo_enabled)">
    <rosparam file="$(find add_post_pro_equiv_moveit_config)/config/add_post_pro_controllers.yaml" command="load"/>
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"
      ns="/$(arg robot_name)" args="joint_state_controller arm_controller turntable_controller" />
  </group>

  <!-- If database loading was enabled, start MongoDB as well -->
  <group if="$(arg db)">
    <include file="$(find add_post_pro_equiv_moveit_config)/launch/default_warehouse_db.launch">
      <arg name="moveit_warehouse_database_path" value="$(arg db_path)"/>
    </include>
  </group>

  <!-- Spawn objects on turntable in Gazebo -->
  <group if="$(arg gazebo_enabled)">
    <node name="spawn_object" pkg="add_post_pro_simulation" type="spawn_object.py"/>
    <node name="create_gaz_model" pkg="add_post_pro_simulation" type="create_gaz_model.py"/>
  </group>

  <!-- Nodes for controlling the turntable in an equivalent motion -->
  <node name="custom_robot_control_service" pkg="add_post_pro_control" type="viewpoint_control" output="screen" />
  <node name="trajectory_modifier" pkg="add_post_pro_control" type="trajectory_modifier.py" />
  <node name="trajectory_direct_control" pkg="add_post_pro_control" type="modified_control.py" />

  <!-- Node for controlling the physical turntable-->
  <node name="moveit_arduino_bridge" pkg="turntable_control" type="turntable_control_driver.py" output="screen"/>
  
  <!-- Run the Bash script to detect the serial port and run arduino node --> 
  <node name="rosserial_node" pkg="rosserial_python" type="serial_node.py" output="screen">
    <param name="port" command="$(find turntable_control)/scripts/detect_serial_port.sh" />
  </node>

  <!-- <arg name="x" default="-0.01"/>
  <arg name="y" default="0"/>
  <arg name="z" default="0.0925"/>
  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model $(arg robot_name) -x $(arg x) -y $(arg y) -z $(arg z)" /> -->
</launch>
