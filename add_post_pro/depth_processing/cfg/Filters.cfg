#!/usr/bin/env python

PACKAGE = "depth_processing"
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Filters
gen.add("voxel_leaf_size", double_t, 0, "The leaf size for voxel filter", 0.01, 0.001, 0.1)
gen.add("mean_k", int_t, 0, "The number of nearest neighbors to use for SOR filter", 50, 1, 100)
gen.add("std_dev", double_t, 0, "The standard deviation multiplier for SOR filter", 1.0, 0.1, 5.0)
gen.add("passthrough_limit_min", double_t, 0, "Minimum limit for passthrough filter", 0.0, 0.0, 2.0)
gen.add("passthrough_limit_max", double_t, 0, "Maximum limit for passthrough filter", 1.9, 0.5, 5.0)

# REGISTRATION
# ICP
gen.add("max_iterations", int_t, 0, "Maximum Iterations", 50, 1, 200)
gen.add("max_correspondence_distance", double_t, 0, "Max Correspondence Distance", 0.05, 0.001, 1.0)
gen.add("transformation_epsilon", double_t, 0, "Transformation Epsilon", 1e-8, 1e-10, 1e-5)
gen.add("euclidean_fitness_epsilon", double_t, 0, "Euclidean Fitness Epsilon", 1e-8, 1e-10, 1e-5)
gen.add("ransac_outlier_rejection_threshold", double_t, 0, "RANSAC Outlier Rejection Threshold", 0.05, 0.001, 1.0)
gen.add("use_reciprocal_correspondences", bool_t, 0, "Use Reciprocal Correspondences", False)

# MESHING
# GREEDY TRIANGULATION
# Normal Estimation
gen.add("normal_estimation_k_search", int_t, 0, "Number of nearest neighbors to use for normal estimation", 50, 1, 100)

# GreedyProjectionTriangulation
gen.add("search_radius", double_t, 0, "Search Radius", 0.025, 0.001, 1.0)
gen.add("mu", double_t, 0, "Mu", 2.5, 0.1, 10.0)
gen.add("maximum_nearest_neighbors", int_t, 0, "Maximum Nearest Neighbors", 100, 1, 500)
gen.add("maximum_surface_angle", double_t, 0, "Maximum Surface Angle (in radians)", 0.785398, 0.0, 3.14159)  # Pi/4
gen.add("minimum_angle", double_t, 0, "Minimum Angle (in radians)", 0.174533, 0.0, 3.14159)  # Pi/18
gen.add("maximum_angle", double_t, 0, "Maximum Angle (in radians)", 2.0944, 0.0, 3.14159)  # 2*Pi/3
gen.add("normal_consistency", bool_t, 0, "Normal Consistency", False)

#Poisson
gen.add("poisson_depth", int_t, 0, "The maximum depth of the tree for Poisson Surface Reconstruction", 9, 1, 16)
gen.add("poisson_scale", double_t, 0, "Scale", 1.1, 0.5, 2.0)
gen.add("poisson_solver_divide", int_t, 0, "Solver Divide", 8, 1, 10)
gen.add("poisson_iso_divide", int_t, 0, "Iso Divide", 8, 1, 10)
gen.add("poisson_confidence", bool_t, 0, "Confidence", False)
gen.add("poisson_point_weight", double_t, 0, "Point Weight", 4.0, 0.0, 10.0)
gen.add("poisson_samples_per_node", double_t, 0, "Samples per Node", 1.0, 0.1, 5.0)
gen.add("poisson_manifold", bool_t, 0, "Manifold", False)

gen.add("colormap_min", double_t, 0, "Scale", 0.01, 0.005, 2.0)
gen.add("colormap_max", double_t, 0, "Scale", 0.1, 0.005, 2.0)

exit(gen.generate(PACKAGE, "depth_processing", "Filters"))
