/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2024-01-25 17:59:22.753017
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54;
x0=IKsin(j[0]);
x1=IKsin(j[1]);
x2=IKcos(j[0]);
x3=IKcos(j[1]);
x4=IKcos(j[3]);
x5=IKsin(j[2]);
x6=IKcos(j[2]);
x7=IKsin(j[3]);
x8=IKsin(j[4]);
x9=IKcos(j[4]);
x10=IKcos(j[6]);
x11=IKsin(j[6]);
x12=IKsin(j[5]);
x13=IKcos(j[5]);
x14=((0.642790725366564)*x10);
x15=((0.766041828742221)*x10);
x16=((0.642790725366564)*x11);
x17=((0.766041828742221)*x11);
x18=((1.0)*x0);
x19=(x4*x6);
x20=(x4*x5);
x21=(x1*x2);
x22=(x6*x7);
x23=(x5*x7);
x24=((-1.0)*x12);
x25=((-1.0)*x13);
x26=(x12*x9);
x27=(x2*x3);
x28=(x1*x18);
x29=((1.0)*x19);
x30=((((-1.0)*x28))+x27);
x31=(((x0*x3))+x21);
x32=((((-1.0)*x29))+x23);
x33=((((-1.0)*x27))+x28);
x34=((((-1.0)*x18*x3))+(((-1.0)*x21)));
x35=((((1.0)*x20))+(((1.0)*x22)));
x36=((-1.0)*x35);
x37=(x12*x32);
x38=((1.0)*x33);
x39=((1.0)*x34);
x40=(x36*x9);
x41=(x35*x8);
x42=(x13*x40);
x43=(x37+x42);
x44=(((x20*x33))+((x22*x33)));
x45=(((x20*x34))+((x22*x34)));
x46=(((x30*x8))+((x9*((((x19*x31))+((x23*x34)))))));
x47=(((x34*x8))+((x9*((((x19*x30))+((x23*x33)))))));
x48=(((x30*x9))+((x8*(((((-1.0)*x29*x31))+(((-1.0)*x23*x39)))))));
x49=(((x8*(((((-1.0)*x29*x30))+(((-1.0)*x23*x38))))))+((x34*x9)));
x50=((0.766041828742221)*x49);
x51=(((x12*x44))+((x13*x47)));
x52=(((x12*x45))+((x13*x46)));
x53=(((x25*x47))+((x24*x44)));
x54=(((x25*x46))+((x24*x45)));
eerot[0]=((((-1.0)*x15*x49))+((x14*x51))+((x16*x49))+(((-1.0)*x17*x53)));
eerot[1]=(((x15*x51))+((x16*x53))+((x17*x49))+((x14*x49)));
IkReal x55=((1.0)*x38);
eerot[2]=(((x12*x47))+((x13*(((((-1.0)*x20*x55))+(((-1.0)*x22*x55)))))));
eetrans[0]=((((((((((((0.00651138)*(((((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))*(IKcos(j[3]))))+(((0.00651138)*(((((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))+(((1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((((((-0.00651138)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.00651138)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[4]))))))*(IKsin(j[6]))))+(((-0.075)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.075)*(IKcos(j[0]))*(IKcos(j[1]))))+(((((((-0.09)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.09)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))*(IKsin(j[3]))))+(((((((-0.365)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.365)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.09)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.09)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))*(IKcos(j[3]))))+(((0.913)*(IKsin(j[0]))))+(((((((((((0.1115)*(((((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))*(IKsin(j[3]))))+(((0.1115)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((((((-0.1115)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.1115)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((((((((((0.00546369)*(((((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))*(IKcos(j[3]))))+(((0.00546369)*(((((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))+(((1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((((((-0.00546369)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.00546369)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[4]))))))*(IKcos(j[6]))))+(((((((-0.405)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.405)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))*(IKsin(j[3]))))+(((((((((((-0.00546369)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[4]))))+(((-0.00546369)*(((((((((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))*(IKsin(j[3]))))+(((((((IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((((((-0.00546369)*(((((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[3]))*(IKsin(j[2]))))+(((-0.00546369)*(((((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))*(IKsin(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((((((-0.405)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.405)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[3]))*(IKsin(j[2]))))+(((((((((((0.1115)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.1115)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))*(IKsin(j[3]))))+(((((((0.1115)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.1115)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))*(IKsin(j[2]))))))*(IKcos(j[5]))))+(((((((((((0.00651138)*(((((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[3]))*(IKsin(j[2]))))+(((0.00651138)*(((((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((((((0.00651138)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[4]))))+(((0.00651138)*(((((((((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))*(IKsin(j[3]))))+(((((((IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))))*(IKcos(j[6])))));
eerot[3]=((((-1.0)*x15*x48))+((x14*x52))+((x16*x48))+(((-1.0)*x17*x54)));
eerot[4]=(((x15*x52))+((x16*x54))+((x17*x48))+((x14*x48)));
IkReal x56=((1.0)*x39);
eerot[5]=(((x13*(((((-1.0)*x20*x56))+(((-1.0)*x22*x56))))))+((x12*x46)));
eetrans[1]=((((((((((((0.1115)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.1115)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[4]))))+(((((((0.1115)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))*(IKsin(j[3]))))+(((0.1115)*(((((IKcos(j[0]))*(IKsin(j[1]))))+(((IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((0.405)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.405)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))*(IKsin(j[3]))))+(((((((((((0.1115)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.1115)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))*(IKsin(j[3]))))+(((((((0.1115)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.1115)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))*(IKsin(j[2]))))))*(IKcos(j[5]))))+(((((((0.365)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.365)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((((((-0.00546369)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))*(IKsin(j[2]))))+(((-0.00546369)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((((((-0.00546369)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[4]))))+(((-0.00546369)*(((((((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))*(IKsin(j[3]))))+(((((((IKcos(j[0]))*(IKsin(j[1]))))+(((IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))))*(IKsin(j[6]))))+(((((((((((-0.00546369)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.00546369)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[4]))))+(((((((0.00546369)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))*(IKcos(j[3]))))+(((0.00546369)*(((((1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[6]))))+(((((((0.405)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.405)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[3]))*(IKsin(j[2]))))+(((0.075)*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((((((0.00651138)*(IKcos(j[0]))*(IKcos(j[1]))))+(((-0.00651138)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((((((0.00651138)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))*(IKcos(j[3]))))+(((0.00651138)*(((((1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKsin(j[6]))))+(((((((0.09)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.09)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))*(IKsin(j[3]))))+(((((((((((0.00651138)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))*(IKsin(j[2]))))+(((0.00651138)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((((((0.00651138)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[4]))))+(((0.00651138)*(((((((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))*(IKsin(j[3]))))+(((((((IKcos(j[0]))*(IKsin(j[1]))))+(((IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))))*(IKcos(j[6]))))+(((-0.913)*(IKcos(j[0]))))+(((((((-0.09)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.09)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))*(IKcos(j[3]))))+(((0.075)*(IKcos(j[0]))*(IKsin(j[1])))));
eerot[6]=((((-1.0)*x15*x41))+((x16*x41))+(((-1.0)*x17*((((x25*x40))+((x24*x32))))))+((x14*x43)));
eerot[7]=(((x16*(((((-1.0)*x37))+(((-1.0)*x42))))))+((x17*x41))+((x15*x43))+((x14*x41)));
eerot[8]=(((x26*x36))+((x13*(((((-1.0)*x23))+x29)))));
eetrans[2]=((0.335)+((x10*(((((0.00651138)*x37))+(((0.00651138)*x42))))))+((x26*(((((-0.1115)*x20))+(((-0.1115)*x22))))))+(((-0.405)*x23))+((x11*(((((-0.00546369)*x42))+(((-0.00546369)*x37))))))+((x13*(((((0.1115)*x19))+(((-0.1115)*x23))))))+((x10*x8*(((((0.00546369)*x22))+(((0.00546369)*x20))))))+(((0.365)*x6))+(((0.405)*x19))+((x11*x8*(((((0.00651138)*x22))+(((0.00651138)*x20))))))+(((0.09)*x20))+(((0.09)*x22)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j2,cj2,sj2,htj2,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij2[2], _nj2;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]), htj2=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((0.766041828742221)*r01))+(((0.642790725366564)*r00)));
new_r01=((((-0.766041828742221)*r00))+(((0.642790725366564)*r01)));
new_r02=r02;
new_px=(px+(((-0.1115)*r02))+(((-3.95940567562197e-8)*r00))+(((-0.00849999870111357)*r01)));
new_r10=((((0.642790725366564)*r10))+(((0.766041828742221)*r11)));
new_r11=((((0.642790725366564)*r11))+(((-0.766041828742221)*r10)));
new_r12=r12;
new_py=((((-0.00849999870111357)*r11))+(((-0.1115)*r12))+(((-3.95940567562197e-8)*r10))+py);
new_r20=((((0.766041828742221)*r21))+(((0.642790725366564)*r20)));
new_r21=((((0.642790725366564)*r21))+(((-0.766041828742221)*r20)));
new_r22=r22;
new_pz=((((-0.00849999870111357)*r21))+(((-0.1115)*r22))+(((-3.95940567562197e-8)*r20))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x57=((1.0)*px);
IkReal x58=((1.0)*pz);
IkReal x59=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x59))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x58)));
rxp0_2=((((-1.0)*r10*x57))+((py*r00)));
rxp1_0=((((-1.0)*r21*x59))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x58)));
rxp1_2=((((-1.0)*r11*x57))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x59)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x58)));
rxp2_2=((((-1.0)*r12*x57))+((py*r02)));
{
IkReal j3eval[1];
j3eval[0]=((sj2*sj2)+(cj2*cj2));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j3]

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x60=((((0.09)*cj2))+(((-0.405)*sj2)));
IkReal x61=((((0.09)*sj2))+(((0.405)*cj2)));
CheckValue<IkReal> x64 = IKatan2WithCheck(IkReal(x61),IkReal(x60),IKFAST_ATAN2_MAGTHRESH);
if(!x64.valid){
continue;
}
IkReal x62=((1.0)*(x64.value));
if((((x60*x60)+(x61*x61))) < -0.00001)
continue;
CheckValue<IkReal> x65=IKPowWithIntegerCheck(IKabs(IKsqrt(((x60*x60)+(x61*x61)))),-1);
if(!x65.valid){
continue;
}
if( (((x65.value)*(((0.335)+(((0.365)*cj2))+(((-1.0)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x65.value)*(((0.335)+(((0.365)*cj2))+(((-1.0)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x63=IKasin(((x65.value)*(((0.335)+(((0.365)*cj2))+(((-1.0)*pz))))));
j3array[0]=((((-1.0)*x62))+(((-1.0)*x63)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+x63+(((-1.0)*x62)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal j0eval[2];
j0eval[0]=(pp+(((-1.0)*(pz*pz))));
j0eval[1]=((px*px)+(py*py));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[5];
IkReal x66=sj2*sj2;
j0eval[0]=(((x66*(px*px)*(py*py)))+((x66*(py*py*py*py))));
j0eval[1]=3.334276;
j0eval[2]=py;
j0eval[3]=sj2;
j0eval[4]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  || IKabs(j0eval[4]) < 0.0000010000000000  )
{
{
IkReal j0eval[5];
IkReal x67=sj2*sj2;
j0eval[0]=3.334276;
j0eval[1]=px;
j0eval[2]=sj2;
j0eval[3]=(pp+(((-1.0)*(pz*pz))));
j0eval[4]=(((x67*(px*px*px*px)))+((x67*(px*px)*(py*py))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  || IKabs(j0eval[4]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=(pp+(((-1.0)*(pz*pz))));
j0eval[1]=((px*px)+(py*py));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[4];
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=((((px*px)*(py*py)))+(px*px*px*px));
j0eval[1]=3.334276;
j0eval[2]=px;
j0eval[3]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  )
{
{
IkReal j0eval[4];
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=((py*py*py*py)+(((px*px)*(py*py))));
j0eval[1]=3.334276;
j0eval[2]=py;
j0eval[3]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x68=py*py;
CheckValue<IkReal> x71 = IKatan2WithCheck(IkReal(((-1.826)*x68)),IkReal(((1.826)*px*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x71.valid){
continue;
}
IkReal x69=((1.0)*(x71.value));
if((((((3.334276)*(x68*x68)))+(((3.334276)*x68*(px*px))))) < -0.00001)
continue;
CheckValue<IkReal> x72=IKPowWithIntegerCheck(IKabs(IKsqrt(((((3.334276)*(x68*x68)))+(((3.334276)*x68*(px*px)))))),-1);
if(!x72.valid){
continue;
}
if( (((x72.value)*(((((-1.12248566666667)*py))+(((-1.0)*pp*py))+(((0.06375)*py*sj3))+(((1.36666666666667)*py*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x72.value)*(((((-1.12248566666667)*py))+(((-1.0)*pp*py))+(((0.06375)*py*sj3))+(((1.36666666666667)*py*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x70=IKasin(((x72.value)*(((((-1.12248566666667)*py))+(((-1.0)*pp*py))+(((0.06375)*py*sj3))+(((1.36666666666667)*py*pz))))));
j0array[0]=((((-1.0)*x70))+(((-1.0)*x69)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+x70+(((-1.0)*x69)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x73=IKcos(j0);
IkReal x74=IKsin(j0);
IkReal x75=((1.826)*px);
IkReal x76=((0.06375)*sj3);
IkReal x77=((1.36666666666667)*pz);
IkReal x78=(py*x73);
evalcond[0]=((-1.12248566666667)+(((-1.0)*pp))+x77+x76+((x74*x75))+(((-1.826)*x78)));
evalcond[1]=((((-1.0)*px*x77))+(((-1.0)*px*x76))+((x75*x78))+(((-1.0)*px*x74*x75))+(((1.12248566666667)*px))+((pp*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=((1.0375)+(((1.9125)*sj3))+(((-1.0)*pz)));
j1eval[1]=IKsign(((0.230555555555556)+(((-0.222222222222222)*pz))+(((0.425)*sj3))));
j1eval[2]=((IKabs(((0.913)+(((-1.0)*px*sj0))+((cj0*py)))))+(IKabs((((cj0*px))+((py*sj0))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x79=(py*sj0);
IkReal x80=((1.9125)*sj3);
IkReal x81=((1.0)*pz);
IkReal x82=(cj0*px);
j1eval[0]=((((-1.0)*x81*x82))+((x79*x80))+(((1.0375)*x79))+(((-1.0)*x79*x81))+((x80*x82))+(((1.0375)*x82)));
j1eval[1]=((1.0375)+x80+(((-1.0)*x81)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x83=((1.9125)*sj3);
IkReal x84=(px*sj0);
IkReal x85=((1.09529025191676)*pz);
IkReal x86=((2.0947426067908)*sj3);
IkReal x87=(cj0*py);
j1eval[0]=((1.0375)+(((-1.0)*pz))+x83);
j1eval[1]=((-1.0375)+((x84*x86))+(((-1.13636363636364)*x87))+(((1.13636363636364)*x84))+((x85*x87))+(((-1.0)*x86*x87))+pz+(((-1.0)*x84*x85))+(((-1.0)*x83)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal gconst3=((-0.542483660130719)+(((0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.542483660130719)+sj3+(((-0.522875816993464)*pz)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp))))+IKsqr(((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp))), ((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x88=IKsin(j1);
IkReal x89=IKcos(j1);
IkReal x90=((0.15)*py);
IkReal x91=((0.15)*px);
IkReal x92=((1.0)*py);
IkReal x93=((1.0)*px);
IkReal x94=(sj0*x89);
IkReal x95=(cj0*x88);
IkReal x96=(sj0*x88);
IkReal x97=(cj0*x89);
evalcond[0]=((-0.279336801757028)+(((0.547645125958379)*pp))+(((-0.766703176341731)*pz))+(((5.55555555555556e-11)*x88)));
evalcond[1]=((((-1.0)*cj0*x93))+(((5.55555555555556e-11)*x89))+(((-1.0)*sj0*x92)));
evalcond[2]=(((py*x96))+(((-0.913)*x89))+(((-1.0)*x92*x97))+((px*x94))+((px*x95)));
evalcond[3]=((5.55555555555556e-11)+(((-0.913)*x88))+(((-1.0)*x92*x95))+(((-1.0)*x92*x94))+((px*x96))+(((-1.0)*x93*x97)));
evalcond[4]=((-1.157069)+(((-1.826)*cj0*py))+(((-1.0)*x91*x96))+(((0.13695)*x88))+(((1.826)*px*sj0))+(((-1.0)*pp))+((x90*x94))+((x90*x95))+(((1.4)*pz))+((x91*x97)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst3=((-0.542483660130719)+(((0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.542483660130719)+sj3+(((-0.522875816993464)*pz)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp))))+IKsqr(((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp))), ((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x673=IKsin(j1);
IkReal x674=IKcos(j1);
IkReal x675=((0.15)*py);
IkReal x676=((0.15)*px);
IkReal x677=((1.0)*py);
IkReal x678=((1.0)*px);
IkReal x679=(sj0*x674);
IkReal x680=(cj0*x673);
IkReal x681=(sj0*x673);
IkReal x682=(cj0*x674);
evalcond[0]=((-0.279336801757028)+(((0.547645125958379)*pp))+(((-0.766703176341731)*pz))+(((5.55555555555556e-11)*x673)));
evalcond[1]=((((-1.0)*cj0*x678))+(((-1.0)*sj0*x677))+(((5.55555555555556e-11)*x674)));
evalcond[2]=((((-0.913)*x674))+((px*x680))+(((-1.0)*x677*x682))+((py*x681))+((px*x679)));
evalcond[3]=((5.55555555555556e-11)+(((-0.913)*x673))+((px*x681))+(((-1.0)*x678*x682))+(((-1.0)*x677*x680))+(((-1.0)*x677*x679)));
evalcond[4]=((-1.157069)+(((0.13695)*x673))+(((-1.826)*cj0*py))+(((1.826)*px*sj0))+((x676*x682))+(((-1.0)*pp))+((x675*x680))+((x675*x679))+(((1.4)*pz))+(((-1.0)*x676*x681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x683=(cj0*sj0);
IkReal x684=((0.425)*sj3);
IkReal x685=(px*sj0);
IkReal x686=(cj0*py);
IkReal x687=((0.222222222222222)*pz);
IkReal x688=(px*py);
CheckValue<IkReal> x689=IKPowWithIntegerCheck(((0.230555555555556)+(((-1.0)*x687))+x684),-1);
if(!x689.valid){
continue;
}
CheckValue<IkReal> x690=IKPowWithIntegerCheck(((-0.210497222222222)+(((0.230555555555556)*x685))+(((-1.0)*x685*x687))+((x686*x687))+(((0.202888888888889)*pz))+(((-0.388025)*sj3))+(((-1.0)*x684*x686))+((x684*x685))+(((-0.230555555555556)*x686))),-1);
if(!x690.valid){
continue;
}
if( IKabs(((x689.value)*(((0.913)+x686+(((-1.0)*x685)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x690.value)*(((((-0.913)*py*sj0))+(((-0.913)*cj0*px))+((x683*(px*px)))+x688+(((-2.0)*cj0*px*x686))+(((-1.0)*x683*(py*py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x689.value)*(((0.913)+x686+(((-1.0)*x685))))))+IKsqr(((x690.value)*(((((-0.913)*py*sj0))+(((-0.913)*cj0*px))+((x683*(px*px)))+x688+(((-2.0)*cj0*px*x686))+(((-1.0)*x683*(py*py)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x689.value)*(((0.913)+x686+(((-1.0)*x685))))), ((x690.value)*(((((-0.913)*py*sj0))+(((-0.913)*cj0*px))+((x683*(px*px)))+x688+(((-2.0)*cj0*px*x686))+(((-1.0)*x683*(py*py)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x691=IKcos(j1);
IkReal x692=IKsin(j1);
IkReal x693=((0.15)*py);
IkReal x694=(cj0*py);
IkReal x695=(px*sj0);
IkReal x696=((0.425)*sj3);
IkReal x697=((0.222222222222222)*pz);
IkReal x698=(py*sj0);
IkReal x699=(sj0*x691);
IkReal x700=(cj0*x692);
IkReal x701=(cj0*px*x691);
evalcond[0]=(((x691*x696))+(((-1.0)*x691*x697))+(((-1.0)*cj0*px))+(((-1.0)*x698))+(((0.230555555555556)*x691)));
evalcond[1]=((-0.913)+((x692*x696))+(((-1.0)*x692*x697))+x695+(((-1.0)*x694))+(((0.230555555555556)*x692)));
evalcond[2]=(((x691*x695))+(((-0.913)*x691))+((x692*x698))+(((-1.0)*x691*x694))+((px*x700)));
evalcond[3]=((0.230555555555556)+(((-1.0)*x692*x694))+(((-1.0)*x701))+(((-0.913)*x692))+((x692*x695))+(((-1.0)*x691*x698))+x696+(((-1.0)*x697)));
evalcond[4]=((-1.157069)+(((-1.826)*x694))+(((-1.0)*pp))+((x693*x699))+(((-0.15)*x692*x695))+(((1.826)*x695))+(((0.15)*x701))+(((0.13695)*x692))+(((1.4)*pz))+((x693*x700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x702=(py*sj0);
IkReal x703=(cj0*px);
IkReal x704=((0.222222222222222)*pz);
IkReal x705=(cj0*sj0);
IkReal x706=((0.425)*sj3);
IkReal x707=(px*py);
CheckValue<IkReal> x708=IKPowWithIntegerCheck((((x702*x706))+(((-1.0)*x702*x704))+((x703*x706))+(((-1.0)*x703*x704))+(((0.230555555555556)*x702))+(((0.230555555555556)*x703))),-1);
if(!x708.valid){
continue;
}
CheckValue<IkReal> x709=IKPowWithIntegerCheck(((0.230555555555556)+(((-1.0)*x704))+x706),-1);
if(!x709.valid){
continue;
}
if( IKabs(((x708.value)*(((((0.913)*x703))+(((0.913)*x702))+((cj0*py*x702))+(((-1.0)*x707))+(((-1.0)*px*sj0*x703))+(((2.0)*cj0*py*x703)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x709.value)*((x702+x703)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x708.value)*(((((0.913)*x703))+(((0.913)*x702))+((cj0*py*x702))+(((-1.0)*x707))+(((-1.0)*px*sj0*x703))+(((2.0)*cj0*py*x703))))))+IKsqr(((x709.value)*((x702+x703))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x708.value)*(((((0.913)*x703))+(((0.913)*x702))+((cj0*py*x702))+(((-1.0)*x707))+(((-1.0)*px*sj0*x703))+(((2.0)*cj0*py*x703))))), ((x709.value)*((x702+x703))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x710=IKcos(j1);
IkReal x711=IKsin(j1);
IkReal x712=((0.15)*py);
IkReal x713=(cj0*py);
IkReal x714=(px*sj0);
IkReal x715=((0.425)*sj3);
IkReal x716=((0.222222222222222)*pz);
IkReal x717=(py*sj0);
IkReal x718=(sj0*x710);
IkReal x719=(cj0*x711);
IkReal x720=(cj0*px*x710);
evalcond[0]=((((-1.0)*x710*x716))+(((-1.0)*x717))+((x710*x715))+(((0.230555555555556)*x710))+(((-1.0)*cj0*px)));
evalcond[1]=((-0.913)+(((-1.0)*x711*x716))+((x711*x715))+(((-1.0)*x713))+(((0.230555555555556)*x711))+x714);
evalcond[2]=((((-0.913)*x710))+(((-1.0)*x710*x713))+((x711*x717))+((x710*x714))+((px*x719)));
evalcond[3]=((0.230555555555556)+(((-0.913)*x711))+(((-1.0)*x710*x717))+((x711*x714))+(((-1.0)*x711*x713))+(((-1.0)*x720))+(((-1.0)*x716))+x715);
evalcond[4]=((-1.157069)+(((-0.15)*x711*x714))+(((-1.0)*pp))+(((0.13695)*x711))+(((0.15)*x720))+(((-1.826)*x713))+(((1.4)*pz))+(((1.826)*x714))+((x712*x718))+((x712*x719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x721=IKPowWithIntegerCheck(IKsign(((0.230555555555556)+(((-0.222222222222222)*pz))+(((0.425)*sj3)))),-1);
if(!x721.valid){
continue;
}
CheckValue<IkReal> x722 = IKatan2WithCheck(IkReal(((0.913)+(((-1.0)*px*sj0))+((cj0*py)))),IkReal((((cj0*px))+((py*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x722.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x721.value)))+(x722.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x723=IKcos(j1);
IkReal x724=IKsin(j1);
IkReal x725=((0.15)*py);
IkReal x726=(cj0*py);
IkReal x727=(px*sj0);
IkReal x728=((0.425)*sj3);
IkReal x729=((0.222222222222222)*pz);
IkReal x730=(py*sj0);
IkReal x731=(sj0*x723);
IkReal x732=(cj0*x724);
IkReal x733=(cj0*px*x723);
evalcond[0]=((((-1.0)*x723*x729))+((x723*x728))+(((-1.0)*x730))+(((0.230555555555556)*x723))+(((-1.0)*cj0*px)));
evalcond[1]=((-0.913)+(((-1.0)*x724*x729))+(((-1.0)*x726))+(((0.230555555555556)*x724))+x727+((x724*x728)));
evalcond[2]=((((-0.913)*x723))+((x723*x727))+(((-1.0)*x723*x726))+((px*x732))+((x724*x730)));
evalcond[3]=((0.230555555555556)+(((-0.913)*x724))+(((-1.0)*x724*x726))+(((-1.0)*x733))+(((-1.0)*x729))+(((-1.0)*x723*x730))+x728+((x724*x727)));
evalcond[4]=((-1.157069)+(((-1.0)*pp))+(((0.13695)*x724))+(((-1.826)*x726))+(((1.826)*x727))+(((0.15)*x733))+((x725*x732))+((x725*x731))+(((1.4)*pz))+(((-0.15)*x724*x727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x734=px*px;
CheckValue<IkReal> x737 = IKatan2WithCheck(IkReal(((1.826)*px*py)),IkReal(((-1.826)*x734)),IKFAST_ATAN2_MAGTHRESH);
if(!x737.valid){
continue;
}
IkReal x735=((1.0)*(x737.value));
if((((((3.334276)*(x734*x734)))+(((3.334276)*x734*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x738=IKPowWithIntegerCheck(IKabs(IKsqrt(((((3.334276)*(x734*x734)))+(((3.334276)*x734*(py*py)))))),-1);
if(!x738.valid){
continue;
}
if( (((x738.value)*(((((-1.36666666666667)*px*pz))+(((-0.06375)*px*sj3))+(((1.12248566666667)*px))+((pp*px)))))) < -1-IKFAST_SINCOS_THRESH || (((x738.value)*(((((-1.36666666666667)*px*pz))+(((-0.06375)*px*sj3))+(((1.12248566666667)*px))+((pp*px)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x736=IKasin(((x738.value)*(((((-1.36666666666667)*px*pz))+(((-0.06375)*px*sj3))+(((1.12248566666667)*px))+((pp*px))))));
j0array[0]=((((-1.0)*x736))+(((-1.0)*x735)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x735))+x736);
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x739=IKsin(j0);
IkReal x740=IKcos(j0);
IkReal x741=((1.36666666666667)*pz);
IkReal x742=((0.06375)*sj3);
IkReal x743=((1.0)*pp);
IkReal x744=((1.826)*x740);
IkReal x745=((1.826)*px*x739);
evalcond[0]=((-1.12248566666667)+(((-1.0)*py*x744))+x745+x742+x741+(((-1.0)*x743)));
evalcond[1]=(((py*x741))+((py*x742))+((py*x745))+(((-1.12248566666667)*py))+(((-1.0)*py*x743))+(((-1.0)*x744*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=((1.0375)+(((1.9125)*sj3))+(((-1.0)*pz)));
j1eval[1]=IKsign(((0.230555555555556)+(((-0.222222222222222)*pz))+(((0.425)*sj3))));
j1eval[2]=((IKabs(((0.913)+(((-1.0)*px*sj0))+((cj0*py)))))+(IKabs((((cj0*px))+((py*sj0))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x746=(py*sj0);
IkReal x747=((1.9125)*sj3);
IkReal x748=((1.0)*pz);
IkReal x749=(cj0*px);
j1eval[0]=((((1.0375)*x749))+(((1.0375)*x746))+(((-1.0)*x746*x748))+((x747*x749))+((x746*x747))+(((-1.0)*x748*x749)));
j1eval[1]=((1.0375)+x747+(((-1.0)*x748)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x750=((1.9125)*sj3);
IkReal x751=(px*sj0);
IkReal x752=((1.09529025191676)*pz);
IkReal x753=((2.0947426067908)*sj3);
IkReal x754=(cj0*py);
j1eval[0]=((1.0375)+(((-1.0)*pz))+x750);
j1eval[1]=((-1.0375)+(((1.13636363636364)*x751))+((x752*x754))+((x751*x753))+(((-1.13636363636364)*x754))+(((-1.0)*x753*x754))+(((-1.0)*x751*x752))+pz+(((-1.0)*x750)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal gconst3=((-0.542483660130719)+(((0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.542483660130719)+sj3+(((-0.522875816993464)*pz)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp))))+IKsqr(((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp))), ((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x755=IKsin(j1);
IkReal x756=IKcos(j1);
IkReal x757=((0.15)*py);
IkReal x758=((0.15)*px);
IkReal x759=((1.0)*py);
IkReal x760=((1.0)*px);
IkReal x761=(sj0*x756);
IkReal x762=(cj0*x755);
IkReal x763=(sj0*x755);
IkReal x764=(cj0*x756);
evalcond[0]=((-0.279336801757028)+(((0.547645125958379)*pp))+(((5.55555555555556e-11)*x755))+(((-0.766703176341731)*pz)));
evalcond[1]=((((5.55555555555556e-11)*x756))+(((-1.0)*sj0*x759))+(((-1.0)*cj0*x760)));
evalcond[2]=(((px*x762))+((px*x761))+(((-0.913)*x756))+((py*x763))+(((-1.0)*x759*x764)));
evalcond[3]=((5.55555555555556e-11)+((px*x763))+(((-0.913)*x755))+(((-1.0)*x760*x764))+(((-1.0)*x759*x762))+(((-1.0)*x759*x761)));
evalcond[4]=((-1.157069)+((x757*x761))+((x757*x762))+(((-1.0)*x758*x763))+(((-1.826)*cj0*py))+(((1.826)*px*sj0))+((x758*x764))+(((0.13695)*x755))+(((-1.0)*pp))+(((1.4)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst3=((-0.542483660130719)+(((0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.542483660130719)+sj3+(((-0.522875816993464)*pz)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp))))+IKsqr(((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp))), ((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x765=IKsin(j1);
IkReal x766=IKcos(j1);
IkReal x767=((0.15)*py);
IkReal x768=((0.15)*px);
IkReal x769=((1.0)*py);
IkReal x770=((1.0)*px);
IkReal x771=(sj0*x766);
IkReal x772=(cj0*x765);
IkReal x773=(sj0*x765);
IkReal x774=(cj0*x766);
evalcond[0]=((-0.279336801757028)+(((0.547645125958379)*pp))+(((-0.766703176341731)*pz))+(((5.55555555555556e-11)*x765)));
evalcond[1]=((((-1.0)*sj0*x769))+(((-1.0)*cj0*x770))+(((5.55555555555556e-11)*x766)));
evalcond[2]=(((px*x771))+((px*x772))+(((-0.913)*x766))+(((-1.0)*x769*x774))+((py*x773)));
evalcond[3]=((5.55555555555556e-11)+((px*x773))+(((-0.913)*x765))+(((-1.0)*x769*x771))+(((-1.0)*x769*x772))+(((-1.0)*x770*x774)));
evalcond[4]=((-1.157069)+(((-1.0)*x768*x773))+(((-1.826)*cj0*py))+(((1.826)*px*sj0))+((x767*x771))+((x767*x772))+(((-1.0)*pp))+(((1.4)*pz))+(((0.13695)*x765))+((x768*x774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x775=(cj0*sj0);
IkReal x776=((0.425)*sj3);
IkReal x777=(px*sj0);
IkReal x778=(cj0*py);
IkReal x779=((0.222222222222222)*pz);
IkReal x780=(px*py);
CheckValue<IkReal> x781=IKPowWithIntegerCheck(((0.230555555555556)+x776+(((-1.0)*x779))),-1);
if(!x781.valid){
continue;
}
CheckValue<IkReal> x782=IKPowWithIntegerCheck(((-0.210497222222222)+((x776*x777))+(((-0.230555555555556)*x778))+(((0.230555555555556)*x777))+(((0.202888888888889)*pz))+((x778*x779))+(((-0.388025)*sj3))+(((-1.0)*x776*x778))+(((-1.0)*x777*x779))),-1);
if(!x782.valid){
continue;
}
if( IKabs(((x781.value)*(((0.913)+x778+(((-1.0)*x777)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x782.value)*(((((-1.0)*x775*(py*py)))+(((-0.913)*py*sj0))+(((-0.913)*cj0*px))+((x775*(px*px)))+(((-2.0)*cj0*px*x778))+x780)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x781.value)*(((0.913)+x778+(((-1.0)*x777))))))+IKsqr(((x782.value)*(((((-1.0)*x775*(py*py)))+(((-0.913)*py*sj0))+(((-0.913)*cj0*px))+((x775*(px*px)))+(((-2.0)*cj0*px*x778))+x780))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x781.value)*(((0.913)+x778+(((-1.0)*x777))))), ((x782.value)*(((((-1.0)*x775*(py*py)))+(((-0.913)*py*sj0))+(((-0.913)*cj0*px))+((x775*(px*px)))+(((-2.0)*cj0*px*x778))+x780))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x783=IKcos(j1);
IkReal x784=IKsin(j1);
IkReal x785=((0.15)*py);
IkReal x786=(cj0*py);
IkReal x787=(px*sj0);
IkReal x788=((0.425)*sj3);
IkReal x789=((0.222222222222222)*pz);
IkReal x790=(py*sj0);
IkReal x791=(sj0*x783);
IkReal x792=(cj0*x784);
IkReal x793=(cj0*px*x783);
evalcond[0]=(((x783*x788))+(((-1.0)*x790))+(((-1.0)*cj0*px))+(((0.230555555555556)*x783))+(((-1.0)*x783*x789)));
evalcond[1]=((-0.913)+((x784*x788))+(((-1.0)*x784*x789))+x787+(((-1.0)*x786))+(((0.230555555555556)*x784)));
evalcond[2]=(((px*x792))+((x783*x787))+((x784*x790))+(((-0.913)*x783))+(((-1.0)*x783*x786)));
evalcond[3]=((0.230555555555556)+(((-1.0)*x789))+((x784*x787))+(((-1.0)*x784*x786))+(((-0.913)*x784))+x788+(((-1.0)*x793))+(((-1.0)*x783*x790)));
evalcond[4]=((-1.157069)+(((0.15)*x793))+((x785*x791))+((x785*x792))+(((-1.826)*x786))+(((-1.0)*pp))+(((-0.15)*x784*x787))+(((0.13695)*x784))+(((1.4)*pz))+(((1.826)*x787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x794=(py*sj0);
IkReal x795=(cj0*px);
IkReal x796=((0.222222222222222)*pz);
IkReal x797=(cj0*sj0);
IkReal x798=((0.425)*sj3);
IkReal x799=(px*py);
CheckValue<IkReal> x800=IKPowWithIntegerCheck(((((-1.0)*x794*x796))+(((-1.0)*x795*x796))+((x794*x798))+(((0.230555555555556)*x795))+(((0.230555555555556)*x794))+((x795*x798))),-1);
if(!x800.valid){
continue;
}
CheckValue<IkReal> x801=IKPowWithIntegerCheck(((0.230555555555556)+(((-1.0)*x796))+x798),-1);
if(!x801.valid){
continue;
}
if( IKabs(((x800.value)*(((((2.0)*cj0*py*x795))+(((0.913)*x794))+(((0.913)*x795))+((cj0*py*x794))+(((-1.0)*x799))+(((-1.0)*px*sj0*x795)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x801.value)*((x795+x794)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x800.value)*(((((2.0)*cj0*py*x795))+(((0.913)*x794))+(((0.913)*x795))+((cj0*py*x794))+(((-1.0)*x799))+(((-1.0)*px*sj0*x795))))))+IKsqr(((x801.value)*((x795+x794))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x800.value)*(((((2.0)*cj0*py*x795))+(((0.913)*x794))+(((0.913)*x795))+((cj0*py*x794))+(((-1.0)*x799))+(((-1.0)*px*sj0*x795))))), ((x801.value)*((x795+x794))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x802=IKcos(j1);
IkReal x803=IKsin(j1);
IkReal x804=((0.15)*py);
IkReal x805=(cj0*py);
IkReal x806=(px*sj0);
IkReal x807=((0.425)*sj3);
IkReal x808=((0.222222222222222)*pz);
IkReal x809=(py*sj0);
IkReal x810=(sj0*x802);
IkReal x811=(cj0*x803);
IkReal x812=(cj0*px*x802);
evalcond[0]=((((-1.0)*x809))+(((0.230555555555556)*x802))+((x802*x807))+(((-1.0)*x802*x808))+(((-1.0)*cj0*px)));
evalcond[1]=((-0.913)+(((-1.0)*x805))+((x803*x807))+(((0.230555555555556)*x803))+(((-1.0)*x803*x808))+x806);
evalcond[2]=((((-1.0)*x802*x805))+((px*x811))+((x803*x809))+((x802*x806))+(((-0.913)*x802)));
evalcond[3]=((0.230555555555556)+(((-1.0)*x802*x809))+(((-1.0)*x803*x805))+((x803*x806))+(((-1.0)*x812))+x807+(((-1.0)*x808))+(((-0.913)*x803)));
evalcond[4]=((-1.157069)+(((-1.826)*x805))+(((-1.0)*pp))+((x804*x811))+((x804*x810))+(((1.826)*x806))+(((0.13695)*x803))+(((1.4)*pz))+(((-0.15)*x803*x806))+(((0.15)*x812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x813=IKPowWithIntegerCheck(IKsign(((0.230555555555556)+(((-0.222222222222222)*pz))+(((0.425)*sj3)))),-1);
if(!x813.valid){
continue;
}
CheckValue<IkReal> x814 = IKatan2WithCheck(IkReal(((0.913)+(((-1.0)*px*sj0))+((cj0*py)))),IkReal((((cj0*px))+((py*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x814.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x813.value)))+(x814.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x815=IKcos(j1);
IkReal x816=IKsin(j1);
IkReal x817=((0.15)*py);
IkReal x818=(cj0*py);
IkReal x819=(px*sj0);
IkReal x820=((0.425)*sj3);
IkReal x821=((0.222222222222222)*pz);
IkReal x822=(py*sj0);
IkReal x823=(sj0*x815);
IkReal x824=(cj0*x816);
IkReal x825=(cj0*px*x815);
evalcond[0]=(((x815*x820))+(((-1.0)*x815*x821))+(((-1.0)*x822))+(((0.230555555555556)*x815))+(((-1.0)*cj0*px)));
evalcond[1]=((-0.913)+(((-1.0)*x816*x821))+((x816*x820))+(((-1.0)*x818))+x819+(((0.230555555555556)*x816)));
evalcond[2]=(((x815*x819))+(((-1.0)*x815*x818))+((px*x824))+(((-0.913)*x815))+((x816*x822)));
evalcond[3]=((0.230555555555556)+(((-1.0)*x815*x822))+((x816*x819))+(((-1.0)*x821))+(((-1.0)*x816*x818))+(((-0.913)*x816))+(((-1.0)*x825))+x820);
evalcond[4]=((-1.157069)+(((-0.15)*x816*x819))+(((0.13695)*x816))+(((1.826)*x819))+((x817*x823))+((x817*x824))+(((-1.0)*pp))+(((1.4)*pz))+(((-1.826)*x818))+(((0.15)*x825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x828 = IKatan2WithCheck(IkReal(((-1.826)*py)),IkReal(((1.826)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x828.valid){
continue;
}
IkReal x826=((1.0)*(x828.value));
if((((((3.334276)*(py*py)))+(((3.334276)*(px*px))))) < -0.00001)
continue;
CheckValue<IkReal> x829=IKPowWithIntegerCheck(IKabs(IKsqrt(((((3.334276)*(py*py)))+(((3.334276)*(px*px)))))),-1);
if(!x829.valid){
continue;
}
if( (((x829.value)*(((-1.12248566666667)+(((0.06375)*sj3))+(((-1.0)*pp))+(((1.36666666666667)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x829.value)*(((-1.12248566666667)+(((0.06375)*sj3))+(((-1.0)*pp))+(((1.36666666666667)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x827=IKasin(((x829.value)*(((-1.12248566666667)+(((0.06375)*sj3))+(((-1.0)*pp))+(((1.36666666666667)*pz))))));
j0array[0]=((((-1.0)*x826))+(((-1.0)*x827)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x826))+x827);
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j1eval[3];
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=((1.0375)+(((1.9125)*sj3))+(((-1.0)*pz)));
j1eval[1]=IKsign(((0.230555555555556)+(((-0.222222222222222)*pz))+(((0.425)*sj3))));
j1eval[2]=((IKabs(((0.913)+(((-1.0)*px*sj0))+((cj0*py)))))+(IKabs((((cj0*px))+((py*sj0))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x830=(py*sj0);
IkReal x831=((1.9125)*sj3);
IkReal x832=((1.0)*pz);
IkReal x833=(cj0*px);
j1eval[0]=((((-1.0)*x832*x833))+((x831*x833))+(((1.0375)*x833))+(((1.0375)*x830))+(((-1.0)*x830*x832))+((x830*x831)));
j1eval[1]=((1.0375)+(((-1.0)*x832))+x831);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x834=((1.9125)*sj3);
IkReal x835=(px*sj0);
IkReal x836=((1.09529025191676)*pz);
IkReal x837=((2.0947426067908)*sj3);
IkReal x838=(cj0*py);
j1eval[0]=((1.0375)+(((-1.0)*pz))+x834);
j1eval[1]=((-1.0375)+(((1.13636363636364)*x835))+(((-1.0)*x835*x836))+((x835*x837))+(((-1.0)*x837*x838))+((x836*x838))+pz+(((-1.0)*x834))+(((-1.13636363636364)*x838)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal gconst3=((-0.542483660130719)+(((0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.542483660130719)+sj3+(((-0.522875816993464)*pz)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp))))+IKsqr(((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp))), ((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x839=IKsin(j1);
IkReal x840=IKcos(j1);
IkReal x841=((0.15)*py);
IkReal x842=((0.15)*px);
IkReal x843=((1.0)*py);
IkReal x844=((1.0)*px);
IkReal x845=(sj0*x840);
IkReal x846=(cj0*x839);
IkReal x847=(sj0*x839);
IkReal x848=(cj0*x840);
evalcond[0]=((-0.279336801757028)+(((5.55555555555556e-11)*x839))+(((0.547645125958379)*pp))+(((-0.766703176341731)*pz)));
evalcond[1]=((((5.55555555555556e-11)*x840))+(((-1.0)*sj0*x843))+(((-1.0)*cj0*x844)));
evalcond[2]=(((py*x847))+(((-1.0)*x843*x848))+(((-0.913)*x840))+((px*x845))+((px*x846)));
evalcond[3]=((5.55555555555556e-11)+(((-1.0)*x843*x846))+(((-1.0)*x843*x845))+(((-0.913)*x839))+(((-1.0)*x844*x848))+((px*x847)));
evalcond[4]=((-1.157069)+(((-1.826)*cj0*py))+(((1.826)*px*sj0))+(((-1.0)*x842*x847))+(((-1.0)*pp))+((x842*x848))+(((0.13695)*x839))+(((1.4)*pz))+((x841*x845))+((x841*x846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst3=((-0.542483660130719)+(((0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.542483660130719)+sj3+(((-0.522875816993464)*pz)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp))))+IKsqr(((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp))), ((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x849=IKsin(j1);
IkReal x850=IKcos(j1);
IkReal x851=((0.15)*py);
IkReal x852=((0.15)*px);
IkReal x853=((1.0)*py);
IkReal x854=((1.0)*px);
IkReal x855=(sj0*x850);
IkReal x856=(cj0*x849);
IkReal x857=(sj0*x849);
IkReal x858=(cj0*x850);
evalcond[0]=((-0.279336801757028)+(((5.55555555555556e-11)*x849))+(((0.547645125958379)*pp))+(((-0.766703176341731)*pz)));
evalcond[1]=((((5.55555555555556e-11)*x850))+(((-1.0)*sj0*x853))+(((-1.0)*cj0*x854)));
evalcond[2]=((((-1.0)*x853*x858))+(((-0.913)*x850))+((px*x856))+((px*x855))+((py*x857)));
evalcond[3]=((5.55555555555556e-11)+(((-1.0)*x853*x856))+(((-1.0)*x853*x855))+((px*x857))+(((-0.913)*x849))+(((-1.0)*x854*x858)));
evalcond[4]=((-1.157069)+(((-1.826)*cj0*py))+(((-1.0)*x852*x857))+(((1.826)*px*sj0))+(((-1.0)*pp))+((x851*x855))+((x851*x856))+((x852*x858))+(((1.4)*pz))+(((0.13695)*x849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x859=(cj0*sj0);
IkReal x860=((0.425)*sj3);
IkReal x861=(px*sj0);
IkReal x862=(cj0*py);
IkReal x863=((0.222222222222222)*pz);
IkReal x864=(px*py);
CheckValue<IkReal> x865=IKPowWithIntegerCheck(((0.230555555555556)+(((-1.0)*x863))+x860),-1);
if(!x865.valid){
continue;
}
CheckValue<IkReal> x866=IKPowWithIntegerCheck(((-0.210497222222222)+(((0.230555555555556)*x861))+(((0.202888888888889)*pz))+(((-1.0)*x861*x863))+(((-1.0)*x860*x862))+(((-0.388025)*sj3))+((x862*x863))+((x860*x861))+(((-0.230555555555556)*x862))),-1);
if(!x866.valid){
continue;
}
if( IKabs(((x865.value)*(((0.913)+(((-1.0)*x861))+x862)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x866.value)*(((((-0.913)*py*sj0))+(((-0.913)*cj0*px))+(((-2.0)*cj0*px*x862))+x864+(((-1.0)*x859*(py*py)))+((x859*(px*px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x865.value)*(((0.913)+(((-1.0)*x861))+x862))))+IKsqr(((x866.value)*(((((-0.913)*py*sj0))+(((-0.913)*cj0*px))+(((-2.0)*cj0*px*x862))+x864+(((-1.0)*x859*(py*py)))+((x859*(px*px)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x865.value)*(((0.913)+(((-1.0)*x861))+x862))), ((x866.value)*(((((-0.913)*py*sj0))+(((-0.913)*cj0*px))+(((-2.0)*cj0*px*x862))+x864+(((-1.0)*x859*(py*py)))+((x859*(px*px)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x867=IKcos(j1);
IkReal x868=IKsin(j1);
IkReal x869=((0.15)*py);
IkReal x870=(cj0*py);
IkReal x871=(px*sj0);
IkReal x872=((0.425)*sj3);
IkReal x873=((0.222222222222222)*pz);
IkReal x874=(py*sj0);
IkReal x875=(sj0*x867);
IkReal x876=(cj0*x868);
IkReal x877=(cj0*px*x867);
evalcond[0]=(((x867*x872))+(((0.230555555555556)*x867))+(((-1.0)*x874))+(((-1.0)*x867*x873))+(((-1.0)*cj0*px)));
evalcond[1]=((-0.913)+(((0.230555555555556)*x868))+((x868*x872))+(((-1.0)*x868*x873))+(((-1.0)*x870))+x871);
evalcond[2]=(((x867*x871))+((x868*x874))+(((-0.913)*x867))+(((-1.0)*x867*x870))+((px*x876)));
evalcond[3]=((0.230555555555556)+((x868*x871))+(((-0.913)*x868))+(((-1.0)*x877))+(((-1.0)*x867*x874))+(((-1.0)*x868*x870))+x872+(((-1.0)*x873)));
evalcond[4]=((-1.157069)+(((-1.826)*x870))+(((0.13695)*x868))+(((1.826)*x871))+(((-0.15)*x868*x871))+(((-1.0)*pp))+((x869*x875))+((x869*x876))+(((0.15)*x877))+(((1.4)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x878=(py*sj0);
IkReal x879=(cj0*px);
IkReal x880=((0.222222222222222)*pz);
IkReal x881=(cj0*sj0);
IkReal x882=((0.425)*sj3);
IkReal x883=(px*py);
CheckValue<IkReal> x884=IKPowWithIntegerCheck(((((0.230555555555556)*x878))+(((0.230555555555556)*x879))+(((-1.0)*x879*x880))+((x879*x882))+((x878*x882))+(((-1.0)*x878*x880))),-1);
if(!x884.valid){
continue;
}
CheckValue<IkReal> x885=IKPowWithIntegerCheck(((0.230555555555556)+(((-1.0)*x880))+x882),-1);
if(!x885.valid){
continue;
}
if( IKabs(((x884.value)*((((cj0*py*x878))+(((-1.0)*px*sj0*x879))+(((2.0)*cj0*py*x879))+(((-1.0)*x883))+(((0.913)*x879))+(((0.913)*x878)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x885.value)*((x878+x879)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x884.value)*((((cj0*py*x878))+(((-1.0)*px*sj0*x879))+(((2.0)*cj0*py*x879))+(((-1.0)*x883))+(((0.913)*x879))+(((0.913)*x878))))))+IKsqr(((x885.value)*((x878+x879))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x884.value)*((((cj0*py*x878))+(((-1.0)*px*sj0*x879))+(((2.0)*cj0*py*x879))+(((-1.0)*x883))+(((0.913)*x879))+(((0.913)*x878))))), ((x885.value)*((x878+x879))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x886=IKcos(j1);
IkReal x887=IKsin(j1);
IkReal x888=((0.15)*py);
IkReal x889=(cj0*py);
IkReal x890=(px*sj0);
IkReal x891=((0.425)*sj3);
IkReal x892=((0.222222222222222)*pz);
IkReal x893=(py*sj0);
IkReal x894=(sj0*x886);
IkReal x895=(cj0*x887);
IkReal x896=(cj0*px*x886);
evalcond[0]=(((x886*x891))+(((0.230555555555556)*x886))+(((-1.0)*x893))+(((-1.0)*cj0*px))+(((-1.0)*x886*x892)));
evalcond[1]=((-0.913)+(((0.230555555555556)*x887))+(((-1.0)*x889))+x890+((x887*x891))+(((-1.0)*x887*x892)));
evalcond[2]=(((x886*x890))+((px*x895))+(((-1.0)*x886*x889))+(((-0.913)*x886))+((x887*x893)));
evalcond[3]=((0.230555555555556)+(((-1.0)*x887*x889))+(((-1.0)*x886*x893))+(((-1.0)*x892))+(((-0.913)*x887))+(((-1.0)*x896))+x891+((x887*x890)));
evalcond[4]=((-1.157069)+(((-1.826)*x889))+(((0.13695)*x887))+(((1.826)*x890))+(((-1.0)*pp))+(((-0.15)*x887*x890))+(((1.4)*pz))+(((0.15)*x896))+((x888*x894))+((x888*x895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x897=IKPowWithIntegerCheck(IKsign(((0.230555555555556)+(((-0.222222222222222)*pz))+(((0.425)*sj3)))),-1);
if(!x897.valid){
continue;
}
CheckValue<IkReal> x898 = IKatan2WithCheck(IkReal(((0.913)+(((-1.0)*px*sj0))+((cj0*py)))),IkReal((((cj0*px))+((py*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x898.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x897.value)))+(x898.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x899=IKcos(j1);
IkReal x900=IKsin(j1);
IkReal x901=((0.15)*py);
IkReal x902=(cj0*py);
IkReal x903=(px*sj0);
IkReal x904=((0.425)*sj3);
IkReal x905=((0.222222222222222)*pz);
IkReal x906=(py*sj0);
IkReal x907=(sj0*x899);
IkReal x908=(cj0*x900);
IkReal x909=(cj0*px*x899);
evalcond[0]=(((x899*x904))+(((-1.0)*x906))+(((-1.0)*x899*x905))+(((-1.0)*cj0*px))+(((0.230555555555556)*x899)));
evalcond[1]=((-0.913)+(((-1.0)*x900*x905))+((x900*x904))+(((-1.0)*x902))+(((0.230555555555556)*x900))+x903);
evalcond[2]=(((px*x908))+((x900*x906))+(((-0.913)*x899))+((x899*x903))+(((-1.0)*x899*x902)));
evalcond[3]=((0.230555555555556)+(((-0.913)*x900))+(((-1.0)*x900*x902))+(((-1.0)*x905))+((x900*x903))+(((-1.0)*x909))+(((-1.0)*x899*x906))+x904);
evalcond[4]=((-1.157069)+(((0.13695)*x900))+(((0.15)*x909))+((x901*x908))+((x901*x907))+(((-0.15)*x900*x903))+(((-1.0)*pp))+(((1.4)*pz))+(((-1.826)*x902))+(((1.826)*x903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=(pp+(((-1.0)*(pz*pz))));
j0eval[1]=((px*px)+(py*py));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[4];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=((py*py*py*py)+(((px*px)*(py*py))));
j0eval[1]=3.334276;
j0eval[2]=py;
j0eval[3]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  )
{
{
IkReal j0eval[4];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=((((px*px)*(py*py)))+(px*px*px*px));
j0eval[1]=3.334276;
j0eval[2]=px;
j0eval[3]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x910=px*px;
CheckValue<IkReal> x913 = IKatan2WithCheck(IkReal(((-1.826)*px*py)),IkReal(((1.826)*x910)),IKFAST_ATAN2_MAGTHRESH);
if(!x913.valid){
continue;
}
IkReal x911=((1.0)*(x913.value));
if((((((3.334276)*x910*(py*py)))+(((3.334276)*(x910*x910))))) < -0.00001)
continue;
CheckValue<IkReal> x914=IKPowWithIntegerCheck(IKabs(IKsqrt(((((3.334276)*x910*(py*py)))+(((3.334276)*(x910*x910)))))),-1);
if(!x914.valid){
continue;
}
if( (((-1.0)*(x914.value)*(((((-1.0)*pp*px))+(((-0.657719)*px))+(((-0.0933333333333333)*px*pz))+(((-0.06375)*px*sj3)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x914.value)*(((((-1.0)*pp*px))+(((-0.657719)*px))+(((-0.0933333333333333)*px*pz))+(((-0.06375)*px*sj3)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x912=((-1.0)*(IKasin(((-1.0)*(x914.value)*(((((-1.0)*pp*px))+(((-0.657719)*px))+(((-0.0933333333333333)*px*pz))+(((-0.06375)*px*sj3))))))));
j0array[0]=((((-1.0)*x911))+(((-1.0)*x912)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x911))+(((1.0)*x912)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x915=IKcos(j0);
IkReal x916=IKsin(j0);
IkReal x917=((0.0933333333333333)*pz);
IkReal x918=((0.06375)*sj3);
IkReal x919=((1.826)*x915);
IkReal x920=((1.826)*px*x916);
evalcond[0]=((-0.657719)+(((-1.0)*x918))+(((-1.0)*x917))+(((-1.0)*py*x919))+(((-1.0)*pp))+x920);
evalcond[1]=(((x919*(py*py)))+(((-1.0)*py*x920))+(((0.657719)*py))+((py*x918))+((py*x917))+((pp*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=((1.0)+(((-3.2520325203252)*pz))+(((-6.21951219512195)*sj3)));
j1eval[1]=IKsign(((0.0683333333333333)+(((-0.222222222222222)*pz))+(((-0.425)*sj3))));
j1eval[2]=((IKabs(((0.913)+(((-1.0)*px*sj0))+((cj0*py)))))+(IKabs((((cj0*px))+((py*sj0))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x921=(cj0*px);
IkReal x922=((3.2520325203252)*pz);
IkReal x923=(py*sj0);
IkReal x924=((6.21951219512195)*sj3);
j1eval[0]=((((-1.0)*x921*x922))+(((-1.0)*x921*x924))+x923+x921+(((-1.0)*x923*x924))+(((-1.0)*x922*x923)));
j1eval[1]=((1.0)+(((-1.0)*x924))+(((-1.0)*x922)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x925=((6.21951219512195)*sj3);
IkReal x926=((3.2520325203252)*pz);
IkReal x927=(px*sj0);
IkReal x928=((3.56191951842848)*pz);
IkReal x929=(cj0*py);
IkReal x930=((6.81217107899447)*sj3);
IkReal x931=(x926+x925);
j1eval[0]=((1.0)+(((-1.0)*x931)));
j1eval[1]=((-1.0)+((x928*x929))+(((-1.0)*x927*x928))+(((-1.0)*x927*x930))+(((-1.09529025191676)*x929))+(((1.09529025191676)*x927))+x931+((x929*x930)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal gconst7=((0.16078431372549)+(((-0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.16078431372549)+sj3+(((0.522875816993464)*pz)))))+(IKabs(((-1.0)+(IKsign(cj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp))))+IKsqr(((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp))), ((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x932=IKsin(j1);
IkReal x933=IKcos(j1);
IkReal x934=((0.15)*py);
IkReal x935=((0.15)*px);
IkReal x936=((1.0)*py);
IkReal x937=((1.0)*px);
IkReal x938=(sj0*x933);
IkReal x939=(cj0*x932);
IkReal x940=(sj0*x932);
IkReal x941=(cj0*x933);
evalcond[0]=((-0.54719003286311)+(((0.547645125958379)*pp))+(((5.3594771199795e-11)*x932))+(((0.0328587075575027)*pz)));
evalcond[1]=((((-1.0)*cj0*x937))+(((-1.0)*sj0*x936))+(((5.3594771199795e-11)*x933)));
evalcond[2]=(((px*x938))+((px*x939))+(((-1.0)*x936*x941))+((py*x940))+(((-0.913)*x933)));
evalcond[3]=((-5.3594771199795e-11)+((py*x939))+((py*x938))+((px*x941))+(((0.913)*x932))+(((-1.0)*x937*x940)));
evalcond[4]=((-0.667969)+(((-1.826)*cj0*py))+(((1.826)*px*sj0))+(((0.13695)*x932))+(((-1.0)*pp))+(((-0.06)*pz))+((x935*x941))+((x934*x939))+((x934*x938))+(((-1.0)*x935*x940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst7=((0.16078431372549)+(((-0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.16078431372549)+sj3+(((0.522875816993464)*pz)))))+(IKabs(((1.0)+(IKsign(cj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp))))+IKsqr(((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp))), ((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x942=IKsin(j1);
IkReal x943=IKcos(j1);
IkReal x944=((0.15)*py);
IkReal x945=((0.15)*px);
IkReal x946=((1.0)*py);
IkReal x947=((1.0)*px);
IkReal x948=(sj0*x943);
IkReal x949=(cj0*x942);
IkReal x950=(sj0*x942);
IkReal x951=(cj0*x943);
evalcond[0]=((-0.54719003286311)+(((0.547645125958379)*pp))+(((0.0328587075575027)*pz))+(((5.3594771199795e-11)*x942)));
evalcond[1]=((((-1.0)*cj0*x947))+(((5.3594771199795e-11)*x943))+(((-1.0)*sj0*x946)));
evalcond[2]=(((py*x950))+(((-1.0)*x946*x951))+((px*x949))+((px*x948))+(((-0.913)*x943)));
evalcond[3]=((-5.3594771199795e-11)+((px*x951))+(((-1.0)*x947*x950))+(((0.913)*x942))+((py*x949))+((py*x948)));
evalcond[4]=((-0.667969)+(((-1.826)*cj0*py))+(((0.13695)*x942))+(((1.826)*px*sj0))+(((-1.0)*pp))+(((-0.06)*pz))+((x944*x949))+((x944*x948))+(((-1.0)*x945*x950))+((x945*x951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x952=(cj0*sj0);
IkReal x953=(px*py);
IkReal x954=(cj0*py);
IkReal x955=((0.425)*sj3);
IkReal x956=(px*sj0);
IkReal x957=((0.222222222222222)*pz);
CheckValue<IkReal> x958=IKPowWithIntegerCheck(((0.0683333333333333)+(((-1.0)*x955))+(((-1.0)*x957))),-1);
if(!x958.valid){
continue;
}
CheckValue<IkReal> x959=IKPowWithIntegerCheck(((-0.0623883333333333)+(((0.388025)*sj3))+(((0.202888888888889)*pz))+(((-1.0)*x956*x957))+(((-0.0683333333333333)*x954))+(((-1.0)*x955*x956))+(((0.0683333333333333)*x956))+((x954*x957))+((x954*x955))),-1);
if(!x959.valid){
continue;
}
if( IKabs(((x958.value)*(((0.913)+(((-1.0)*x956))+x954)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x959.value)*(((((-0.913)*py*sj0))+(((-1.0)*x952*(py*py)))+(((-2.0)*x953*(cj0*cj0)))+(((-0.913)*cj0*px))+x953+((x952*(px*px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x958.value)*(((0.913)+(((-1.0)*x956))+x954))))+IKsqr(((x959.value)*(((((-0.913)*py*sj0))+(((-1.0)*x952*(py*py)))+(((-2.0)*x953*(cj0*cj0)))+(((-0.913)*cj0*px))+x953+((x952*(px*px)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x958.value)*(((0.913)+(((-1.0)*x956))+x954))), ((x959.value)*(((((-0.913)*py*sj0))+(((-1.0)*x952*(py*py)))+(((-2.0)*x953*(cj0*cj0)))+(((-0.913)*cj0*px))+x953+((x952*(px*px)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x960=IKcos(j1);
IkReal x961=IKsin(j1);
IkReal x962=((0.15)*py);
IkReal x963=(cj0*py);
IkReal x964=(px*sj0);
IkReal x965=((0.425)*sj3);
IkReal x966=((0.222222222222222)*pz);
IkReal x967=(py*sj0);
IkReal x968=(sj0*x960);
IkReal x969=(cj0*x961);
IkReal x970=(cj0*px*x960);
evalcond[0]=((((-1.0)*x960*x966))+(((-1.0)*x960*x965))+(((-1.0)*x967))+(((0.0683333333333333)*x960))+(((-1.0)*cj0*px)));
evalcond[1]=((-0.913)+(((-1.0)*x961*x966))+(((-1.0)*x961*x965))+(((-1.0)*x963))+(((0.0683333333333333)*x961))+x964);
evalcond[2]=(((px*x969))+(((-1.0)*x960*x963))+((x961*x967))+((x960*x964))+(((-0.913)*x960)));
evalcond[3]=((-0.0683333333333333)+(((-1.0)*x961*x964))+((x961*x963))+(((0.913)*x961))+((x960*x967))+x970+x966+x965);
evalcond[4]=((-0.667969)+(((-1.826)*x963))+((x962*x968))+((x962*x969))+(((0.13695)*x961))+(((-1.0)*pp))+(((-0.06)*pz))+(((1.826)*x964))+(((0.15)*x970))+(((-0.15)*x961*x964)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x971=(cj0*px);
IkReal x972=((0.222222222222222)*pz);
IkReal x973=((0.425)*sj3);
IkReal x974=(py*sj0);
IkReal x975=(px*py);
IkReal x976=(cj0*sj0);
CheckValue<IkReal> x977=IKPowWithIntegerCheck(((((0.0683333333333333)*x974))+(((0.0683333333333333)*x971))+(((-1.0)*x971*x972))+(((-1.0)*x971*x973))+(((-1.0)*x972*x974))+(((-1.0)*x973*x974))),-1);
if(!x977.valid){
continue;
}
CheckValue<IkReal> x978=IKPowWithIntegerCheck(((0.0683333333333333)+(((-1.0)*x972))+(((-1.0)*x973))),-1);
if(!x978.valid){
continue;
}
if( IKabs(((x977.value)*(((((-1.0)*x975))+(((-1.0)*px*sj0*x971))+(((2.0)*cj0*py*x971))+(((0.913)*x971))+(((0.913)*x974))+((cj0*py*x974)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x978.value)*((x971+x974)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x977.value)*(((((-1.0)*x975))+(((-1.0)*px*sj0*x971))+(((2.0)*cj0*py*x971))+(((0.913)*x971))+(((0.913)*x974))+((cj0*py*x974))))))+IKsqr(((x978.value)*((x971+x974))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x977.value)*(((((-1.0)*x975))+(((-1.0)*px*sj0*x971))+(((2.0)*cj0*py*x971))+(((0.913)*x971))+(((0.913)*x974))+((cj0*py*x974))))), ((x978.value)*((x971+x974))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x979=IKcos(j1);
IkReal x980=IKsin(j1);
IkReal x981=((0.15)*py);
IkReal x982=(cj0*py);
IkReal x983=(px*sj0);
IkReal x984=((0.425)*sj3);
IkReal x985=((0.222222222222222)*pz);
IkReal x986=(py*sj0);
IkReal x987=(sj0*x979);
IkReal x988=(cj0*x980);
IkReal x989=(cj0*px*x979);
evalcond[0]=((((0.0683333333333333)*x979))+(((-1.0)*x986))+(((-1.0)*x979*x985))+(((-1.0)*x979*x984))+(((-1.0)*cj0*px)));
evalcond[1]=((-0.913)+(((-1.0)*x982))+(((-1.0)*x980*x985))+(((-1.0)*x980*x984))+x983+(((0.0683333333333333)*x980)));
evalcond[2]=((((-1.0)*x979*x982))+((x979*x983))+(((-0.913)*x979))+((x980*x986))+((px*x988)));
evalcond[3]=((-0.0683333333333333)+((x979*x986))+(((0.913)*x980))+(((-1.0)*x980*x983))+((x980*x982))+x989+x984+x985);
evalcond[4]=((-0.667969)+((x981*x987))+((x981*x988))+(((-1.826)*x982))+(((-1.0)*pp))+(((-0.06)*pz))+(((0.13695)*x980))+(((0.15)*x989))+(((1.826)*x983))+(((-0.15)*x980*x983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x990=IKPowWithIntegerCheck(IKsign(((0.0683333333333333)+(((-0.222222222222222)*pz))+(((-0.425)*sj3)))),-1);
if(!x990.valid){
continue;
}
CheckValue<IkReal> x991 = IKatan2WithCheck(IkReal(((0.913)+(((-1.0)*px*sj0))+((cj0*py)))),IkReal((((cj0*px))+((py*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x991.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x990.value)))+(x991.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x992=IKcos(j1);
IkReal x993=IKsin(j1);
IkReal x994=((0.15)*py);
IkReal x995=(cj0*py);
IkReal x996=(px*sj0);
IkReal x997=((0.425)*sj3);
IkReal x998=((0.222222222222222)*pz);
IkReal x999=(py*sj0);
IkReal x1000=(sj0*x992);
IkReal x1001=(cj0*x993);
IkReal x1002=(cj0*px*x992);
evalcond[0]=((((-1.0)*x999))+(((-1.0)*x992*x997))+(((-1.0)*x992*x998))+(((0.0683333333333333)*x992))+(((-1.0)*cj0*px)));
evalcond[1]=((-0.913)+(((-1.0)*x995))+(((0.0683333333333333)*x993))+(((-1.0)*x993*x998))+(((-1.0)*x993*x997))+x996);
evalcond[2]=(((x993*x999))+((px*x1001))+((x992*x996))+(((-1.0)*x992*x995))+(((-0.913)*x992)));
evalcond[3]=((-0.0683333333333333)+((x993*x995))+(((-1.0)*x993*x996))+(((0.913)*x993))+x1002+((x992*x999))+x997+x998);
evalcond[4]=((-0.667969)+((x1000*x994))+(((0.15)*x1002))+(((-1.826)*x995))+(((-1.0)*pp))+(((-0.06)*pz))+((x1001*x994))+(((1.826)*x996))+(((0.13695)*x993))+(((-0.15)*x993*x996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1003=py*py;
CheckValue<IkReal> x1006 = IKatan2WithCheck(IkReal(((1.826)*x1003)),IkReal(((-1.826)*px*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x1006.valid){
continue;
}
IkReal x1004=((1.0)*(x1006.value));
if((((((3.334276)*(x1003*x1003)))+(((3.334276)*x1003*(px*px))))) < -0.00001)
continue;
CheckValue<IkReal> x1007=IKPowWithIntegerCheck(IKabs(IKsqrt(((((3.334276)*(x1003*x1003)))+(((3.334276)*x1003*(px*px)))))),-1);
if(!x1007.valid){
continue;
}
if( (((x1007.value)*(((((0.657719)*py))+(((0.06375)*py*sj3))+(((0.0933333333333333)*py*pz))+((pp*py)))))) < -1-IKFAST_SINCOS_THRESH || (((x1007.value)*(((((0.657719)*py))+(((0.06375)*py*sj3))+(((0.0933333333333333)*py*pz))+((pp*py)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1005=IKasin(((x1007.value)*(((((0.657719)*py))+(((0.06375)*py*sj3))+(((0.0933333333333333)*py*pz))+((pp*py))))));
j0array[0]=((((-1.0)*x1005))+(((-1.0)*x1004)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+x1005+(((-1.0)*x1004)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1008=IKsin(j0);
IkReal x1009=IKcos(j0);
IkReal x1010=((1.0)*pp);
IkReal x1011=((0.0933333333333333)*pz);
IkReal x1012=((1.826)*px);
IkReal x1013=((0.06375)*sj3);
IkReal x1014=(py*x1009);
evalcond[0]=((-0.657719)+(((-1.0)*x1011))+(((-1.0)*x1010))+(((-1.0)*x1013))+(((-1.826)*x1014))+((x1008*x1012)));
evalcond[1]=((((-1.0)*x1012*x1014))+(((-1.0)*px*x1011))+(((-1.0)*px*x1010))+(((-1.0)*px*x1013))+(((-0.657719)*px))+((px*x1008*x1012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=((1.0)+(((-3.2520325203252)*pz))+(((-6.21951219512195)*sj3)));
j1eval[1]=IKsign(((0.0683333333333333)+(((-0.222222222222222)*pz))+(((-0.425)*sj3))));
j1eval[2]=((IKabs(((0.913)+(((-1.0)*px*sj0))+((cj0*py)))))+(IKabs((((cj0*px))+((py*sj0))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1015=(cj0*px);
IkReal x1016=((3.2520325203252)*pz);
IkReal x1017=(py*sj0);
IkReal x1018=((6.21951219512195)*sj3);
j1eval[0]=(x1015+x1017+(((-1.0)*x1017*x1018))+(((-1.0)*x1015*x1018))+(((-1.0)*x1015*x1016))+(((-1.0)*x1016*x1017)));
j1eval[1]=((1.0)+(((-1.0)*x1018))+(((-1.0)*x1016)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1019=((6.21951219512195)*sj3);
IkReal x1020=((3.2520325203252)*pz);
IkReal x1021=(px*sj0);
IkReal x1022=((3.56191951842848)*pz);
IkReal x1023=(cj0*py);
IkReal x1024=((6.81217107899447)*sj3);
IkReal x1025=(x1019+x1020);
j1eval[0]=((1.0)+(((-1.0)*x1025)));
j1eval[1]=((-1.0)+(((1.09529025191676)*x1021))+x1025+(((-1.0)*x1021*x1024))+(((-1.0)*x1021*x1022))+((x1023*x1024))+((x1022*x1023))+(((-1.09529025191676)*x1023)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal gconst7=((0.16078431372549)+(((-0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.16078431372549)+sj3+(((0.522875816993464)*pz)))))+(IKabs(((-1.0)+(IKsign(cj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp))))+IKsqr(((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp))), ((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1026=IKsin(j1);
IkReal x1027=IKcos(j1);
IkReal x1028=((0.15)*py);
IkReal x1029=((0.15)*px);
IkReal x1030=((1.0)*py);
IkReal x1031=((1.0)*px);
IkReal x1032=(sj0*x1027);
IkReal x1033=(cj0*x1026);
IkReal x1034=(sj0*x1026);
IkReal x1035=(cj0*x1027);
evalcond[0]=((-0.54719003286311)+(((0.547645125958379)*pp))+(((5.3594771199795e-11)*x1026))+(((0.0328587075575027)*pz)));
evalcond[1]=((((-1.0)*cj0*x1031))+(((-1.0)*sj0*x1030))+(((5.3594771199795e-11)*x1027)));
evalcond[2]=((((-0.913)*x1027))+((px*x1033))+((px*x1032))+((py*x1034))+(((-1.0)*x1030*x1035)));
evalcond[3]=((-5.3594771199795e-11)+((px*x1035))+((py*x1033))+((py*x1032))+(((-1.0)*x1031*x1034))+(((0.913)*x1026)));
evalcond[4]=((-0.667969)+(((-1.826)*cj0*py))+(((-1.0)*x1029*x1034))+(((1.826)*px*sj0))+(((0.13695)*x1026))+(((-1.0)*pp))+((x1028*x1032))+((x1028*x1033))+(((-0.06)*pz))+((x1029*x1035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst7=((0.16078431372549)+(((-0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.16078431372549)+sj3+(((0.522875816993464)*pz)))))+(IKabs(((1.0)+(IKsign(cj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp))))+IKsqr(((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp))), ((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1036=IKsin(j1);
IkReal x1037=IKcos(j1);
IkReal x1038=((0.15)*py);
IkReal x1039=((0.15)*px);
IkReal x1040=((1.0)*py);
IkReal x1041=((1.0)*px);
IkReal x1042=(sj0*x1037);
IkReal x1043=(cj0*x1036);
IkReal x1044=(sj0*x1036);
IkReal x1045=(cj0*x1037);
evalcond[0]=((-0.54719003286311)+(((0.547645125958379)*pp))+(((5.3594771199795e-11)*x1036))+(((0.0328587075575027)*pz)));
evalcond[1]=((((-1.0)*cj0*x1041))+(((-1.0)*sj0*x1040))+(((5.3594771199795e-11)*x1037)));
evalcond[2]=((((-0.913)*x1037))+((px*x1042))+((px*x1043))+((py*x1044))+(((-1.0)*x1040*x1045)));
evalcond[3]=((-5.3594771199795e-11)+((px*x1045))+(((0.913)*x1036))+((py*x1042))+((py*x1043))+(((-1.0)*x1041*x1044)));
evalcond[4]=((-0.667969)+((x1038*x1042))+((x1038*x1043))+(((-1.826)*cj0*py))+((x1039*x1045))+(((1.826)*px*sj0))+(((-1.0)*x1039*x1044))+(((-1.0)*pp))+(((-0.06)*pz))+(((0.13695)*x1036)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1046=(cj0*sj0);
IkReal x1047=(px*py);
IkReal x1048=(cj0*py);
IkReal x1049=((0.425)*sj3);
IkReal x1050=(px*sj0);
IkReal x1051=((0.222222222222222)*pz);
CheckValue<IkReal> x1052=IKPowWithIntegerCheck(((0.0683333333333333)+(((-1.0)*x1051))+(((-1.0)*x1049))),-1);
if(!x1052.valid){
continue;
}
CheckValue<IkReal> x1053=IKPowWithIntegerCheck(((-0.0623883333333333)+(((0.388025)*sj3))+(((0.202888888888889)*pz))+(((0.0683333333333333)*x1050))+(((-0.0683333333333333)*x1048))+((x1048*x1051))+((x1048*x1049))+(((-1.0)*x1050*x1051))+(((-1.0)*x1049*x1050))),-1);
if(!x1053.valid){
continue;
}
if( IKabs(((x1052.value)*(((0.913)+x1048+(((-1.0)*x1050)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1053.value)*((x1047+(((-0.913)*py*sj0))+(((-1.0)*x1046*(py*py)))+(((-0.913)*cj0*px))+(((-2.0)*x1047*(cj0*cj0)))+((x1046*(px*px))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1052.value)*(((0.913)+x1048+(((-1.0)*x1050))))))+IKsqr(((x1053.value)*((x1047+(((-0.913)*py*sj0))+(((-1.0)*x1046*(py*py)))+(((-0.913)*cj0*px))+(((-2.0)*x1047*(cj0*cj0)))+((x1046*(px*px)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1052.value)*(((0.913)+x1048+(((-1.0)*x1050))))), ((x1053.value)*((x1047+(((-0.913)*py*sj0))+(((-1.0)*x1046*(py*py)))+(((-0.913)*cj0*px))+(((-2.0)*x1047*(cj0*cj0)))+((x1046*(px*px)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1054=IKcos(j1);
IkReal x1055=IKsin(j1);
IkReal x1056=((0.15)*py);
IkReal x1057=(cj0*py);
IkReal x1058=(px*sj0);
IkReal x1059=((0.425)*sj3);
IkReal x1060=((0.222222222222222)*pz);
IkReal x1061=(py*sj0);
IkReal x1062=(sj0*x1054);
IkReal x1063=(cj0*x1055);
IkReal x1064=(cj0*px*x1054);
evalcond[0]=((((0.0683333333333333)*x1054))+(((-1.0)*x1054*x1059))+(((-1.0)*x1054*x1060))+(((-1.0)*x1061))+(((-1.0)*cj0*px)));
evalcond[1]=((-0.913)+x1058+(((0.0683333333333333)*x1055))+(((-1.0)*x1055*x1059))+(((-1.0)*x1057))+(((-1.0)*x1055*x1060)));
evalcond[2]=((((-1.0)*x1054*x1057))+((x1054*x1058))+((x1055*x1061))+((px*x1063))+(((-0.913)*x1054)));
evalcond[3]=((-0.0683333333333333)+(((0.913)*x1055))+(((-1.0)*x1055*x1058))+x1059+x1060+x1064+((x1055*x1057))+((x1054*x1061)));
evalcond[4]=((-0.667969)+((x1056*x1063))+((x1056*x1062))+(((0.15)*x1064))+(((0.13695)*x1055))+(((1.826)*x1058))+(((-0.15)*x1055*x1058))+(((-1.0)*pp))+(((-0.06)*pz))+(((-1.826)*x1057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1065=(cj0*px);
IkReal x1066=((0.222222222222222)*pz);
IkReal x1067=((0.425)*sj3);
IkReal x1068=(py*sj0);
IkReal x1069=(px*py);
IkReal x1070=(cj0*sj0);
CheckValue<IkReal> x1071=IKPowWithIntegerCheck(((((0.0683333333333333)*x1065))+(((0.0683333333333333)*x1068))+(((-1.0)*x1066*x1068))+(((-1.0)*x1067*x1068))+(((-1.0)*x1065*x1067))+(((-1.0)*x1065*x1066))),-1);
if(!x1071.valid){
continue;
}
CheckValue<IkReal> x1072=IKPowWithIntegerCheck(((0.0683333333333333)+(((-1.0)*x1066))+(((-1.0)*x1067))),-1);
if(!x1072.valid){
continue;
}
if( IKabs(((x1071.value)*(((((0.913)*x1065))+(((0.913)*x1068))+(((2.0)*cj0*py*x1065))+(((-1.0)*px*sj0*x1065))+((cj0*py*x1068))+(((-1.0)*x1069)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1072.value)*((x1068+x1065)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1071.value)*(((((0.913)*x1065))+(((0.913)*x1068))+(((2.0)*cj0*py*x1065))+(((-1.0)*px*sj0*x1065))+((cj0*py*x1068))+(((-1.0)*x1069))))))+IKsqr(((x1072.value)*((x1068+x1065))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1071.value)*(((((0.913)*x1065))+(((0.913)*x1068))+(((2.0)*cj0*py*x1065))+(((-1.0)*px*sj0*x1065))+((cj0*py*x1068))+(((-1.0)*x1069))))), ((x1072.value)*((x1068+x1065))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1073=IKcos(j1);
IkReal x1074=IKsin(j1);
IkReal x1075=((0.15)*py);
IkReal x1076=(cj0*py);
IkReal x1077=(px*sj0);
IkReal x1078=((0.425)*sj3);
IkReal x1079=((0.222222222222222)*pz);
IkReal x1080=(py*sj0);
IkReal x1081=(sj0*x1073);
IkReal x1082=(cj0*x1074);
IkReal x1083=(cj0*px*x1073);
evalcond[0]=((((0.0683333333333333)*x1073))+(((-1.0)*x1073*x1078))+(((-1.0)*x1073*x1079))+(((-1.0)*x1080))+(((-1.0)*cj0*px)));
evalcond[1]=((-0.913)+(((-1.0)*x1074*x1079))+(((-1.0)*x1074*x1078))+x1077+(((0.0683333333333333)*x1074))+(((-1.0)*x1076)));
evalcond[2]=(((px*x1082))+((x1073*x1077))+(((-0.913)*x1073))+((x1074*x1080))+(((-1.0)*x1073*x1076)));
evalcond[3]=((-0.0683333333333333)+((x1073*x1080))+((x1074*x1076))+x1078+x1079+x1083+(((-1.0)*x1074*x1077))+(((0.913)*x1074)));
evalcond[4]=((-0.667969)+(((1.826)*x1077))+((x1075*x1081))+((x1075*x1082))+(((-1.0)*pp))+(((-0.06)*pz))+(((-1.826)*x1076))+(((0.15)*x1083))+(((-0.15)*x1074*x1077))+(((0.13695)*x1074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1084=IKPowWithIntegerCheck(IKsign(((0.0683333333333333)+(((-0.222222222222222)*pz))+(((-0.425)*sj3)))),-1);
if(!x1084.valid){
continue;
}
CheckValue<IkReal> x1085 = IKatan2WithCheck(IkReal(((0.913)+(((-1.0)*px*sj0))+((cj0*py)))),IkReal((((cj0*px))+((py*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1085.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1084.value)))+(x1085.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1086=IKcos(j1);
IkReal x1087=IKsin(j1);
IkReal x1088=((0.15)*py);
IkReal x1089=(cj0*py);
IkReal x1090=(px*sj0);
IkReal x1091=((0.425)*sj3);
IkReal x1092=((0.222222222222222)*pz);
IkReal x1093=(py*sj0);
IkReal x1094=(sj0*x1086);
IkReal x1095=(cj0*x1087);
IkReal x1096=(cj0*px*x1086);
evalcond[0]=((((0.0683333333333333)*x1086))+(((-1.0)*x1086*x1092))+(((-1.0)*x1086*x1091))+(((-1.0)*x1093))+(((-1.0)*cj0*px)));
evalcond[1]=((-0.913)+(((0.0683333333333333)*x1087))+x1090+(((-1.0)*x1089))+(((-1.0)*x1087*x1091))+(((-1.0)*x1087*x1092)));
evalcond[2]=((((-1.0)*x1086*x1089))+((x1087*x1093))+((x1086*x1090))+(((-0.913)*x1086))+((px*x1095)));
evalcond[3]=((-0.0683333333333333)+x1096+x1091+x1092+((x1086*x1093))+((x1087*x1089))+(((0.913)*x1087))+(((-1.0)*x1087*x1090)));
evalcond[4]=((-0.667969)+(((-1.826)*x1089))+(((0.13695)*x1087))+((x1088*x1094))+((x1088*x1095))+(((-0.15)*x1087*x1090))+(((-1.0)*pp))+(((-0.06)*pz))+(((1.826)*x1090))+(((0.15)*x1096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1099 = IKatan2WithCheck(IkReal(((-1.826)*py)),IkReal(((1.826)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x1099.valid){
continue;
}
IkReal x1097=((1.0)*(x1099.value));
if((((((3.334276)*(py*py)))+(((3.334276)*(px*px))))) < -0.00001)
continue;
CheckValue<IkReal> x1100=IKPowWithIntegerCheck(IKabs(IKsqrt(((((3.334276)*(py*py)))+(((3.334276)*(px*px)))))),-1);
if(!x1100.valid){
continue;
}
if( (((-1.0)*(x1100.value)*(((-0.657719)+(((-0.06375)*sj3))+(((-1.0)*pp))+(((-0.0933333333333333)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1100.value)*(((-0.657719)+(((-0.06375)*sj3))+(((-1.0)*pp))+(((-0.0933333333333333)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1098=((-1.0)*(IKasin(((-1.0)*(x1100.value)*(((-0.657719)+(((-0.06375)*sj3))+(((-1.0)*pp))+(((-0.0933333333333333)*pz))))))));
j0array[0]=((((-1.0)*x1097))+(((-1.0)*x1098)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1097))+(((1.0)*x1098)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j1eval[3];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=((1.0)+(((-3.2520325203252)*pz))+(((-6.21951219512195)*sj3)));
j1eval[1]=IKsign(((0.0683333333333333)+(((-0.222222222222222)*pz))+(((-0.425)*sj3))));
j1eval[2]=((IKabs(((0.913)+(((-1.0)*px*sj0))+((cj0*py)))))+(IKabs((((cj0*px))+((py*sj0))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1101=(cj0*px);
IkReal x1102=((3.2520325203252)*pz);
IkReal x1103=(py*sj0);
IkReal x1104=((6.21951219512195)*sj3);
j1eval[0]=((((-1.0)*x1103*x1104))+x1103+x1101+(((-1.0)*x1102*x1103))+(((-1.0)*x1101*x1104))+(((-1.0)*x1101*x1102)));
j1eval[1]=((1.0)+(((-1.0)*x1102))+(((-1.0)*x1104)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1105=((6.21951219512195)*sj3);
IkReal x1106=((3.2520325203252)*pz);
IkReal x1107=(px*sj0);
IkReal x1108=((3.56191951842848)*pz);
IkReal x1109=(cj0*py);
IkReal x1110=((6.81217107899447)*sj3);
IkReal x1111=(x1106+x1105);
j1eval[0]=((1.0)+(((-1.0)*x1111)));
j1eval[1]=((-1.0)+((x1109*x1110))+((x1108*x1109))+x1111+(((1.09529025191676)*x1107))+(((-1.0)*x1107*x1110))+(((-1.0)*x1107*x1108))+(((-1.09529025191676)*x1109)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal gconst7=((0.16078431372549)+(((-0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.16078431372549)+sj3+(((0.522875816993464)*pz)))))+(IKabs(((-1.0)+(IKsign(cj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp))))+IKsqr(((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp))), ((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1112=IKsin(j1);
IkReal x1113=IKcos(j1);
IkReal x1114=((0.15)*py);
IkReal x1115=((0.15)*px);
IkReal x1116=((1.0)*py);
IkReal x1117=((1.0)*px);
IkReal x1118=(sj0*x1113);
IkReal x1119=(cj0*x1112);
IkReal x1120=(sj0*x1112);
IkReal x1121=(cj0*x1113);
evalcond[0]=((-0.54719003286311)+(((0.547645125958379)*pp))+(((5.3594771199795e-11)*x1112))+(((0.0328587075575027)*pz)));
evalcond[1]=((((-1.0)*sj0*x1116))+(((5.3594771199795e-11)*x1113))+(((-1.0)*cj0*x1117)));
evalcond[2]=((((-1.0)*x1116*x1121))+((py*x1120))+(((-0.913)*x1113))+((px*x1118))+((px*x1119)));
evalcond[3]=((-5.3594771199795e-11)+(((-1.0)*x1117*x1120))+((px*x1121))+(((0.913)*x1112))+((py*x1119))+((py*x1118)));
evalcond[4]=((-0.667969)+((x1114*x1119))+((x1114*x1118))+(((-1.826)*cj0*py))+(((1.826)*px*sj0))+(((-1.0)*pp))+(((-0.06)*pz))+(((0.13695)*x1112))+(((-1.0)*x1115*x1120))+((x1115*x1121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst7=((0.16078431372549)+(((-0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.16078431372549)+sj3+(((0.522875816993464)*pz)))))+(IKabs(((1.0)+(IKsign(cj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp))))+IKsqr(((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp))), ((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1122=IKsin(j1);
IkReal x1123=IKcos(j1);
IkReal x1124=((0.15)*py);
IkReal x1125=((0.15)*px);
IkReal x1126=((1.0)*py);
IkReal x1127=((1.0)*px);
IkReal x1128=(sj0*x1123);
IkReal x1129=(cj0*x1122);
IkReal x1130=(sj0*x1122);
IkReal x1131=(cj0*x1123);
evalcond[0]=((-0.54719003286311)+(((0.547645125958379)*pp))+(((5.3594771199795e-11)*x1122))+(((0.0328587075575027)*pz)));
evalcond[1]=((((5.3594771199795e-11)*x1123))+(((-1.0)*sj0*x1126))+(((-1.0)*cj0*x1127)));
evalcond[2]=(((py*x1130))+((px*x1128))+((px*x1129))+(((-1.0)*x1126*x1131))+(((-0.913)*x1123)));
evalcond[3]=((-5.3594771199795e-11)+(((-1.0)*x1127*x1130))+((py*x1128))+((py*x1129))+((px*x1131))+(((0.913)*x1122)));
evalcond[4]=((-0.667969)+(((-1.826)*cj0*py))+(((1.826)*px*sj0))+((x1124*x1128))+((x1124*x1129))+(((-1.0)*pp))+(((-0.06)*pz))+((x1125*x1131))+(((0.13695)*x1122))+(((-1.0)*x1125*x1130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1132=(cj0*sj0);
IkReal x1133=(px*py);
IkReal x1134=(cj0*py);
IkReal x1135=((0.425)*sj3);
IkReal x1136=(px*sj0);
IkReal x1137=((0.222222222222222)*pz);
CheckValue<IkReal> x1138=IKPowWithIntegerCheck(((0.0683333333333333)+(((-1.0)*x1135))+(((-1.0)*x1137))),-1);
if(!x1138.valid){
continue;
}
CheckValue<IkReal> x1139=IKPowWithIntegerCheck(((-0.0623883333333333)+(((0.388025)*sj3))+(((0.202888888888889)*pz))+(((0.0683333333333333)*x1136))+((x1134*x1135))+((x1134*x1137))+(((-1.0)*x1136*x1137))+(((-1.0)*x1135*x1136))+(((-0.0683333333333333)*x1134))),-1);
if(!x1139.valid){
continue;
}
if( IKabs(((x1138.value)*(((0.913)+x1134+(((-1.0)*x1136)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1139.value)*((x1133+((x1132*(px*px)))+(((-0.913)*py*sj0))+(((-0.913)*cj0*px))+(((-1.0)*x1132*(py*py)))+(((-2.0)*x1133*(cj0*cj0))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1138.value)*(((0.913)+x1134+(((-1.0)*x1136))))))+IKsqr(((x1139.value)*((x1133+((x1132*(px*px)))+(((-0.913)*py*sj0))+(((-0.913)*cj0*px))+(((-1.0)*x1132*(py*py)))+(((-2.0)*x1133*(cj0*cj0)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1138.value)*(((0.913)+x1134+(((-1.0)*x1136))))), ((x1139.value)*((x1133+((x1132*(px*px)))+(((-0.913)*py*sj0))+(((-0.913)*cj0*px))+(((-1.0)*x1132*(py*py)))+(((-2.0)*x1133*(cj0*cj0)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1140=IKcos(j1);
IkReal x1141=IKsin(j1);
IkReal x1142=((0.15)*py);
IkReal x1143=(cj0*py);
IkReal x1144=(px*sj0);
IkReal x1145=((0.425)*sj3);
IkReal x1146=((0.222222222222222)*pz);
IkReal x1147=(py*sj0);
IkReal x1148=(sj0*x1140);
IkReal x1149=(cj0*x1141);
IkReal x1150=(cj0*px*x1140);
evalcond[0]=((((-1.0)*x1140*x1146))+(((-1.0)*x1140*x1145))+(((0.0683333333333333)*x1140))+(((-1.0)*x1147))+(((-1.0)*cj0*px)));
evalcond[1]=((-0.913)+(((0.0683333333333333)*x1141))+x1144+(((-1.0)*x1141*x1146))+(((-1.0)*x1141*x1145))+(((-1.0)*x1143)));
evalcond[2]=(((x1140*x1144))+((x1141*x1147))+(((-0.913)*x1140))+((px*x1149))+(((-1.0)*x1140*x1143)));
evalcond[3]=((-0.0683333333333333)+((x1140*x1147))+x1146+x1145+x1150+((x1141*x1143))+(((0.913)*x1141))+(((-1.0)*x1141*x1144)));
evalcond[4]=((-0.667969)+(((-1.826)*x1143))+(((-0.15)*x1141*x1144))+(((0.13695)*x1141))+((x1142*x1148))+((x1142*x1149))+(((-1.0)*pp))+(((-0.06)*pz))+(((0.15)*x1150))+(((1.826)*x1144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1151=(cj0*px);
IkReal x1152=((0.222222222222222)*pz);
IkReal x1153=((0.425)*sj3);
IkReal x1154=(py*sj0);
IkReal x1155=(px*py);
IkReal x1156=(cj0*sj0);
CheckValue<IkReal> x1157=IKPowWithIntegerCheck(((((-1.0)*x1152*x1154))+(((-1.0)*x1153*x1154))+(((-1.0)*x1151*x1152))+(((-1.0)*x1151*x1153))+(((0.0683333333333333)*x1151))+(((0.0683333333333333)*x1154))),-1);
if(!x1157.valid){
continue;
}
CheckValue<IkReal> x1158=IKPowWithIntegerCheck(((0.0683333333333333)+(((-1.0)*x1152))+(((-1.0)*x1153))),-1);
if(!x1158.valid){
continue;
}
if( IKabs(((x1157.value)*((((cj0*py*x1154))+(((0.913)*x1154))+(((0.913)*x1151))+(((2.0)*cj0*py*x1151))+(((-1.0)*px*sj0*x1151))+(((-1.0)*x1155)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1158.value)*((x1154+x1151)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1157.value)*((((cj0*py*x1154))+(((0.913)*x1154))+(((0.913)*x1151))+(((2.0)*cj0*py*x1151))+(((-1.0)*px*sj0*x1151))+(((-1.0)*x1155))))))+IKsqr(((x1158.value)*((x1154+x1151))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1157.value)*((((cj0*py*x1154))+(((0.913)*x1154))+(((0.913)*x1151))+(((2.0)*cj0*py*x1151))+(((-1.0)*px*sj0*x1151))+(((-1.0)*x1155))))), ((x1158.value)*((x1154+x1151))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1159=IKcos(j1);
IkReal x1160=IKsin(j1);
IkReal x1161=((0.15)*py);
IkReal x1162=(cj0*py);
IkReal x1163=(px*sj0);
IkReal x1164=((0.425)*sj3);
IkReal x1165=((0.222222222222222)*pz);
IkReal x1166=(py*sj0);
IkReal x1167=(sj0*x1159);
IkReal x1168=(cj0*x1160);
IkReal x1169=(cj0*px*x1159);
evalcond[0]=((((-1.0)*x1159*x1165))+(((-1.0)*x1159*x1164))+(((-1.0)*x1166))+(((-1.0)*cj0*px))+(((0.0683333333333333)*x1159)));
evalcond[1]=((-0.913)+x1163+(((0.0683333333333333)*x1160))+(((-1.0)*x1160*x1164))+(((-1.0)*x1160*x1165))+(((-1.0)*x1162)));
evalcond[2]=(((x1159*x1163))+((px*x1168))+(((-1.0)*x1159*x1162))+(((-0.913)*x1159))+((x1160*x1166)));
evalcond[3]=((-0.0683333333333333)+x1164+x1165+x1169+((x1159*x1166))+(((-1.0)*x1160*x1163))+((x1160*x1162))+(((0.913)*x1160)));
evalcond[4]=((-0.667969)+(((-0.15)*x1160*x1163))+(((1.826)*x1163))+(((-1.0)*pp))+(((-0.06)*pz))+(((0.13695)*x1160))+(((-1.826)*x1162))+(((0.15)*x1169))+((x1161*x1168))+((x1161*x1167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1170=IKPowWithIntegerCheck(IKsign(((0.0683333333333333)+(((-0.222222222222222)*pz))+(((-0.425)*sj3)))),-1);
if(!x1170.valid){
continue;
}
CheckValue<IkReal> x1171 = IKatan2WithCheck(IkReal(((0.913)+(((-1.0)*px*sj0))+((cj0*py)))),IkReal((((cj0*px))+((py*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1171.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1170.value)))+(x1171.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1172=IKcos(j1);
IkReal x1173=IKsin(j1);
IkReal x1174=((0.15)*py);
IkReal x1175=(cj0*py);
IkReal x1176=(px*sj0);
IkReal x1177=((0.425)*sj3);
IkReal x1178=((0.222222222222222)*pz);
IkReal x1179=(py*sj0);
IkReal x1180=(sj0*x1172);
IkReal x1181=(cj0*x1173);
IkReal x1182=(cj0*px*x1172);
evalcond[0]=((((-1.0)*x1172*x1177))+(((-1.0)*x1172*x1178))+(((0.0683333333333333)*x1172))+(((-1.0)*cj0*px))+(((-1.0)*x1179)));
evalcond[1]=((-0.913)+x1176+(((-1.0)*x1173*x1178))+(((-1.0)*x1173*x1177))+(((0.0683333333333333)*x1173))+(((-1.0)*x1175)));
evalcond[2]=((((-1.0)*x1172*x1175))+((x1173*x1179))+((px*x1181))+((x1172*x1176))+(((-0.913)*x1172)));
evalcond[3]=((-0.0683333333333333)+x1182+x1177+x1178+((x1173*x1175))+(((-1.0)*x1173*x1176))+((x1172*x1179))+(((0.913)*x1173)));
evalcond[4]=((-0.667969)+((x1174*x1180))+((x1174*x1181))+(((1.826)*x1176))+(((-1.0)*pp))+(((-0.06)*pz))+(((-0.15)*x1173*x1176))+(((-1.826)*x1175))+(((0.13695)*x1173))+(((0.15)*x1182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1183=px*px;
IkReal x1184=sj2*sj2;
IkReal x1185=(cj3*px);
IkReal x1186=(px*sj2);
IkReal x1187=(cj2*px);
IkReal x1188=((3.334276)*x1184);
CheckValue<IkReal> x1191 = IKatan2WithCheck(IkReal(((-1.826)*py*x1186)),IkReal(((1.826)*sj2*x1183)),IKFAST_ATAN2_MAGTHRESH);
if(!x1191.valid){
continue;
}
IkReal x1189=((1.0)*(x1191.value));
if(((((x1183*x1188*(py*py)))+((x1188*(x1183*x1183))))) < -0.00001)
continue;
CheckValue<IkReal> x1192=IKPowWithIntegerCheck(IKabs(IKsqrt((((x1183*x1188*(py*py)))+((x1188*(x1183*x1183)))))),-1);
if(!x1192.valid){
continue;
}
if( (((x1192.value)*(((((0.05025)*x1187))+(((0.0135)*px*sj3))+(((0.0657)*sj3*x1186))+(((0.05475)*px))+(((0.06075)*x1185))+(((-0.15)*pz*x1187))+(((0.29565)*sj2*x1185))+(((0.67)*pz*x1186))+(((-1.0)*pp*x1186))+(((-0.634819)*x1186)))))) < -1-IKFAST_SINCOS_THRESH || (((x1192.value)*(((((0.05025)*x1187))+(((0.0135)*px*sj3))+(((0.0657)*sj3*x1186))+(((0.05475)*px))+(((0.06075)*x1185))+(((-0.15)*pz*x1187))+(((0.29565)*sj2*x1185))+(((0.67)*pz*x1186))+(((-1.0)*pp*x1186))+(((-0.634819)*x1186)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1190=IKasin(((x1192.value)*(((((0.05025)*x1187))+(((0.0135)*px*sj3))+(((0.0657)*sj3*x1186))+(((0.05475)*px))+(((0.06075)*x1185))+(((-0.15)*pz*x1187))+(((0.29565)*sj2*x1185))+(((0.67)*pz*x1186))+(((-1.0)*pp*x1186))+(((-0.634819)*x1186))))));
j0array[0]=((((-1.0)*x1189))+(((-1.0)*x1190)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+x1190+(((-1.0)*x1189)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1193=IKcos(j0);
IkReal x1194=IKsin(j0);
IkReal x1195=cj2*cj2;
IkReal x1196=py*py;
IkReal x1197=sj2*sj2;
IkReal x1198=(sj2*sj3);
IkReal x1199=((0.29565)*py);
IkReal x1200=((0.0135)*cj3);
IkReal x1201=((1.826)*cj2);
IkReal x1202=(cj2*py);
IkReal x1203=(px*sj2);
IkReal x1204=((0.0657)*cj3);
IkReal x1205=((0.24455)*px);
IkReal x1206=(cj2*px);
IkReal x1207=((0.67)*pz);
IkReal x1208=((0.15)*pz);
IkReal x1209=((0.06075)*sj3);
IkReal x1210=(py*sj2);
IkReal x1211=((0.73)*pz);
IkReal x1212=(cj3*sj2);
IkReal x1213=((1.0)*pp);
IkReal x1214=(py*x1197);
IkReal x1215=(py*x1195);
IkReal x1216=((1.826)*x1194);
IkReal x1217=(py*x1193);
IkReal x1218=(x1193*x1196);
evalcond[0]=((-0.410369)+(((0.29565)*cj3))+(((0.12105)*cj2*sj3))+(((0.12105)*x1212))+(((-0.25785)*x1198))+(((0.25785)*cj2*cj3))+((px*x1216))+(((-1.826)*x1217))+(((0.05475)*sj2))+(((0.0657)*sj3))+(((0.24455)*cj2))+(((-1.0)*x1213)));
evalcond[1]=((((-0.0657)*py*x1198))+(((-1.0)*x1207*x1210))+((pp*x1210))+(((1.826)*sj2*x1218))+(((-0.05025)*x1202))+(((-0.05475)*py))+((x1202*x1208))+(((-0.06075)*cj3*py))+(((0.634819)*x1210))+(((-0.0135)*py*sj3))+(((-1.0)*x1199*x1212))+(((-1.0)*py*x1203*x1216)));
evalcond[2]=((((-1.0)*x1204*x1210))+(((-1.0)*x1201*x1218))+(((-0.05025)*x1210))+((x1198*x1199))+(((-1.0)*x1202*x1213))+((x1202*x1207))+((py*x1209))+((x1211*x1215))+((x1211*x1214))+((x1208*x1210))+(((-0.24455)*x1215))+(((-0.24455)*x1214))+(((-0.901269)*x1202))+(((-1.0)*py*x1200))+((px*py*x1194*x1201)));
evalcond[3]=((((-1.0)*px*x1197*x1211))+(((-1.0)*x1194*x1201*(px*px)))+((pp*x1206))+((px*x1200))+(((0.901269)*x1206))+((x1203*x1204))+((x1197*x1205))+(((-1.0)*x1203*x1208))+(((-0.29565)*px*x1198))+(((0.05025)*x1203))+((x1195*x1205))+(((-1.0)*px*x1209))+(((-1.0)*px*x1195*x1211))+(((-1.0)*x1206*x1207))+((px*x1201*x1217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
IkReal x1219=(cj3*sj2);
IkReal x1220=(cj2*cj3);
IkReal x1221=(sj2*sj3);
IkReal x1222=(cj2*sj3);
j1eval[0]=((1.0)+(((5.4)*x1222))+(((-1.2)*x1220))+(((4.86666666666667)*sj2))+(((1.2)*x1221))+(((5.4)*x1219)));
j1eval[1]=IKsign(((0.075)+(((-0.09)*x1220))+(((0.405)*x1219))+(((0.365)*sj2))+(((0.09)*x1221))+(((0.405)*x1222))));
j1eval[2]=((IKabs(((0.913)+(((-1.0)*px*sj0))+((cj0*py)))))+(IKabs((((cj0*px))+((py*sj0))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1223=pz*pz;
IkReal x1224=(pp*sj2);
IkReal x1225=(sj2*x1223);
IkReal x1226=(px*sj0*sj2);
IkReal x1227=(cj0*py*sj2);
j1eval[0]=(sj2+(((2.19058050383352)*x1227))+(((1.19966073594388)*x1224))+(((-2.19058050383352)*x1226))+(((-1.19966073594388)*x1225)));
j1eval[1]=IKsign((x1224+(((1.826)*x1227))+(((-1.0)*x1225))+(((-1.826)*x1226))+(((0.833569)*sj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1228=(cj0*px);
IkReal x1229=(py*sj0);
IkReal x1230=((4.86666666666667)*sj2);
IkReal x1231=((5.4)*cj2*sj3);
IkReal x1232=((5.4)*cj3*sj2);
IkReal x1233=((1.2)*cj2*cj3);
IkReal x1234=((1.2)*sj2*sj3);
j1eval[0]=(x1229+x1228+(((-1.0)*x1228*x1233))+(((-1.0)*x1229*x1233))+((x1228*x1234))+((x1228*x1231))+((x1228*x1232))+((x1228*x1230))+((x1229*x1234))+((x1229*x1230))+((x1229*x1232))+((x1229*x1231)));
j1eval[1]=((1.0)+x1234+x1230+x1231+x1232+(((-1.0)*x1233)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=((1.0375)+(((1.9125)*sj3))+(((-1.0)*pz)));
j1eval[1]=((1.0)+(((-1.2)*cj3))+(((5.4)*sj3)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x1235=(cj0*px);
IkReal x1236=((1.2)*cj3);
IkReal x1237=(py*sj0);
IkReal x1238=((5.4)*sj3);
j1eval[0]=(x1235+x1237+((x1235*x1238))+(((-1.0)*x1235*x1236))+(((-1.0)*x1236*x1237))+((x1237*x1238)));
j1eval[1]=((1.0)+x1238+(((-1.0)*x1236)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x1239=((5.4)*sj3);
IkReal x1240=((1.2)*cj3);
IkReal x1241=(cj0*py);
IkReal x1242=((5.91456736035049)*sj3);
IkReal x1243=((1.31434830230011)*cj3);
IkReal x1244=(px*sj0);
j1eval[0]=((-1.0)+(((-1.09529025191676)*x1241))+x1240+(((-1.0)*x1239))+(((-1.0)*x1243*x1244))+((x1242*x1244))+((x1241*x1243))+(((1.09529025191676)*x1244))+(((-1.0)*x1241*x1242)));
j1eval[1]=((1.0)+x1239+(((-1.0)*x1240)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.0368941812728069)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-2466757053.71498)+(((1196681824.51447)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2466757053.71498)+(((1196681824.51447)*pp))))+IKsqr(((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2466757053.71498)+(((1196681824.51447)*pp))), ((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1245=IKsin(j1);
IkReal x1246=IKcos(j1);
CheckValue<IkReal> x1255=IKPowWithIntegerCheck(py,-1);
if(!x1255.valid){
continue;
}
IkReal x1247=x1255.value;
IkReal x1248=(py*sj0);
IkReal x1249=((0.0821467688937568)*pp);
IkReal x1250=(cj0*px);
IkReal x1251=(cj0*py);
IkReal x1252=((0.15)*x1246);
IkReal x1253=((1.0)*x1246);
IkReal x1254=(px*x1246);
evalcond[0]=((-1.12887774320343)+(((0.547645125958379)*pp))+(((-4.57636369784904e-10)*x1245)));
evalcond[1]=((((-1.0)*x1248))+(((-4.57636369784904e-10)*x1246))+(((-1.0)*x1250)));
evalcond[2]=(((x1245*x1250))+(((-0.913)*x1246))+((sj0*x1254))+(((-1.0)*x1251*x1253))+((x1245*x1248)));
evalcond[3]=((-4.57636369784904e-10)+(((-0.913)*x1245))+(((-1.0)*x1248*x1253))+(((-1.0)*x1245*x1251))+(((-1.0)*x1250*x1253))+((px*sj0*x1245)));
evalcond[4]=((6.86454554677356e-11)+(((-1.0)*x1245*x1249))+((sj0*x1247*x1252*(px*px)))+(((0.0323816614805145)*x1247*x1254))+(((0.169331661480515)*x1245))+(((-1.0)*x1247*x1249*x1254))+((x1248*x1252)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.54203636406487)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-1382267358.83679)+(((1504414963.66099)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1382267358.83679)+(((1504414963.66099)*pp))))+IKsqr(((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1382267358.83679)+(((1504414963.66099)*pp))), ((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1256=IKsin(j1);
IkReal x1257=IKcos(j1);
CheckValue<IkReal> x1266=IKPowWithIntegerCheck(py,-1);
if(!x1266.valid){
continue;
}
IkReal x1258=x1266.value;
IkReal x1259=(py*sj0);
IkReal x1260=(cj0*px);
IkReal x1261=(cj0*py);
IkReal x1262=((0.0821467688937568)*pp);
IkReal x1263=((0.15)*x1257);
IkReal x1264=((1.0)*x1257);
IkReal x1265=(px*x1257);
evalcond[0]=((-0.503180306048136)+(((0.547645125958379)*pp))+(((-3.64025311623919e-10)*x1256)));
evalcond[1]=((((-1.0)*x1260))+(((-1.0)*x1259))+(((-3.64025311623919e-10)*x1257)));
evalcond[2]=((((-1.0)*x1261*x1264))+((sj0*x1265))+((x1256*x1259))+((x1256*x1260))+(((-0.913)*x1257)));
evalcond[3]=((-3.64025311623919e-10)+(((-1.0)*x1256*x1261))+(((-1.0)*x1260*x1264))+((px*sj0*x1256))+(((-0.913)*x1256))+(((-1.0)*x1259*x1264)));
evalcond[4]=((5.46037967435879e-11)+(((-0.0614729540927796)*x1258*x1265))+(((0.0754770459072204)*x1256))+((x1259*x1263))+(((-1.0)*x1256*x1262))+((sj0*x1258*x1263*(px*px)))+(((-1.0)*x1258*x1262*x1265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst0=((-0.542483660130719)+(((0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.542483660130719)+sj3+(((-0.522875816993464)*pz)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1267=((0.522875816993464)*pz);
IkReal x1268=((-0.54248366)+x1267);
sj2=0;
cj2=1.0;
j2=0;
sj3=x1268;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
if( (((0.54248366)+(((-1.0)*x1267)))) < -1-IKFAST_SINCOS_THRESH || (((0.54248366)+(((-1.0)*x1267)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((-1.0)*(IKasin(((0.54248366)+(((-1.0)*x1267))))));
IkReal gconst0=((-0.542483660130719)+x1267);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
j1eval[0]=((-1.60784313666667)+(((-1.0)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((2.35294117647059)*pz)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1269=((0.522875816993464)*pz);
IkReal x1270=((-0.54248366)+x1269);
sj2=0;
cj2=1.0;
j2=0;
sj3=x1270;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
if( (((0.54248366)+(((-1.0)*x1269)))) < -1-IKFAST_SINCOS_THRESH || (((0.54248366)+(((-1.0)*x1269)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((-1.0)*(IKasin(((0.54248366)+(((-1.0)*x1269))))));
IkReal gconst0=((-0.542483660130719)+x1269);
j1eval[0]=((-1.0)+(((-1.09529025191676)*cj0*py))+(((1.09529025191676)*px*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1271=((0.522875816993464)*pz);
IkReal x1272=((-0.54248366)+x1271);
sj2=0;
cj2=1.0;
j2=0;
sj3=x1272;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
if( (x1272) < -1-IKFAST_SINCOS_THRESH || (x1272) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=IKasin(x1272);
IkReal gconst0=((-0.542483660130719)+x1271);
j1eval[0]=((((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1273=IKsin(j1);
IkReal x1274=IKcos(j1);
IkReal x1275=((0.211764705882353)*pz);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1276=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1277=((0.09)*x1276);
evalcond[0]=((-0.913)*x1274);
evalcond[1]=((-0.1447058823)+x1275+(((-1.0)*x1277))+(((-0.913)*x1273)));
evalcond[2]=((-0.889941176495)+(((0.13695)*x1273))+(((-0.5535)*x1276))+(((1.30235294117647)*pz)));
evalcond[3]=(((x1274*x1275))+(((-1.0)*x1274*x1277))+(((-0.1447058823)*x1274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*(py*py)))+(((-9857612267.25082)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1278=IKcos(j1);
IkReal x1279=IKsin(j1);
IkReal x1280=((0.211764705882353)*pz);
IkReal x1281=(py*x1279);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1282=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1283=((0.09)*x1282);
evalcond[0]=((((-1.0)*py*x1278))+(((-0.913)*x1278)));
evalcond[1]=(((x1278*x1280))+(((-1.0)*x1278*x1283))+(((-0.1447058823)*x1278)));
evalcond[2]=((-0.1447058823)+(((-1.0)*x1281))+x1280+(((-0.913)*x1279))+(((-1.0)*x1283)));
evalcond[3]=((-0.889941176495)+(((0.15)*x1281))+(((-0.5535)*x1282))+(((0.13695)*x1279))+(((1.30235294117647)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*(py*py)))+(((-9857612267.25082)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1284=IKcos(j1);
IkReal x1285=IKsin(j1);
IkReal x1286=((0.211764705882353)*pz);
IkReal x1287=(py*x1285);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1288=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1289=((0.09)*x1288);
evalcond[0]=(((py*x1284))+(((-0.913)*x1284)));
evalcond[1]=(((x1284*x1286))+(((-0.1447058823)*x1284))+(((-1.0)*x1284*x1289)));
evalcond[2]=((-0.1447058823)+x1287+x1286+(((-1.0)*x1289))+(((-0.913)*x1285)));
evalcond[3]=((-0.889941176495)+(((-0.15)*x1287))+(((-0.5535)*x1288))+(((1.30235294117647)*pz))+(((0.13695)*x1285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*(px*px)))+(((-9857612267.25082)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1290=IKcos(j1);
IkReal x1291=IKsin(j1);
IkReal x1292=((0.211764705882353)*pz);
IkReal x1293=(px*x1291);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1294=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1295=((0.09)*x1294);
evalcond[0]=((((-0.913)*x1290))+((px*x1290)));
evalcond[1]=(((x1290*x1292))+(((-1.0)*x1290*x1295))+(((-0.1447058823)*x1290)));
evalcond[2]=((-0.1447058823)+x1292+x1293+(((-1.0)*x1295))+(((-0.913)*x1291)));
evalcond[3]=((-0.889941176495)+(((0.13695)*x1291))+(((1.30235294117647)*pz))+(((-0.15)*x1293))+(((-0.5535)*x1294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*(px*px)))+(((-9857612267.25082)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1296=IKcos(j1);
IkReal x1297=IKsin(j1);
IkReal x1298=((0.211764705882353)*pz);
IkReal x1299=(px*x1297);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1300=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1301=((0.09)*x1300);
evalcond[0]=((((-1.0)*px*x1296))+(((-0.913)*x1296)));
evalcond[1]=(((x1296*x1298))+(((-1.0)*x1296*x1301))+(((-0.1447058823)*x1296)));
evalcond[2]=((-0.1447058823)+x1298+(((-1.0)*x1301))+(((-0.913)*x1297))+(((-1.0)*x1299)));
evalcond[3]=((-0.889941176495)+(((0.13695)*x1297))+(((-0.5535)*x1300))+(((1.30235294117647)*pz))+(((0.15)*x1299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1302=(cj0*py);
IkReal x1303=((9857612267.25082)*pp);
IkReal x1304=(px*sj0);
IkReal x1305=((13800657174.1511)*pz);
CheckValue<IkReal> x1306=IKPowWithIntegerCheck(((((-1.0)*py*sj0))+(((-1.0)*cj0*px))),-1);
if(!x1306.valid){
continue;
}
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
if( IKabs(((5028062431.62651)+x1305+(((-1.0)*x1303)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1306.value)*(((4590621000.21971)+(((5028062431.62651)*x1302))+(((-5028062431.62651)*x1304))+(((0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((12599999999.7882)*pz))+((x1303*x1304))+((x1302*x1305))+(((-1.0)*x1302*x1303))+(((-1.0)*x1304*x1305))+(((-9000000000.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5028062431.62651)+x1305+(((-1.0)*x1303))))+IKsqr(((x1306.value)*(((4590621000.21971)+(((5028062431.62651)*x1302))+(((-5028062431.62651)*x1304))+(((0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((12599999999.7882)*pz))+((x1303*x1304))+((x1302*x1305))+(((-1.0)*x1302*x1303))+(((-1.0)*x1304*x1305))+(((-9000000000.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((5028062431.62651)+x1305+(((-1.0)*x1303))), ((x1306.value)*(((4590621000.21971)+(((5028062431.62651)*x1302))+(((-5028062431.62651)*x1304))+(((0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((12599999999.7882)*pz))+((x1303*x1304))+((x1302*x1305))+(((-1.0)*x1302*x1303))+(((-1.0)*x1304*x1305))+(((-9000000000.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1307=IKsin(j1);
IkReal x1308=IKcos(j1);
IkReal x1309=((0.15)*py);
IkReal x1310=((0.211764705882353)*pz);
IkReal x1311=((1.0)*py);
IkReal x1312=(sj0*x1308);
IkReal x1313=(cj0*x1307);
IkReal x1314=(sj0*x1307);
IkReal x1315=(cj0*px*x1308);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1316=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1317=((0.09)*x1316);
evalcond[0]=((-0.279336801757028)+(((0.547645125958379)*pp))+(((5.55555555555556e-11)*x1307))+(((-0.766703176341731)*pz)));
evalcond[1]=(((py*x1314))+((px*x1312))+((px*x1313))+(((-1.0)*cj0*x1308*x1311))+(((-0.913)*x1308)));
evalcond[2]=((((-1.0)*x1308*x1317))+((x1308*x1310))+(((-1.0)*sj0*x1311))+(((-0.1447058823)*x1308))+(((-1.0)*cj0*px)));
evalcond[3]=((-0.1447058823)+x1310+(((-1.0)*x1311*x1312))+(((-1.0)*x1311*x1313))+((px*x1314))+(((-1.0)*x1315))+(((-1.0)*x1317))+(((-0.913)*x1307)));
evalcond[4]=((-0.889941176495)+(((-0.15)*px*x1314))+((x1309*x1313))+((x1309*x1312))+(((0.13695)*x1307))+(((1.30235294117647)*pz))+(((-0.5535)*x1316))+(((0.15)*x1315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1318=((13800657174.1511)*pz);
IkReal x1319=(py*sj0);
IkReal x1320=(cj0*px);
IkReal x1321=((9857612267.25082)*pp);
CheckValue<IkReal> x1322=IKPowWithIntegerCheck(((-0.913)+((px*sj0))+(((-1.0)*cj0*py))),-1);
if(!x1322.valid){
continue;
}
if( IKabs(((5028062431.62651)+x1318+(((-1.0)*x1321)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1322.value)*(((((-5028062431.62651)*x1320))+(((-1.0)*x1318*x1319))+((x1320*x1321))+((x1319*x1321))+(((-5028062431.62651)*x1319))+(((-1.0)*x1318*x1320)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5028062431.62651)+x1318+(((-1.0)*x1321))))+IKsqr(((x1322.value)*(((((-5028062431.62651)*x1320))+(((-1.0)*x1318*x1319))+((x1320*x1321))+((x1319*x1321))+(((-5028062431.62651)*x1319))+(((-1.0)*x1318*x1320))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((5028062431.62651)+x1318+(((-1.0)*x1321))), ((x1322.value)*(((((-5028062431.62651)*x1320))+(((-1.0)*x1318*x1319))+((x1320*x1321))+((x1319*x1321))+(((-5028062431.62651)*x1319))+(((-1.0)*x1318*x1320))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1323=IKsin(j1);
IkReal x1324=IKcos(j1);
IkReal x1325=((0.15)*py);
IkReal x1326=((0.211764705882353)*pz);
IkReal x1327=((1.0)*py);
IkReal x1328=(sj0*x1324);
IkReal x1329=(cj0*x1323);
IkReal x1330=(sj0*x1323);
IkReal x1331=(cj0*px*x1324);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1332=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1333=((0.09)*x1332);
evalcond[0]=((-0.279336801757028)+(((0.547645125958379)*pp))+(((-0.766703176341731)*pz))+(((5.55555555555556e-11)*x1323)));
evalcond[1]=(((px*x1328))+((px*x1329))+((py*x1330))+(((-0.913)*x1324))+(((-1.0)*cj0*x1324*x1327)));
evalcond[2]=((((-1.0)*x1324*x1333))+(((-1.0)*sj0*x1327))+((x1324*x1326))+(((-0.1447058823)*x1324))+(((-1.0)*cj0*px)));
evalcond[3]=((-0.1447058823)+x1326+((px*x1330))+(((-1.0)*x1331))+(((-1.0)*x1327*x1328))+(((-1.0)*x1327*x1329))+(((-0.913)*x1323))+(((-1.0)*x1333)));
evalcond[4]=((-0.889941176495)+(((-0.5535)*x1332))+(((0.13695)*x1323))+(((0.15)*x1331))+(((1.30235294117647)*pz))+((x1325*x1328))+((x1325*x1329))+(((-0.15)*px*x1330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x1334=IKPowWithIntegerCheck(((-0.1447058823)+(((-0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((0.211764705882353)*pz))),-1);
if(!x1334.valid){
continue;
}
if( IKabs(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1334.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp))))+IKsqr(((x1334.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp))), ((x1334.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1335=IKsin(j1);
IkReal x1336=IKcos(j1);
IkReal x1337=((0.15)*py);
IkReal x1338=((0.211764705882353)*pz);
IkReal x1339=((1.0)*py);
IkReal x1340=(sj0*x1336);
IkReal x1341=(cj0*x1335);
IkReal x1342=(sj0*x1335);
IkReal x1343=(cj0*px*x1336);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1344=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1345=((0.09)*x1344);
evalcond[0]=((-0.279336801757028)+(((0.547645125958379)*pp))+(((-0.766703176341731)*pz))+(((5.55555555555556e-11)*x1335)));
evalcond[1]=(((px*x1341))+((px*x1340))+(((-1.0)*cj0*x1336*x1339))+(((-0.913)*x1336))+((py*x1342)));
evalcond[2]=((((-1.0)*x1336*x1345))+((x1336*x1338))+(((-0.1447058823)*x1336))+(((-1.0)*sj0*x1339))+(((-1.0)*cj0*px)));
evalcond[3]=((-0.1447058823)+x1338+(((-1.0)*x1345))+((px*x1342))+(((-1.0)*x1339*x1341))+(((-1.0)*x1339*x1340))+(((-0.913)*x1335))+(((-1.0)*x1343)));
evalcond[4]=((-0.889941176495)+(((0.15)*x1343))+(((0.13695)*x1335))+(((-0.15)*px*x1342))+(((1.30235294117647)*pz))+((x1337*x1341))+((x1337*x1340))+(((-0.5535)*x1344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst0=((-0.542483660130719)+(((0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.542483660130719)+sj3+(((-0.522875816993464)*pz)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1346=((0.522875816993464)*pz);
IkReal x1347=((-0.54248366)+x1346);
sj2=0;
cj2=1.0;
j2=0;
sj3=x1347;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))))));
if( (x1347) < -1-IKFAST_SINCOS_THRESH || (x1347) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(((-1.0)*(IKasin(x1347)))));
IkReal gconst0=((-0.542483660130719)+x1346);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
j1eval[0]=((-1.60784313666667)+(((2.35294117647059)*pz))+(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1348=((0.522875816993464)*pz);
IkReal x1349=((-0.54248366)+x1348);
sj2=0;
cj2=1.0;
j2=0;
sj3=x1349;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))))));
if( (((0.54248366)+(((-1.0)*x1348)))) < -1-IKFAST_SINCOS_THRESH || (((0.54248366)+(((-1.0)*x1348)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(((1.0)*(IKasin(((0.54248366)+(((-1.0)*x1348))))))));
IkReal gconst0=((-0.542483660130719)+x1348);
j1eval[0]=((-1.0)+(((-1.09529025191676)*cj0*py))+(((1.09529025191676)*px*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1350=((0.522875816993464)*pz);
IkReal x1351=((-0.54248366)+x1350);
sj2=0;
cj2=1.0;
j2=0;
sj3=x1351;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))))));
if( (((0.54248366)+(((-1.0)*x1350)))) < -1-IKFAST_SINCOS_THRESH || (((0.54248366)+(((-1.0)*x1350)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(((1.0)*(IKasin(((0.54248366)+(((-1.0)*x1350))))))));
IkReal gconst0=((-0.542483660130719)+x1350);
j1eval[0]=((((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1352=IKsin(j1);
IkReal x1353=IKcos(j1);
IkReal x1354=((0.211764705882353)*pz);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1355=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1356=((0.09)*x1355);
evalcond[0]=((-0.913)*x1353);
evalcond[1]=((-0.1447058823)+x1356+x1354+(((-0.913)*x1352)));
evalcond[2]=((-0.889941176495)+(((0.5535)*x1355))+(((1.30235294117647)*pz))+(((0.13695)*x1352)));
evalcond[3]=((((-0.1447058823)*x1353))+((x1353*x1354))+((x1353*x1356)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*(py*py)))+(((-9857612267.25082)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1357=IKcos(j1);
IkReal x1358=IKsin(j1);
IkReal x1359=((0.211764705882353)*pz);
IkReal x1360=(py*x1358);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1361=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1362=((0.09)*x1361);
evalcond[0]=((((-1.0)*py*x1357))+(((-0.913)*x1357)));
evalcond[1]=(((x1357*x1362))+((x1357*x1359))+(((-0.1447058823)*x1357)));
evalcond[2]=((-0.1447058823)+x1359+x1362+(((-1.0)*x1360))+(((-0.913)*x1358)));
evalcond[3]=((-0.889941176495)+(((0.5535)*x1361))+(((0.15)*x1360))+(((1.30235294117647)*pz))+(((0.13695)*x1358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*(py*py)))+(((-9857612267.25082)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1363=IKcos(j1);
IkReal x1364=IKsin(j1);
IkReal x1365=((0.211764705882353)*pz);
IkReal x1366=(py*x1364);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1367=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1368=((0.09)*x1367);
evalcond[0]=((((-0.913)*x1363))+((py*x1363)));
evalcond[1]=(((x1363*x1365))+((x1363*x1368))+(((-0.1447058823)*x1363)));
evalcond[2]=((-0.1447058823)+x1366+x1365+x1368+(((-0.913)*x1364)));
evalcond[3]=((-0.889941176495)+(((0.5535)*x1367))+(((1.30235294117647)*pz))+(((0.13695)*x1364))+(((-0.15)*x1366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*(px*px)))+(((-9857612267.25082)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1369=IKcos(j1);
IkReal x1370=IKsin(j1);
IkReal x1371=((0.211764705882353)*pz);
IkReal x1372=(px*x1370);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1373=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1374=((0.09)*x1373);
evalcond[0]=((((-0.913)*x1369))+((px*x1369)));
evalcond[1]=((((-0.1447058823)*x1369))+((x1369*x1371))+((x1369*x1374)));
evalcond[2]=((-0.1447058823)+x1371+x1372+x1374+(((-0.913)*x1370)));
evalcond[3]=((-0.889941176495)+(((0.5535)*x1373))+(((0.13695)*x1370))+(((1.30235294117647)*pz))+(((-0.15)*x1372)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*(px*px)))+(((-9857612267.25082)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1375=IKcos(j1);
IkReal x1376=IKsin(j1);
IkReal x1377=((0.211764705882353)*pz);
IkReal x1378=(px*x1376);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1379=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1380=((0.09)*x1379);
evalcond[0]=((((-1.0)*px*x1375))+(((-0.913)*x1375)));
evalcond[1]=(((x1375*x1377))+(((-0.1447058823)*x1375))+((x1375*x1380)));
evalcond[2]=((-0.1447058823)+x1377+x1380+(((-1.0)*x1378))+(((-0.913)*x1376)));
evalcond[3]=((-0.889941176495)+(((0.5535)*x1379))+(((0.13695)*x1376))+(((0.15)*x1378))+(((1.30235294117647)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1381=((9857612267.25082)*pp);
IkReal x1382=(cj0*py);
IkReal x1383=(px*sj0);
IkReal x1384=((13800657174.1511)*pz);
CheckValue<IkReal> x1385=IKPowWithIntegerCheck(((((-1.0)*py*sj0))+(((-1.0)*cj0*px))),-1);
if(!x1385.valid){
continue;
}
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
if( IKabs(((5028062431.62651)+(((-1.0)*x1381))+x1384)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1385.value)*(((4590621000.21971)+((x1381*x1383))+(((-1.0)*x1383*x1384))+(((12599999999.7882)*pz))+(((-0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((-5028062431.62651)*x1383))+(((-1.0)*x1381*x1382))+(((5028062431.62651)*x1382))+((x1382*x1384))+(((-9000000000.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5028062431.62651)+(((-1.0)*x1381))+x1384))+IKsqr(((x1385.value)*(((4590621000.21971)+((x1381*x1383))+(((-1.0)*x1383*x1384))+(((12599999999.7882)*pz))+(((-0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((-5028062431.62651)*x1383))+(((-1.0)*x1381*x1382))+(((5028062431.62651)*x1382))+((x1382*x1384))+(((-9000000000.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((5028062431.62651)+(((-1.0)*x1381))+x1384), ((x1385.value)*(((4590621000.21971)+((x1381*x1383))+(((-1.0)*x1383*x1384))+(((12599999999.7882)*pz))+(((-0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((-5028062431.62651)*x1383))+(((-1.0)*x1381*x1382))+(((5028062431.62651)*x1382))+((x1382*x1384))+(((-9000000000.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1386=IKsin(j1);
IkReal x1387=IKcos(j1);
IkReal x1388=((0.15)*py);
IkReal x1389=((0.211764705882353)*pz);
IkReal x1390=((1.0)*py);
IkReal x1391=(sj0*x1387);
IkReal x1392=(cj0*x1386);
IkReal x1393=(sj0*x1386);
IkReal x1394=(cj0*px*x1387);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1395=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1396=((0.09)*x1395);
evalcond[0]=((-0.279336801757028)+(((0.547645125958379)*pp))+(((-0.766703176341731)*pz))+(((5.55555555555556e-11)*x1386)));
evalcond[1]=(((px*x1391))+((px*x1392))+(((-0.913)*x1387))+((py*x1393))+(((-1.0)*cj0*x1387*x1390)));
evalcond[2]=((((-0.1447058823)*x1387))+((x1387*x1389))+((x1387*x1396))+(((-1.0)*sj0*x1390))+(((-1.0)*cj0*px)));
evalcond[3]=((-0.1447058823)+x1389+x1396+((px*x1393))+(((-0.913)*x1386))+(((-1.0)*x1390*x1391))+(((-1.0)*x1390*x1392))+(((-1.0)*x1394)));
evalcond[4]=((-0.889941176495)+(((0.15)*x1394))+(((0.5535)*x1395))+((x1388*x1391))+((x1388*x1392))+(((-0.15)*px*x1393))+(((1.30235294117647)*pz))+(((0.13695)*x1386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1397=((13800657174.1511)*pz);
IkReal x1398=(py*sj0);
IkReal x1399=(cj0*px);
IkReal x1400=((9857612267.25082)*pp);
CheckValue<IkReal> x1401=IKPowWithIntegerCheck(((-0.913)+((px*sj0))+(((-1.0)*cj0*py))),-1);
if(!x1401.valid){
continue;
}
if( IKabs(((5028062431.62651)+x1397+(((-1.0)*x1400)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1401.value)*(((((-1.0)*x1397*x1398))+(((-1.0)*x1397*x1399))+((x1399*x1400))+(((-5028062431.62651)*x1399))+(((-5028062431.62651)*x1398))+((x1398*x1400)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5028062431.62651)+x1397+(((-1.0)*x1400))))+IKsqr(((x1401.value)*(((((-1.0)*x1397*x1398))+(((-1.0)*x1397*x1399))+((x1399*x1400))+(((-5028062431.62651)*x1399))+(((-5028062431.62651)*x1398))+((x1398*x1400))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((5028062431.62651)+x1397+(((-1.0)*x1400))), ((x1401.value)*(((((-1.0)*x1397*x1398))+(((-1.0)*x1397*x1399))+((x1399*x1400))+(((-5028062431.62651)*x1399))+(((-5028062431.62651)*x1398))+((x1398*x1400))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1402=IKsin(j1);
IkReal x1403=IKcos(j1);
IkReal x1404=((0.15)*py);
IkReal x1405=((0.211764705882353)*pz);
IkReal x1406=((1.0)*py);
IkReal x1407=(sj0*x1403);
IkReal x1408=(cj0*x1402);
IkReal x1409=(sj0*x1402);
IkReal x1410=(cj0*px*x1403);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1411=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1412=((0.09)*x1411);
evalcond[0]=((-0.279336801757028)+(((0.547645125958379)*pp))+(((5.55555555555556e-11)*x1402))+(((-0.766703176341731)*pz)));
evalcond[1]=(((px*x1408))+((px*x1407))+((py*x1409))+(((-0.913)*x1403))+(((-1.0)*cj0*x1403*x1406)));
evalcond[2]=((((-1.0)*sj0*x1406))+((x1403*x1405))+(((-1.0)*cj0*px))+(((-0.1447058823)*x1403))+((x1403*x1412)));
evalcond[3]=((-0.1447058823)+((px*x1409))+(((-1.0)*x1406*x1408))+(((-1.0)*x1406*x1407))+(((-0.913)*x1402))+x1412+x1405+(((-1.0)*x1410)));
evalcond[4]=((-0.889941176495)+(((-0.15)*px*x1409))+(((1.30235294117647)*pz))+(((0.15)*x1410))+((x1404*x1408))+((x1404*x1407))+(((0.13695)*x1402))+(((0.5535)*x1411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x1413=IKPowWithIntegerCheck(((-0.1447058823)+(((0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((0.211764705882353)*pz))),-1);
if(!x1413.valid){
continue;
}
if( IKabs(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1413.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp))))+IKsqr(((x1413.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp))), ((x1413.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1414=IKsin(j1);
IkReal x1415=IKcos(j1);
IkReal x1416=((0.15)*py);
IkReal x1417=((0.211764705882353)*pz);
IkReal x1418=((1.0)*py);
IkReal x1419=(sj0*x1415);
IkReal x1420=(cj0*x1414);
IkReal x1421=(sj0*x1414);
IkReal x1422=(cj0*px*x1415);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1423=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1424=((0.09)*x1423);
evalcond[0]=((-0.279336801757028)+(((5.55555555555556e-11)*x1414))+(((0.547645125958379)*pp))+(((-0.766703176341731)*pz)));
evalcond[1]=((((-0.913)*x1415))+((px*x1419))+(((-1.0)*cj0*x1415*x1418))+((px*x1420))+((py*x1421)));
evalcond[2]=(((x1415*x1417))+((x1415*x1424))+(((-1.0)*sj0*x1418))+(((-0.1447058823)*x1415))+(((-1.0)*cj0*px)));
evalcond[3]=((-0.1447058823)+(((-1.0)*x1418*x1420))+(((-0.913)*x1414))+(((-1.0)*x1418*x1419))+(((-1.0)*x1422))+x1424+x1417+((px*x1421)));
evalcond[4]=((-0.889941176495)+(((-0.15)*px*x1421))+(((0.15)*x1422))+((x1416*x1419))+(((0.5535)*x1423))+(((1.30235294117647)*pz))+(((0.13695)*x1414))+((x1416*x1420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1425=cj0*cj0;
IkReal x1426=py*py;
IkReal x1427=(cj0*px);
IkReal x1428=((0.09)*cj3);
IkReal x1429=(py*sj0);
IkReal x1430=(cj0*py);
IkReal x1431=(px*sj0);
IkReal x1432=((0.405)*sj3);
CheckValue<IkReal> x1433=IKPowWithIntegerCheck(((-0.068475)+((x1428*x1430))+(((0.075)*x1431))+(((-0.075)*x1430))+(((-0.369765)*sj3))+(((-1.0)*x1428*x1431))+(((-1.0)*x1430*x1432))+(((0.08217)*cj3))+((x1431*x1432))),-1);
if(!x1433.valid){
continue;
}
CheckValue<IkReal> x1434=IKPowWithIntegerCheck(((0.075)+x1432+(((-1.0)*x1428))),-1);
if(!x1434.valid){
continue;
}
if( IKabs(((x1433.value)*(((-0.16965)+(((2.0)*x1427*x1429))+((x1425*(px*px)))+(((0.155925)*(cj3*cj3)))+(((-1.0)*x1425*x1426))+x1426+(((0.0135)*cj3))+(((-0.06075)*sj3))+(((0.0729)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1434.value)*((x1427+x1429)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1433.value)*(((-0.16965)+(((2.0)*x1427*x1429))+((x1425*(px*px)))+(((0.155925)*(cj3*cj3)))+(((-1.0)*x1425*x1426))+x1426+(((0.0135)*cj3))+(((-0.06075)*sj3))+(((0.0729)*cj3*sj3))))))+IKsqr(((x1434.value)*((x1427+x1429))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1433.value)*(((-0.16965)+(((2.0)*x1427*x1429))+((x1425*(px*px)))+(((0.155925)*(cj3*cj3)))+(((-1.0)*x1425*x1426))+x1426+(((0.0135)*cj3))+(((-0.06075)*sj3))+(((0.0729)*cj3*sj3))))), ((x1434.value)*((x1427+x1429))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1435=IKcos(j1);
IkReal x1436=IKsin(j1);
IkReal x1437=((0.15)*py);
IkReal x1438=((0.09)*cj3);
IkReal x1439=((1.0)*py);
IkReal x1440=((0.405)*sj3);
IkReal x1441=(sj0*x1435);
IkReal x1442=(cj0*x1436);
IkReal x1443=(sj0*x1436);
IkReal x1444=(cj0*px*x1435);
evalcond[0]=((((0.075)*x1435))+(((-1.0)*sj0*x1439))+((x1435*x1440))+(((-1.0)*x1435*x1438))+(((-1.0)*cj0*px)));
evalcond[1]=((-0.298276195691858)+(((0.230555555555556)*x1436))+(((0.547645125958379)*pp))+(((0.425)*sj3*x1436))+(((-0.222222222222222)*pz*x1436))+(((-0.0349123767798467)*sj3))+(((-0.748448338809785)*pz)));
evalcond[2]=((((-1.0)*cj0*x1435*x1439))+(((-0.913)*x1435))+((py*x1443))+((px*x1441))+((px*x1442)));
evalcond[3]=((0.075)+(((-1.0)*x1444))+(((-1.0)*x1439*x1442))+(((-1.0)*x1439*x1441))+(((-1.0)*x1438))+(((-0.913)*x1436))+x1440+((px*x1443)));
evalcond[4]=((-1.157069)+((x1437*x1441))+((x1437*x1442))+(((-1.826)*cj0*py))+(((-0.15)*px*x1443))+(((1.826)*px*sj0))+(((-1.0)*pp))+(((0.13695)*x1436))+(((1.4)*pz))+(((0.15)*x1444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1445=(cj0*px);
IkReal x1446=((0.09)*cj3);
IkReal x1447=(py*sj0);
IkReal x1448=((0.405)*sj3);
IkReal x1449=(px*py);
IkReal x1450=(cj0*sj0);
CheckValue<IkReal> x1451=IKPowWithIntegerCheck((((x1445*x1448))+(((-1.0)*x1446*x1447))+(((-1.0)*x1445*x1446))+(((0.075)*x1447))+(((0.075)*x1445))+((x1447*x1448))),-1);
if(!x1451.valid){
continue;
}
CheckValue<IkReal> x1452=IKPowWithIntegerCheck(((0.075)+x1448+(((-1.0)*x1446))),-1);
if(!x1452.valid){
continue;
}
if( IKabs(((x1451.value)*(((((2.0)*cj0*py*x1445))+(((-1.0)*px*sj0*x1445))+(((-1.0)*x1449))+((cj0*py*x1447))+(((0.913)*x1445))+(((0.913)*x1447)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1452.value)*((x1447+x1445)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1451.value)*(((((2.0)*cj0*py*x1445))+(((-1.0)*px*sj0*x1445))+(((-1.0)*x1449))+((cj0*py*x1447))+(((0.913)*x1445))+(((0.913)*x1447))))))+IKsqr(((x1452.value)*((x1447+x1445))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1451.value)*(((((2.0)*cj0*py*x1445))+(((-1.0)*px*sj0*x1445))+(((-1.0)*x1449))+((cj0*py*x1447))+(((0.913)*x1445))+(((0.913)*x1447))))), ((x1452.value)*((x1447+x1445))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1453=IKcos(j1);
IkReal x1454=IKsin(j1);
IkReal x1455=((0.15)*py);
IkReal x1456=((0.09)*cj3);
IkReal x1457=((1.0)*py);
IkReal x1458=((0.405)*sj3);
IkReal x1459=(sj0*x1453);
IkReal x1460=(cj0*x1454);
IkReal x1461=(sj0*x1454);
IkReal x1462=(cj0*px*x1453);
evalcond[0]=((((-1.0)*sj0*x1457))+(((-1.0)*x1453*x1456))+(((0.075)*x1453))+((x1453*x1458))+(((-1.0)*cj0*px)));
evalcond[1]=((-0.298276195691858)+(((0.547645125958379)*pp))+(((0.425)*sj3*x1454))+(((-0.0349123767798467)*sj3))+(((-0.222222222222222)*pz*x1454))+(((0.230555555555556)*x1454))+(((-0.748448338809785)*pz)));
evalcond[2]=(((py*x1461))+((px*x1459))+(((-1.0)*cj0*x1453*x1457))+((px*x1460))+(((-0.913)*x1453)));
evalcond[3]=((0.075)+(((-1.0)*x1457*x1459))+(((-1.0)*x1456))+((px*x1461))+(((-1.0)*x1457*x1460))+x1458+(((-0.913)*x1454))+(((-1.0)*x1462)));
evalcond[4]=((-1.157069)+((x1455*x1459))+(((-1.826)*cj0*py))+(((1.826)*px*sj0))+((x1455*x1460))+(((-1.0)*pp))+(((0.15)*x1462))+(((0.13695)*x1454))+(((-0.15)*px*x1461))+(((1.4)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1463=IKPowWithIntegerCheck(((0.230555555555556)+(((-0.222222222222222)*pz))+(((0.425)*sj3))),-1);
if(!x1463.valid){
continue;
}
CheckValue<IkReal> x1464=IKPowWithIntegerCheck(((0.075)+(((0.405)*sj3))+(((-0.09)*cj3))),-1);
if(!x1464.valid){
continue;
}
if( IKabs(((x1463.value)*(((0.298276195691858)+(((0.0349123767798467)*sj3))+(((-0.547645125958379)*pp))+(((0.748448338809785)*pz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1464.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1463.value)*(((0.298276195691858)+(((0.0349123767798467)*sj3))+(((-0.547645125958379)*pp))+(((0.748448338809785)*pz))))))+IKsqr(((x1464.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1463.value)*(((0.298276195691858)+(((0.0349123767798467)*sj3))+(((-0.547645125958379)*pp))+(((0.748448338809785)*pz))))), ((x1464.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1465=IKcos(j1);
IkReal x1466=IKsin(j1);
IkReal x1467=((0.15)*py);
IkReal x1468=((0.09)*cj3);
IkReal x1469=((1.0)*py);
IkReal x1470=((0.405)*sj3);
IkReal x1471=(sj0*x1465);
IkReal x1472=(cj0*x1466);
IkReal x1473=(sj0*x1466);
IkReal x1474=(cj0*px*x1465);
evalcond[0]=((((0.075)*x1465))+(((-1.0)*sj0*x1469))+((x1465*x1470))+(((-1.0)*x1465*x1468))+(((-1.0)*cj0*px)));
evalcond[1]=((-0.298276195691858)+(((0.547645125958379)*pp))+(((0.230555555555556)*x1466))+(((0.425)*sj3*x1466))+(((-0.222222222222222)*pz*x1466))+(((-0.0349123767798467)*sj3))+(((-0.748448338809785)*pz)));
evalcond[2]=((((-0.913)*x1465))+(((-1.0)*cj0*x1465*x1469))+((py*x1473))+((px*x1472))+((px*x1471)));
evalcond[3]=((0.075)+(((-1.0)*x1468))+(((-1.0)*x1474))+(((-0.913)*x1466))+(((-1.0)*x1469*x1471))+(((-1.0)*x1469*x1472))+x1470+((px*x1473)));
evalcond[4]=((-1.157069)+(((0.15)*x1474))+(((-1.826)*cj0*py))+(((-0.15)*px*x1473))+(((1.826)*px*sj0))+((x1467*x1472))+((x1467*x1471))+(((-1.0)*pp))+(((1.4)*pz))+(((0.13695)*x1466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=((1.0)+(((-3.2520325203252)*pz))+(((-6.21951219512195)*sj3)));
j1eval[1]=((1.0)+(((1.2)*cj3))+(((-5.4)*sj3)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1475=(cj0*px);
IkReal x1476=((1.2)*cj3);
IkReal x1477=(py*sj0);
IkReal x1478=((5.4)*sj3);
j1eval[0]=((((-1.0)*x1477*x1478))+(((-1.0)*x1475*x1478))+((x1476*x1477))+x1477+x1475+((x1475*x1476)));
j1eval[1]=((1.0)+x1476+(((-1.0)*x1478)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1479=((6.21951219512195)*sj3);
IkReal x1480=((3.2520325203252)*pz);
IkReal x1481=(px*sj0);
IkReal x1482=((3.56191951842848)*pz);
IkReal x1483=(cj0*py);
IkReal x1484=((6.81217107899447)*sj3);
IkReal x1485=(x1479+x1480);
j1eval[0]=((1.0)+(((-1.0)*x1485)));
j1eval[1]=((-1.0)+(((1.09529025191676)*x1481))+((x1482*x1483))+(((-1.0)*x1481*x1482))+(((-1.0)*x1481*x1484))+(((-1.09529025191676)*x1483))+((x1483*x1484))+x1485);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal gconst1=((0.16078431372549)+(((-0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.16078431372549)+sj3+(((0.522875816993464)*pz)))))+(IKabs(((-1.0)+(IKsign(cj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1486=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x1486)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
if( (((-0.160784313599385)+x1486)) < -1-IKFAST_SINCOS_THRESH || (((-0.160784313599385)+x1486)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((-1.0)*(IKasin(((-0.160784313599385)+x1486))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x1486)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
j1eval[0]=((1.0)+(((21.4285713178271)*pz))+(((9.10714281007653)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1487=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x1487)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
if( (((-0.160784313599385)+x1487)) < -1-IKFAST_SINCOS_THRESH || (((-0.160784313599385)+x1487)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((-1.0)*(IKasin(((-0.160784313599385)+x1487))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x1487)));
j1eval[0]=((-1.0)+(((-1.09529025191676)*cj0*py))+(((1.09529025191676)*px*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1488=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x1488)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
if( (((0.160784313599385)+(((-1.0)*x1488)))) < -1-IKFAST_SINCOS_THRESH || (((0.160784313599385)+(((-1.0)*x1488)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((1.0)*(IKasin(((0.160784313599385)+(((-1.0)*x1488))))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x1488)));
j1eval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((10209765255.3315)+(((-10218256626.506)*(pz*pz)))+(((-613095397.590361)*pz)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1489=IKsin(j1);
IkReal x1490=IKcos(j1);
IkReal x1491=((0.211764705882353)*pz);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1492=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1493=((0.09)*x1492);
evalcond[0]=((-0.913)*x1490);
evalcond[1]=((-0.00988235299224913)+(((-1.0)*x1493))+(((-1.0)*x1491))+(((0.913)*x1489)));
evalcond[2]=((-0.00415058824227405)+(((-0.0889411764705882)*pz))+(((-0.0378)*x1492))+(((0.13695)*x1489)));
evalcond[3]=((((0.00988235299224913)*x1490))+((x1490*x1491))+((x1490*x1493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((10209765255.3315)+(((-10218256626.506)*(pz*pz)))+(((-613095397.590361)*pz))+(((-10218256626.506)*(py*py))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1494=IKcos(j1);
IkReal x1495=IKsin(j1);
IkReal x1496=((0.211764705882353)*pz);
IkReal x1497=(py*x1495);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1498=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1499=((0.09)*x1498);
evalcond[0]=((((-1.0)*py*x1494))+(((-0.913)*x1494)));
evalcond[1]=((((0.00988235299224913)*x1494))+((x1494*x1499))+((x1494*x1496)));
evalcond[2]=((-0.00988235299224913)+(((-1.0)*x1499))+(((-1.0)*x1496))+x1497+(((0.913)*x1495)));
evalcond[3]=((-0.00415058824227405)+(((0.15)*x1497))+(((-0.0889411764705882)*pz))+(((-0.0378)*x1498))+(((0.13695)*x1495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((10209765255.3315)+(((-10218256626.506)*(pz*pz)))+(((-613095397.590361)*pz))+(((-10218256626.506)*(py*py))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1500=IKcos(j1);
IkReal x1501=IKsin(j1);
IkReal x1502=((0.211764705882353)*pz);
IkReal x1503=(py*x1501);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1504=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1505=((0.09)*x1504);
evalcond[0]=((((-0.913)*x1500))+((py*x1500)));
evalcond[1]=(((x1500*x1502))+((x1500*x1505))+(((0.00988235299224913)*x1500)));
evalcond[2]=((-0.00988235299224913)+(((-1.0)*x1502))+(((-1.0)*x1505))+(((-1.0)*x1503))+(((0.913)*x1501)));
evalcond[3]=((-0.00415058824227405)+(((0.13695)*x1501))+(((-0.0889411764705882)*pz))+(((-0.0378)*x1504))+(((-0.15)*x1503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((10209765255.3315)+(((-10218256626.506)*(pz*pz)))+(((-10218256626.506)*(px*px)))+(((-613095397.590361)*pz)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1506=IKcos(j1);
IkReal x1507=IKsin(j1);
IkReal x1508=((0.211764705882353)*pz);
IkReal x1509=(px*x1507);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1510=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1511=((0.09)*x1510);
evalcond[0]=((((-0.913)*x1506))+((px*x1506)));
evalcond[1]=(((x1506*x1511))+((x1506*x1508))+(((0.00988235299224913)*x1506)));
evalcond[2]=((-0.00988235299224913)+(((-1.0)*x1508))+(((-1.0)*x1511))+(((-1.0)*x1509))+(((0.913)*x1507)));
evalcond[3]=((-0.00415058824227405)+(((0.13695)*x1507))+(((-0.0889411764705882)*pz))+(((-0.15)*x1509))+(((-0.0378)*x1510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((10209765255.3315)+(((-10218256626.506)*(pz*pz)))+(((-10218256626.506)*(px*px)))+(((-613095397.590361)*pz)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1512=IKcos(j1);
IkReal x1513=IKsin(j1);
IkReal x1514=((0.211764705882353)*pz);
IkReal x1515=(px*x1513);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1516=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1517=((0.09)*x1516);
evalcond[0]=((((-0.913)*x1512))+(((-1.0)*px*x1512)));
evalcond[1]=((((0.00988235299224913)*x1512))+((x1512*x1514))+((x1512*x1517)));
evalcond[2]=((-0.00988235299224913)+(((-1.0)*x1514))+(((-1.0)*x1517))+x1515+(((0.913)*x1513)));
evalcond[3]=((-0.00415058824227405)+(((0.13695)*x1513))+(((-0.0889411764705882)*pz))+(((0.15)*x1515))+(((-0.0378)*x1516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1518=((10218256626.506)*pp);
IkReal x1519=(cj0*py);
IkReal x1520=((613095397.590361)*pz);
IkReal x1521=(px*sj0);
CheckValue<IkReal> x1522=IKPowWithIntegerCheck((((cj0*px))+((py*sj0))),-1);
if(!x1522.valid){
continue;
}
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
if( IKabs(((10209765255.3315)+(((-1.0)*x1518))+(((-1.0)*x1520)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1522.value)*(((-9321515678.10782)+((x1519*x1520))+(((-10209765255.3315)*x1519))+((x1518*x1519))+(((9329268300.0)*pp))+(((-1.0)*x1518*x1521))+(((0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((10209765255.3315)*x1521))+(((559756098.211765)*pz))+(((-1.0)*x1520*x1521)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((10209765255.3315)+(((-1.0)*x1518))+(((-1.0)*x1520))))+IKsqr(((x1522.value)*(((-9321515678.10782)+((x1519*x1520))+(((-10209765255.3315)*x1519))+((x1518*x1519))+(((9329268300.0)*pp))+(((-1.0)*x1518*x1521))+(((0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((10209765255.3315)*x1521))+(((559756098.211765)*pz))+(((-1.0)*x1520*x1521))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((10209765255.3315)+(((-1.0)*x1518))+(((-1.0)*x1520))), ((x1522.value)*(((-9321515678.10782)+((x1519*x1520))+(((-10209765255.3315)*x1519))+((x1518*x1519))+(((9329268300.0)*pp))+(((-1.0)*x1518*x1521))+(((0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((10209765255.3315)*x1521))+(((559756098.211765)*pz))+(((-1.0)*x1520*x1521))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1523=IKsin(j1);
IkReal x1524=IKcos(j1);
IkReal x1525=((0.15)*py);
IkReal x1526=((0.15)*px);
IkReal x1527=((0.211764705882353)*pz);
IkReal x1528=((1.0)*py);
IkReal x1529=((1.0)*px);
IkReal x1530=(sj0*x1524);
IkReal x1531=(cj0*x1523);
IkReal x1532=(sj0*x1523);
IkReal x1533=(cj0*x1524);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1534=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1535=((0.09)*x1534);
evalcond[0]=((-0.54719003286311)+(((0.547645125958379)*pp))+(((0.0328587075575027)*pz))+(((5.3594771199795e-11)*x1523)));
evalcond[1]=((((-1.0)*x1528*x1533))+((px*x1530))+((px*x1531))+((py*x1532))+(((-0.913)*x1524)));
evalcond[2]=(((x1524*x1527))+((x1524*x1535))+(((-1.0)*sj0*x1528))+(((-1.0)*cj0*x1529))+(((0.00988235299224913)*x1524)));
evalcond[3]=((-0.00988235299224913)+(((-1.0)*x1529*x1532))+(((-1.0)*x1535))+(((-1.0)*x1527))+((px*x1533))+((py*x1531))+((py*x1530))+(((0.913)*x1523)));
evalcond[4]=((-0.00415058824227405)+((x1525*x1530))+((x1525*x1531))+(((0.13695)*x1523))+(((-0.0889411764705882)*pz))+((x1526*x1533))+(((-0.0378)*x1534))+(((-1.0)*x1526*x1532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1536=(cj0*px);
IkReal x1537=((10218256626.506)*pp);
IkReal x1538=(py*sj0);
IkReal x1539=((613095397.590361)*pz);
CheckValue<IkReal> x1540=IKPowWithIntegerCheck(((-0.913)+((px*sj0))+(((-1.0)*cj0*py))),-1);
if(!x1540.valid){
continue;
}
if( IKabs(((10209765255.3315)+(((-1.0)*x1539))+(((-1.0)*x1537)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1540.value)*((((x1538*x1539))+((x1536*x1537))+((x1536*x1539))+(((-10209765255.3315)*x1538))+(((-10209765255.3315)*x1536))+((x1537*x1538)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((10209765255.3315)+(((-1.0)*x1539))+(((-1.0)*x1537))))+IKsqr(((x1540.value)*((((x1538*x1539))+((x1536*x1537))+((x1536*x1539))+(((-10209765255.3315)*x1538))+(((-10209765255.3315)*x1536))+((x1537*x1538))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((10209765255.3315)+(((-1.0)*x1539))+(((-1.0)*x1537))), ((x1540.value)*((((x1538*x1539))+((x1536*x1537))+((x1536*x1539))+(((-10209765255.3315)*x1538))+(((-10209765255.3315)*x1536))+((x1537*x1538))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1541=IKsin(j1);
IkReal x1542=IKcos(j1);
IkReal x1543=((0.15)*py);
IkReal x1544=((0.15)*px);
IkReal x1545=((0.211764705882353)*pz);
IkReal x1546=((1.0)*py);
IkReal x1547=((1.0)*px);
IkReal x1548=(sj0*x1542);
IkReal x1549=(cj0*x1541);
IkReal x1550=(sj0*x1541);
IkReal x1551=(cj0*x1542);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1552=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1553=((0.09)*x1552);
evalcond[0]=((-0.54719003286311)+(((0.547645125958379)*pp))+(((5.3594771199795e-11)*x1541))+(((0.0328587075575027)*pz)));
evalcond[1]=((((-1.0)*x1546*x1551))+((py*x1550))+((px*x1549))+((px*x1548))+(((-0.913)*x1542)));
evalcond[2]=((((0.00988235299224913)*x1542))+(((-1.0)*sj0*x1546))+((x1542*x1545))+((x1542*x1553))+(((-1.0)*cj0*x1547)));
evalcond[3]=((-0.00988235299224913)+((py*x1549))+((py*x1548))+(((-1.0)*x1553))+((px*x1551))+(((-1.0)*x1547*x1550))+(((-1.0)*x1545))+(((0.913)*x1541)));
evalcond[4]=((-0.00415058824227405)+((x1544*x1551))+(((0.13695)*x1541))+(((-0.0889411764705882)*pz))+(((-1.0)*x1544*x1550))+((x1543*x1548))+((x1543*x1549))+(((-0.0378)*x1552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
CheckValue<IkReal> x1554=IKPowWithIntegerCheck(((0.00988235299224913)+(((0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((0.211764705882353)*pz))),-1);
if(!x1554.valid){
continue;
}
if( IKabs(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1554.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp))))+IKsqr(((x1554.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp))), ((x1554.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1555=IKsin(j1);
IkReal x1556=IKcos(j1);
IkReal x1557=((0.15)*py);
IkReal x1558=((0.15)*px);
IkReal x1559=((0.211764705882353)*pz);
IkReal x1560=((1.0)*py);
IkReal x1561=((1.0)*px);
IkReal x1562=(sj0*x1556);
IkReal x1563=(cj0*x1555);
IkReal x1564=(sj0*x1555);
IkReal x1565=(cj0*x1556);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1566=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1567=((0.09)*x1566);
evalcond[0]=((-0.54719003286311)+(((0.547645125958379)*pp))+(((0.0328587075575027)*pz))+(((5.3594771199795e-11)*x1555)));
evalcond[1]=((((-1.0)*x1560*x1565))+((px*x1563))+((px*x1562))+((py*x1564))+(((-0.913)*x1556)));
evalcond[2]=((((-1.0)*cj0*x1561))+((x1556*x1567))+((x1556*x1559))+(((0.00988235299224913)*x1556))+(((-1.0)*sj0*x1560)));
evalcond[3]=((-0.00988235299224913)+((px*x1565))+(((0.913)*x1555))+(((-1.0)*x1559))+((py*x1563))+((py*x1562))+(((-1.0)*x1567))+(((-1.0)*x1561*x1564)));
evalcond[4]=((-0.00415058824227405)+(((0.13695)*x1555))+(((-0.0889411764705882)*pz))+((x1557*x1562))+((x1557*x1563))+(((-0.0378)*x1566))+((x1558*x1565))+(((-1.0)*x1558*x1564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst1=((0.16078431372549)+(((-0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.16078431372549)+sj3+(((0.522875816993464)*pz)))))+(IKabs(((1.0)+(IKsign(cj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1568=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x1568)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))))));
if( (((-0.160784313599385)+x1568)) < -1-IKFAST_SINCOS_THRESH || (((-0.160784313599385)+x1568)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(IKasin(((-0.160784313599385)+x1568))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x1568)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
j1eval[0]=((1.0)+(((-9.10714281007653)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((21.4285713178271)*pz)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1569=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x1569)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))))));
if( (((-0.160784313599385)+x1569)) < -1-IKFAST_SINCOS_THRESH || (((-0.160784313599385)+x1569)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(IKasin(((-0.160784313599385)+x1569))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x1569)));
j1eval[0]=((-1.0)+(((-1.09529025191676)*cj0*py))+(((1.09529025191676)*px*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1570=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x1570)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))))));
if( (((0.160784313599385)+(((-1.0)*x1570)))) < -1-IKFAST_SINCOS_THRESH || (((0.160784313599385)+(((-1.0)*x1570)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(((-1.0)*(IKasin(((0.160784313599385)+(((-1.0)*x1570))))))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x1570)));
j1eval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((10209765255.3315)+(((-10218256626.506)*(pz*pz)))+(((-613095397.590361)*pz)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1571=IKsin(j1);
IkReal x1572=IKcos(j1);
IkReal x1573=((0.211764705882353)*pz);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1574=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1575=((0.09)*x1574);
evalcond[0]=((-0.913)*x1572);
evalcond[1]=((-0.00988235299224913)+x1575+(((-1.0)*x1573))+(((0.913)*x1571)));
evalcond[2]=((-0.00415058824227405)+(((0.0378)*x1574))+(((-0.0889411764705882)*pz))+(((0.13695)*x1571)));
evalcond[3]=((((0.00988235299224913)*x1572))+((x1572*x1573))+(((-1.0)*x1572*x1575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((10209765255.3315)+(((-10218256626.506)*(pz*pz)))+(((-613095397.590361)*pz))+(((-10218256626.506)*(py*py))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1576=IKcos(j1);
IkReal x1577=IKsin(j1);
IkReal x1578=((0.211764705882353)*pz);
IkReal x1579=(py*x1577);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1580=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1581=((0.09)*x1580);
evalcond[0]=((((-1.0)*py*x1576))+(((-0.913)*x1576)));
evalcond[1]=((((0.00988235299224913)*x1576))+((x1576*x1578))+(((-1.0)*x1576*x1581)));
evalcond[2]=((-0.00988235299224913)+x1579+x1581+(((-1.0)*x1578))+(((0.913)*x1577)));
evalcond[3]=((-0.00415058824227405)+(((0.0378)*x1580))+(((0.15)*x1579))+(((-0.0889411764705882)*pz))+(((0.13695)*x1577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((10209765255.3315)+(((-10218256626.506)*(pz*pz)))+(((-613095397.590361)*pz))+(((-10218256626.506)*(py*py))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1582=IKcos(j1);
IkReal x1583=IKsin(j1);
IkReal x1584=((0.211764705882353)*pz);
IkReal x1585=(py*x1583);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1586=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1587=((0.09)*x1586);
evalcond[0]=((((-0.913)*x1582))+((py*x1582)));
evalcond[1]=(((x1582*x1584))+(((-1.0)*x1582*x1587))+(((0.00988235299224913)*x1582)));
evalcond[2]=((-0.00988235299224913)+(((-1.0)*x1584))+x1587+(((0.913)*x1583))+(((-1.0)*x1585)));
evalcond[3]=((-0.00415058824227405)+(((0.0378)*x1586))+(((-0.0889411764705882)*pz))+(((0.13695)*x1583))+(((-0.15)*x1585)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((10209765255.3315)+(((-10218256626.506)*(pz*pz)))+(((-10218256626.506)*(px*px)))+(((-613095397.590361)*pz)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1588=IKcos(j1);
IkReal x1589=IKsin(j1);
IkReal x1590=((0.211764705882353)*pz);
IkReal x1591=(px*x1589);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1592=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1593=((0.09)*x1592);
evalcond[0]=((((-0.913)*x1588))+((px*x1588)));
evalcond[1]=(((x1588*x1590))+(((-1.0)*x1588*x1593))+(((0.00988235299224913)*x1588)));
evalcond[2]=((-0.00988235299224913)+(((-1.0)*x1590))+x1593+(((0.913)*x1589))+(((-1.0)*x1591)));
evalcond[3]=((-0.00415058824227405)+(((0.0378)*x1592))+(((-0.0889411764705882)*pz))+(((0.13695)*x1589))+(((-0.15)*x1591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((10209765255.3315)+(((-10218256626.506)*(pz*pz)))+(((-10218256626.506)*(px*px)))+(((-613095397.590361)*pz)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1594=IKcos(j1);
IkReal x1595=IKsin(j1);
IkReal x1596=((0.211764705882353)*pz);
IkReal x1597=(px*x1595);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1598=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1599=((0.09)*x1598);
evalcond[0]=((((-1.0)*px*x1594))+(((-0.913)*x1594)));
evalcond[1]=((((0.00988235299224913)*x1594))+((x1594*x1596))+(((-1.0)*x1594*x1599)));
evalcond[2]=((-0.00988235299224913)+(((-1.0)*x1596))+x1597+x1599+(((0.913)*x1595)));
evalcond[3]=((-0.00415058824227405)+(((0.15)*x1597))+(((0.0378)*x1598))+(((-0.0889411764705882)*pz))+(((0.13695)*x1595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1600=((10218256626.506)*pp);
IkReal x1601=(cj0*py);
IkReal x1602=((613095397.590361)*pz);
IkReal x1603=(px*sj0);
CheckValue<IkReal> x1604=IKPowWithIntegerCheck((((cj0*px))+((py*sj0))),-1);
if(!x1604.valid){
continue;
}
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
if( IKabs(((10209765255.3315)+(((-1.0)*x1600))+(((-1.0)*x1602)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1604.value)*(((-9321515678.10782)+((x1600*x1601))+(((9329268300.0)*pp))+(((-10209765255.3315)*x1601))+((x1601*x1602))+(((-1.0)*x1600*x1603))+(((559756098.211765)*pz))+(((10209765255.3315)*x1603))+(((-0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((-1.0)*x1602*x1603)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((10209765255.3315)+(((-1.0)*x1600))+(((-1.0)*x1602))))+IKsqr(((x1604.value)*(((-9321515678.10782)+((x1600*x1601))+(((9329268300.0)*pp))+(((-10209765255.3315)*x1601))+((x1601*x1602))+(((-1.0)*x1600*x1603))+(((559756098.211765)*pz))+(((10209765255.3315)*x1603))+(((-0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((-1.0)*x1602*x1603))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((10209765255.3315)+(((-1.0)*x1600))+(((-1.0)*x1602))), ((x1604.value)*(((-9321515678.10782)+((x1600*x1601))+(((9329268300.0)*pp))+(((-10209765255.3315)*x1601))+((x1601*x1602))+(((-1.0)*x1600*x1603))+(((559756098.211765)*pz))+(((10209765255.3315)*x1603))+(((-0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((-1.0)*x1602*x1603))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1605=IKsin(j1);
IkReal x1606=IKcos(j1);
IkReal x1607=((0.15)*py);
IkReal x1608=((0.15)*px);
IkReal x1609=((0.211764705882353)*pz);
IkReal x1610=((1.0)*py);
IkReal x1611=((1.0)*px);
IkReal x1612=(sj0*x1606);
IkReal x1613=(cj0*x1605);
IkReal x1614=(sj0*x1605);
IkReal x1615=(cj0*x1606);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1616=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1617=((0.09)*x1616);
evalcond[0]=((-0.54719003286311)+(((0.547645125958379)*pp))+(((0.0328587075575027)*pz))+(((5.3594771199795e-11)*x1605)));
evalcond[1]=(((py*x1614))+(((-1.0)*x1610*x1615))+((px*x1613))+((px*x1612))+(((-0.913)*x1606)));
evalcond[2]=((((-1.0)*sj0*x1610))+(((-1.0)*x1606*x1617))+(((-1.0)*cj0*x1611))+(((0.00988235299224913)*x1606))+((x1606*x1609)));
evalcond[3]=((-0.00988235299224913)+((py*x1613))+((py*x1612))+(((-1.0)*x1611*x1614))+(((-1.0)*x1609))+x1617+(((0.913)*x1605))+((px*x1615)));
evalcond[4]=((-0.00415058824227405)+(((0.13695)*x1605))+(((0.0378)*x1616))+(((-0.0889411764705882)*pz))+((x1608*x1615))+((x1607*x1613))+((x1607*x1612))+(((-1.0)*x1608*x1614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1618=(cj0*px);
IkReal x1619=((10218256626.506)*pp);
IkReal x1620=(py*sj0);
IkReal x1621=((613095397.590361)*pz);
CheckValue<IkReal> x1622=IKPowWithIntegerCheck(((-0.913)+((px*sj0))+(((-1.0)*cj0*py))),-1);
if(!x1622.valid){
continue;
}
if( IKabs(((10209765255.3315)+(((-1.0)*x1619))+(((-1.0)*x1621)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1622.value)*((((x1620*x1621))+(((-10209765255.3315)*x1620))+(((-10209765255.3315)*x1618))+((x1618*x1621))+((x1618*x1619))+((x1619*x1620)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((10209765255.3315)+(((-1.0)*x1619))+(((-1.0)*x1621))))+IKsqr(((x1622.value)*((((x1620*x1621))+(((-10209765255.3315)*x1620))+(((-10209765255.3315)*x1618))+((x1618*x1621))+((x1618*x1619))+((x1619*x1620))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((10209765255.3315)+(((-1.0)*x1619))+(((-1.0)*x1621))), ((x1622.value)*((((x1620*x1621))+(((-10209765255.3315)*x1620))+(((-10209765255.3315)*x1618))+((x1618*x1621))+((x1618*x1619))+((x1619*x1620))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1623=IKsin(j1);
IkReal x1624=IKcos(j1);
IkReal x1625=((0.15)*py);
IkReal x1626=((0.15)*px);
IkReal x1627=((0.211764705882353)*pz);
IkReal x1628=((1.0)*py);
IkReal x1629=((1.0)*px);
IkReal x1630=(sj0*x1624);
IkReal x1631=(cj0*x1623);
IkReal x1632=(sj0*x1623);
IkReal x1633=(cj0*x1624);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1634=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1635=((0.09)*x1634);
evalcond[0]=((-0.54719003286311)+(((5.3594771199795e-11)*x1623))+(((0.547645125958379)*pp))+(((0.0328587075575027)*pz)));
evalcond[1]=(((py*x1632))+((px*x1631))+((px*x1630))+(((-0.913)*x1624))+(((-1.0)*x1628*x1633)));
evalcond[2]=((((-1.0)*sj0*x1628))+(((-1.0)*x1624*x1635))+(((0.00988235299224913)*x1624))+(((-1.0)*cj0*x1629))+((x1624*x1627)));
evalcond[3]=((-0.00988235299224913)+((py*x1630))+((py*x1631))+x1635+(((-1.0)*x1627))+((px*x1633))+(((0.913)*x1623))+(((-1.0)*x1629*x1632)));
evalcond[4]=((-0.00415058824227405)+(((0.13695)*x1623))+((x1625*x1631))+((x1625*x1630))+(((-0.0889411764705882)*pz))+(((-1.0)*x1626*x1632))+(((0.0378)*x1634))+((x1626*x1633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
CheckValue<IkReal> x1636=IKPowWithIntegerCheck(((0.00988235299224913)+(((-0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((0.211764705882353)*pz))),-1);
if(!x1636.valid){
continue;
}
if( IKabs(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1636.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp))))+IKsqr(((x1636.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp))), ((x1636.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1637=IKsin(j1);
IkReal x1638=IKcos(j1);
IkReal x1639=((0.15)*py);
IkReal x1640=((0.15)*px);
IkReal x1641=((0.211764705882353)*pz);
IkReal x1642=((1.0)*py);
IkReal x1643=((1.0)*px);
IkReal x1644=(sj0*x1638);
IkReal x1645=(cj0*x1637);
IkReal x1646=(sj0*x1637);
IkReal x1647=(cj0*x1638);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1648=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1649=((0.09)*x1648);
evalcond[0]=((-0.54719003286311)+(((0.547645125958379)*pp))+(((5.3594771199795e-11)*x1637))+(((0.0328587075575027)*pz)));
evalcond[1]=((((-0.913)*x1638))+((py*x1646))+((px*x1645))+((px*x1644))+(((-1.0)*x1642*x1647)));
evalcond[2]=((((0.00988235299224913)*x1638))+(((-1.0)*x1638*x1649))+(((-1.0)*sj0*x1642))+((x1638*x1641))+(((-1.0)*cj0*x1643)));
evalcond[3]=((-0.00988235299224913)+x1649+((py*x1645))+((py*x1644))+((px*x1647))+(((-1.0)*x1641))+(((-1.0)*x1643*x1646))+(((0.913)*x1637)));
evalcond[4]=((-0.00415058824227405)+((x1640*x1647))+(((0.0378)*x1648))+(((-0.0889411764705882)*pz))+(((-1.0)*x1640*x1646))+((x1639*x1645))+((x1639*x1644))+(((0.13695)*x1637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((3.10469847231699)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-1168543470.65351)+(((1196681824.51447)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1168543470.65351)+(((1196681824.51447)*pp))))+IKsqr(((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1168543470.65351)+(((1196681824.51447)*pp))), ((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1650=IKsin(j1);
IkReal x1651=IKcos(j1);
CheckValue<IkReal> x1660=IKPowWithIntegerCheck(py,-1);
if(!x1660.valid){
continue;
}
IkReal x1652=x1660.value;
IkReal x1653=(py*sj0);
IkReal x1654=(px*sj0);
IkReal x1655=((0.0821467688937568)*pp);
IkReal x1656=(cj0*px);
IkReal x1657=(cj0*py);
IkReal x1658=((0.15)*x1651);
IkReal x1659=(px*x1651*x1652);
evalcond[0]=((-0.534767991845724)+(((0.547645125958379)*pp))+(((-4.57636369784904e-10)*x1650)));
evalcond[1]=((((-4.57636369784904e-10)*x1651))+(((-1.0)*x1653))+(((-1.0)*x1656)));
evalcond[2]=((((-1.0)*x1651*x1657))+((x1650*x1656))+((x1650*x1653))+((x1651*x1654))+(((-0.913)*x1651)));
evalcond[3]=((4.57636369784904e-10)+((x1650*x1657))+(((-1.0)*x1650*x1654))+((x1651*x1656))+((x1651*x1653))+(((0.913)*x1650)));
evalcond[4]=((6.86454554677356e-11)+(((-1.0)*x1655*x1659))+(((-1.0)*x1650*x1655))+(((-0.0567348012231413)*x1659))+((px*x1652*x1654*x1658))+(((0.0802151987768587)*x1650))+((x1653*x1658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.400443710475077)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-1542704802.03156)+(((1504414963.66099)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1542704802.03156)+(((1504414963.66099)*pp))))+IKsqr(((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1542704802.03156)+(((1504414963.66099)*pp))), ((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1661=IKsin(j1);
IkReal x1662=IKcos(j1);
CheckValue<IkReal> x1671=IKPowWithIntegerCheck(py,-1);
if(!x1671.valid){
continue;
}
IkReal x1663=x1671.value;
IkReal x1664=(py*sj0);
IkReal x1665=(px*sj0);
IkReal x1666=((0.0821467688937568)*pp);
IkReal x1667=(cj0*px);
IkReal x1668=(cj0*py);
IkReal x1669=((0.15)*x1662);
IkReal x1670=(px*x1662*x1663);
evalcond[0]=((-0.561583596303256)+(((0.547645125958379)*pp))+(((-3.64025311623919e-10)*x1661)));
evalcond[1]=((((-1.0)*x1664))+(((-1.0)*x1667))+(((-3.64025311623919e-10)*x1662)));
evalcond[2]=(((x1662*x1665))+(((-0.913)*x1662))+((x1661*x1667))+((x1661*x1664))+(((-1.0)*x1662*x1668)));
evalcond[3]=((3.64025311623919e-10)+((x1662*x1664))+((x1662*x1667))+((x1661*x1668))+(((0.913)*x1661))+(((-1.0)*x1661*x1665)));
evalcond[4]=((5.46037967435879e-11)+(((-1.0)*x1661*x1666))+(((0.0842375394454885)*x1661))+(((-0.0527124605545115)*x1670))+(((-1.0)*x1666*x1670))+((x1664*x1669))+((px*x1663*x1665*x1669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1672=(px*sj0);
IkReal x1673=((0.222222222222222)*pz);
IkReal x1674=(cj0*px);
IkReal x1675=((0.0349123767798467)*sj3);
IkReal x1676=((0.425)*sj3);
IkReal x1677=((0.547645125958379)*pp);
IkReal x1678=(py*sj0);
IkReal x1679=((0.0511135450894487)*pz);
IkReal x1680=(cj0*py);
CheckValue<IkReal> x1681=IKPowWithIntegerCheck(((0.0683333333333333)+(((-1.0)*x1676))+(((-1.0)*x1673))),-1);
if(!x1681.valid){
continue;
}
CheckValue<IkReal> x1682=IKPowWithIntegerCheck(((-0.0623883333333333)+(((-1.0)*x1672*x1673))+(((-1.0)*x1672*x1676))+((x1673*x1680))+(((0.388025)*sj3))+(((0.202888888888889)*pz))+(((-0.0683333333333333)*x1680))+((x1676*x1680))+(((0.0683333333333333)*x1672))),-1);
if(!x1682.valid){
continue;
}
if( IKabs(((x1681.value)*(((0.552803395399781)+(((-1.0)*x1679))+(((-1.0)*x1677))+(((-1.0)*x1675)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1682.value)*((((x1675*x1678))+((x1678*x1679))+((x1674*x1677))+((x1674*x1675))+((x1674*x1679))+(((-0.552803395399781)*x1678))+(((-0.552803395399781)*x1674))+((x1677*x1678)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1681.value)*(((0.552803395399781)+(((-1.0)*x1679))+(((-1.0)*x1677))+(((-1.0)*x1675))))))+IKsqr(((x1682.value)*((((x1675*x1678))+((x1678*x1679))+((x1674*x1677))+((x1674*x1675))+((x1674*x1679))+(((-0.552803395399781)*x1678))+(((-0.552803395399781)*x1674))+((x1677*x1678))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1681.value)*(((0.552803395399781)+(((-1.0)*x1679))+(((-1.0)*x1677))+(((-1.0)*x1675))))), ((x1682.value)*((((x1675*x1678))+((x1678*x1679))+((x1674*x1677))+((x1674*x1675))+((x1674*x1679))+(((-0.552803395399781)*x1678))+(((-0.552803395399781)*x1674))+((x1677*x1678))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1683=IKcos(j1);
IkReal x1684=IKsin(j1);
IkReal x1685=((0.15)*py);
IkReal x1686=(cj0*py);
IkReal x1687=((0.09)*cj3);
IkReal x1688=((0.15)*px);
IkReal x1689=((0.405)*sj3);
IkReal x1690=((1.0)*px);
IkReal x1691=(sj0*x1683);
IkReal x1692=(cj0*x1684);
IkReal x1693=(sj0*x1684);
IkReal x1694=(cj0*x1683);
evalcond[0]=((((0.075)*x1683))+(((-1.0)*x1683*x1689))+(((-1.0)*cj0*x1690))+(((-1.0)*py*sj0))+((x1683*x1687)));
evalcond[1]=((-0.552803395399781)+(((0.547645125958379)*pp))+(((0.0349123767798467)*sj3))+(((0.0511135450894487)*pz))+(((-0.222222222222222)*pz*x1684))+(((0.0683333333333333)*x1684))+(((-0.425)*sj3*x1684)));
evalcond[2]=((((-1.0)*x1683*x1686))+((px*x1692))+((px*x1691))+((py*x1693))+(((-0.913)*x1683)));
evalcond[3]=((-0.075)+(((-1.0)*x1687))+x1689+(((-1.0)*x1690*x1693))+(((0.913)*x1684))+((px*x1694))+((x1684*x1686))+((py*x1691)));
evalcond[4]=((-0.667969)+(((-1.0)*x1688*x1693))+(((-1.826)*x1686))+(((1.826)*px*sj0))+(((0.13695)*x1684))+(((-1.0)*pp))+(((-0.06)*pz))+((x1685*x1692))+((x1685*x1691))+((x1688*x1694)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1695=(cj0*px);
IkReal x1696=((0.09)*cj3);
IkReal x1697=(py*sj0);
IkReal x1698=((0.405)*sj3);
IkReal x1699=(px*py);
IkReal x1700=(cj0*sj0);
CheckValue<IkReal> x1701=IKPowWithIntegerCheck((((x1695*x1696))+(((-1.0)*x1697*x1698))+(((0.075)*x1697))+(((0.075)*x1695))+((x1696*x1697))+(((-1.0)*x1695*x1698))),-1);
if(!x1701.valid){
continue;
}
CheckValue<IkReal> x1702=IKPowWithIntegerCheck(((0.075)+(((-1.0)*x1698))+x1696),-1);
if(!x1702.valid){
continue;
}
if( IKabs(((x1701.value)*(((((-1.0)*x1699))+(((-1.0)*px*sj0*x1695))+((cj0*py*x1697))+(((2.0)*cj0*py*x1695))+(((0.913)*x1697))+(((0.913)*x1695)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1702.value)*((x1697+x1695)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1701.value)*(((((-1.0)*x1699))+(((-1.0)*px*sj0*x1695))+((cj0*py*x1697))+(((2.0)*cj0*py*x1695))+(((0.913)*x1697))+(((0.913)*x1695))))))+IKsqr(((x1702.value)*((x1697+x1695))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1701.value)*(((((-1.0)*x1699))+(((-1.0)*px*sj0*x1695))+((cj0*py*x1697))+(((2.0)*cj0*py*x1695))+(((0.913)*x1697))+(((0.913)*x1695))))), ((x1702.value)*((x1697+x1695))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1703=IKcos(j1);
IkReal x1704=IKsin(j1);
IkReal x1705=((0.15)*py);
IkReal x1706=(cj0*py);
IkReal x1707=((0.09)*cj3);
IkReal x1708=((0.15)*px);
IkReal x1709=((0.405)*sj3);
IkReal x1710=((1.0)*px);
IkReal x1711=(sj0*x1703);
IkReal x1712=(cj0*x1704);
IkReal x1713=(sj0*x1704);
IkReal x1714=(cj0*x1703);
evalcond[0]=(((x1703*x1707))+(((-1.0)*x1703*x1709))+(((-1.0)*py*sj0))+(((-1.0)*cj0*x1710))+(((0.075)*x1703)));
evalcond[1]=((-0.552803395399781)+(((0.547645125958379)*pp))+(((0.0349123767798467)*sj3))+(((-0.222222222222222)*pz*x1704))+(((0.0511135450894487)*pz))+(((-0.425)*sj3*x1704))+(((0.0683333333333333)*x1704)));
evalcond[2]=(((px*x1711))+((px*x1712))+((py*x1713))+(((-1.0)*x1703*x1706))+(((-0.913)*x1703)));
evalcond[3]=((-0.075)+(((-1.0)*x1710*x1713))+x1709+(((0.913)*x1704))+(((-1.0)*x1707))+((x1704*x1706))+((px*x1714))+((py*x1711)));
evalcond[4]=((-0.667969)+(((1.826)*px*sj0))+(((-1.0)*x1708*x1713))+(((-1.0)*pp))+(((-0.06)*pz))+(((0.13695)*x1704))+((x1705*x1712))+((x1705*x1711))+(((-1.826)*x1706))+((x1708*x1714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1715=IKPowWithIntegerCheck(((0.0683333333333333)+(((-0.222222222222222)*pz))+(((-0.425)*sj3))),-1);
if(!x1715.valid){
continue;
}
CheckValue<IkReal> x1716=IKPowWithIntegerCheck(((0.075)+(((0.09)*cj3))+(((-0.405)*sj3))),-1);
if(!x1716.valid){
continue;
}
if( IKabs(((x1715.value)*(((0.552803395399781)+(((-0.547645125958379)*pp))+(((-0.0511135450894487)*pz))+(((-0.0349123767798467)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1716.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1715.value)*(((0.552803395399781)+(((-0.547645125958379)*pp))+(((-0.0511135450894487)*pz))+(((-0.0349123767798467)*sj3))))))+IKsqr(((x1716.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1715.value)*(((0.552803395399781)+(((-0.547645125958379)*pp))+(((-0.0511135450894487)*pz))+(((-0.0349123767798467)*sj3))))), ((x1716.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1717=IKcos(j1);
IkReal x1718=IKsin(j1);
IkReal x1719=((0.15)*py);
IkReal x1720=(cj0*py);
IkReal x1721=((0.09)*cj3);
IkReal x1722=((0.15)*px);
IkReal x1723=((0.405)*sj3);
IkReal x1724=((1.0)*px);
IkReal x1725=(sj0*x1717);
IkReal x1726=(cj0*x1718);
IkReal x1727=(sj0*x1718);
IkReal x1728=(cj0*x1717);
evalcond[0]=((((-1.0)*cj0*x1724))+((x1717*x1721))+(((-1.0)*x1717*x1723))+(((-1.0)*py*sj0))+(((0.075)*x1717)));
evalcond[1]=((-0.552803395399781)+(((0.547645125958379)*pp))+(((0.0349123767798467)*sj3))+(((-0.425)*sj3*x1718))+(((0.0511135450894487)*pz))+(((-0.222222222222222)*pz*x1718))+(((0.0683333333333333)*x1718)));
evalcond[2]=(((px*x1726))+((px*x1725))+(((-1.0)*x1717*x1720))+((py*x1727))+(((-0.913)*x1717)));
evalcond[3]=((-0.075)+(((0.913)*x1718))+((px*x1728))+x1723+((py*x1725))+((x1718*x1720))+(((-1.0)*x1724*x1727))+(((-1.0)*x1721)));
evalcond[4]=((-0.667969)+(((-1.826)*x1720))+((x1722*x1728))+(((-1.0)*x1722*x1727))+(((1.826)*px*sj0))+(((0.13695)*x1718))+(((-1.0)*pp))+(((-0.06)*pz))+((x1719*x1726))+((x1719*x1725)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1729=(cj0*px);
IkReal x1730=(px*py);
IkReal x1731=(py*sj0);
IkReal x1732=((0.365)*sj2);
IkReal x1733=(cj0*sj0);
IkReal x1734=((0.405)*cj3*sj2);
IkReal x1735=((0.405)*cj2*sj3);
IkReal x1736=((0.09)*cj2*cj3);
IkReal x1737=((0.09)*sj2*sj3);
CheckValue<IkReal> x1738=IKPowWithIntegerCheck(((((-1.0)*x1731*x1736))+((x1731*x1737))+((x1731*x1734))+((x1731*x1732))+((x1731*x1735))+(((0.075)*x1729))+(((0.075)*x1731))+(((-1.0)*x1729*x1736))+((x1729*x1734))+((x1729*x1737))+((x1729*x1735))+((x1729*x1732))),-1);
if(!x1738.valid){
continue;
}
CheckValue<IkReal> x1739=IKPowWithIntegerCheck(((0.075)+x1732+x1735+x1734+x1737+(((-1.0)*x1736))),-1);
if(!x1739.valid){
continue;
}
if( IKabs(((x1738.value)*((((cj0*py*x1731))+(((0.913)*x1729))+(((-1.0)*px*sj0*x1729))+(((0.913)*x1731))+(((2.0)*cj0*py*x1729))+(((-1.0)*x1730)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1739.value)*((x1729+x1731)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1738.value)*((((cj0*py*x1731))+(((0.913)*x1729))+(((-1.0)*px*sj0*x1729))+(((0.913)*x1731))+(((2.0)*cj0*py*x1729))+(((-1.0)*x1730))))))+IKsqr(((x1739.value)*((x1729+x1731))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1738.value)*((((cj0*py*x1731))+(((0.913)*x1729))+(((-1.0)*px*sj0*x1729))+(((0.913)*x1731))+(((2.0)*cj0*py*x1729))+(((-1.0)*x1730))))), ((x1739.value)*((x1729+x1731))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1740=IKsin(j1);
IkReal x1741=IKcos(j1);
IkReal x1742=((0.405)*sj3);
IkReal x1743=(cj0*sj2);
IkReal x1744=((0.15)*cj0);
IkReal x1745=(px*sj0);
IkReal x1746=((0.09)*cj3);
IkReal x1747=((0.365)*sj2);
IkReal x1748=((1.0)*cj2);
IkReal x1749=((1.0)*py);
IkReal x1750=((0.405)*cj3);
IkReal x1751=(cj2*pz);
IkReal x1752=(cj0*px);
IkReal x1753=(cj2*x1740);
IkReal x1754=(px*x1741);
IkReal x1755=(py*x1740);
IkReal x1756=((0.09)*sj2*sj3);
IkReal x1757=(sj2*x1740);
IkReal x1758=(cj2*x1741);
IkReal x1759=(py*sj0*x1741);
evalcond[0]=((((-0.913)*x1741))+((sj0*x1755))+((x1741*x1745))+((x1740*x1752))+(((-1.0)*cj0*x1741*x1749)));
evalcond[1]=((((-1.0)*sj0*x1749))+(((0.075)*x1741))+(((-1.0)*x1746*x1758))+(((-1.0)*x1752))+((x1742*x1758))+((sj2*x1741*x1750))+((x1741*x1756))+((x1741*x1747)));
evalcond[2]=((-0.913)+(((-1.0)*cj0*x1749))+x1745+(((0.075)*x1740))+((x1750*x1757))+(((-1.0)*x1746*x1753))+((x1742*x1753))+((x1740*x1747))+((x1740*x1756)));
evalcond[3]=((-0.365)+x1751+(((-0.09)*sj3))+(((-0.335)*cj2))+(((-0.075)*sj2))+(((0.913)*x1757))+(((-1.0)*x1750))+((x1743*x1755))+((x1743*x1754))+((sj2*x1759))+(((-1.0)*x1745*x1757)));
evalcond[4]=((((-1.0)*x1748*x1759))+x1742+(((-0.913)*x1753))+((x1745*x1753))+(((0.075)*cj2))+(((-1.0)*x1746))+(((-1.0)*x1741*x1748*x1752))+((pz*sj2))+(((-1.0)*cj0*x1748*x1755))+(((-0.335)*sj2)));
evalcond[5]=((-0.912519)+(((0.66649)*x1757))+(((0.15)*x1759))+(((0.13695)*x1740))+(((0.73)*sj2*x1759))+(((-1.826)*cj0*py))+(((-0.73)*x1745*x1757))+((x1744*x1754))+((x1744*x1755))+(((-0.15)*x1740*x1745))+(((1.826)*x1745))+(((0.67)*pz))+(((-1.0)*pp))+(((-0.05475)*sj2))+(((0.73)*x1751))+(((-0.24455)*cj2))+(((0.73)*x1743*x1755))+(((0.73)*x1743*x1754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1760=(cj0*py);
IkReal x1761=(cj2*pz);
IkReal x1762=((0.09)*sj3);
IkReal x1763=((0.405)*cj3);
IkReal x1764=(cj0*px);
IkReal x1765=((0.075)*sj2);
IkReal x1766=(py*sj0);
IkReal x1767=(px*sj0);
IkReal x1768=((0.335)*cj2);
IkReal x1769=(sj2*x1767);
CheckValue<IkReal> x1770 = IKatan2WithCheck(IkReal(((0.333245)+(((-1.0)*x1762*x1767))+(((0.365)*x1760))+(((0.08217)*sj3))+(((-1.0)*x1763*x1767))+(((0.068475)*sj2))+(((-0.365)*x1767))+(((-1.0)*x1765*x1767))+(((0.305855)*cj2))+(((0.369765)*cj3))+(((-1.0)*x1767*x1768))+(((-0.913)*x1761))+((x1761*x1767))+((x1760*x1762))+((x1760*x1763))+((x1760*x1768))+((x1760*x1765))+(((-1.0)*x1760*x1761)))),IkReal(((((-1.0)*x1761*x1766))+(((-1.0)*x1761*x1764))+(((0.365)*x1764))+(((0.365)*x1766))+((x1765*x1766))+((x1764*x1765))+((x1764*x1768))+((x1762*x1764))+((x1762*x1766))+((x1766*x1768))+((x1763*x1764))+((x1763*x1766)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1770.valid){
continue;
}
CheckValue<IkReal> x1771=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj2*(pz*pz)))+(((0.833569)*sj2))+((pp*sj2))+(((1.826)*sj2*x1760))+(((-1.826)*x1769)))),-1);
if(!x1771.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x1770.value)+(((1.5707963267949)*(x1771.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1772=IKsin(j1);
IkReal x1773=IKcos(j1);
IkReal x1774=((0.405)*sj3);
IkReal x1775=(cj0*sj2);
IkReal x1776=((0.15)*cj0);
IkReal x1777=(px*sj0);
IkReal x1778=((0.09)*cj3);
IkReal x1779=((0.365)*sj2);
IkReal x1780=((1.0)*cj2);
IkReal x1781=((1.0)*py);
IkReal x1782=((0.405)*cj3);
IkReal x1783=(cj2*pz);
IkReal x1784=(cj0*px);
IkReal x1785=(cj2*x1772);
IkReal x1786=(px*x1773);
IkReal x1787=(py*x1772);
IkReal x1788=((0.09)*sj2*sj3);
IkReal x1789=(sj2*x1772);
IkReal x1790=(cj2*x1773);
IkReal x1791=(py*sj0*x1773);
evalcond[0]=((((-1.0)*cj0*x1773*x1781))+((sj0*x1787))+((x1772*x1784))+((x1773*x1777))+(((-0.913)*x1773)));
evalcond[1]=((((-1.0)*sj0*x1781))+((sj2*x1773*x1782))+((x1774*x1790))+((x1773*x1779))+(((-1.0)*x1784))+(((0.075)*x1773))+(((-1.0)*x1778*x1790))+((x1773*x1788)));
evalcond[2]=((-0.913)+((x1782*x1789))+(((-1.0)*cj0*x1781))+x1777+((x1774*x1785))+((x1772*x1788))+(((-1.0)*x1778*x1785))+((x1772*x1779))+(((0.075)*x1772)));
evalcond[3]=((-0.365)+(((-1.0)*x1782))+((sj2*x1791))+((x1775*x1786))+((x1775*x1787))+x1783+(((-0.09)*sj3))+(((-1.0)*x1777*x1789))+(((-0.335)*cj2))+(((-0.075)*sj2))+(((0.913)*x1789)));
evalcond[4]=(x1774+((x1777*x1785))+(((-0.913)*x1785))+(((0.075)*cj2))+(((-1.0)*x1778))+((pz*sj2))+(((-1.0)*cj0*x1780*x1787))+(((-1.0)*x1773*x1780*x1784))+(((-1.0)*x1780*x1791))+(((-0.335)*sj2)));
evalcond[5]=((-0.912519)+(((0.15)*x1791))+(((-1.826)*cj0*py))+(((0.67)*pz))+(((0.73)*x1775*x1787))+(((0.73)*x1775*x1786))+(((0.13695)*x1772))+(((-1.0)*pp))+(((0.73)*x1783))+(((0.66649)*x1789))+(((-0.73)*x1777*x1789))+(((0.73)*sj2*x1791))+(((-0.05475)*sj2))+(((-0.15)*x1772*x1777))+(((1.826)*x1777))+((x1776*x1786))+((x1776*x1787))+(((-0.24455)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1792=IKPowWithIntegerCheck(IKsign(((0.075)+(((0.365)*sj2))+(((0.09)*sj2*sj3))+(((-0.09)*cj2*cj3))+(((0.405)*cj2*sj3))+(((0.405)*cj3*sj2)))),-1);
if(!x1792.valid){
continue;
}
CheckValue<IkReal> x1793 = IKatan2WithCheck(IkReal(((0.913)+(((-1.0)*px*sj0))+((cj0*py)))),IkReal((((cj0*px))+((py*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1793.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1792.value)))+(x1793.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1794=IKsin(j1);
IkReal x1795=IKcos(j1);
IkReal x1796=((0.405)*sj3);
IkReal x1797=(cj0*sj2);
IkReal x1798=((0.15)*cj0);
IkReal x1799=(px*sj0);
IkReal x1800=((0.09)*cj3);
IkReal x1801=((0.365)*sj2);
IkReal x1802=((1.0)*cj2);
IkReal x1803=((1.0)*py);
IkReal x1804=((0.405)*cj3);
IkReal x1805=(cj2*pz);
IkReal x1806=(cj0*px);
IkReal x1807=(cj2*x1794);
IkReal x1808=(px*x1795);
IkReal x1809=(py*x1794);
IkReal x1810=((0.09)*sj2*sj3);
IkReal x1811=(sj2*x1794);
IkReal x1812=(cj2*x1795);
IkReal x1813=(py*sj0*x1795);
evalcond[0]=(((sj0*x1809))+((x1794*x1806))+(((-0.913)*x1795))+((x1795*x1799))+(((-1.0)*cj0*x1795*x1803)));
evalcond[1]=(((x1795*x1810))+((x1795*x1801))+(((-1.0)*sj0*x1803))+(((0.075)*x1795))+((sj2*x1795*x1804))+((x1796*x1812))+(((-1.0)*x1800*x1812))+(((-1.0)*x1806)));
evalcond[2]=((-0.913)+((x1794*x1810))+x1799+((x1804*x1811))+(((-1.0)*cj0*x1803))+((x1794*x1801))+(((0.075)*x1794))+(((-1.0)*x1800*x1807))+((x1796*x1807)));
evalcond[3]=((-0.365)+(((0.913)*x1811))+((sj2*x1813))+(((-0.09)*sj3))+(((-0.335)*cj2))+(((-0.075)*sj2))+((x1797*x1808))+((x1797*x1809))+(((-1.0)*x1804))+x1805+(((-1.0)*x1799*x1811)));
evalcond[4]=(((x1799*x1807))+x1796+(((0.075)*cj2))+(((-1.0)*x1800))+(((-1.0)*x1795*x1802*x1806))+(((-1.0)*cj0*x1802*x1809))+((pz*sj2))+(((-0.913)*x1807))+(((-0.335)*sj2))+(((-1.0)*x1802*x1813)));
evalcond[5]=((-0.912519)+(((0.13695)*x1794))+(((-1.826)*cj0*py))+(((-0.73)*x1799*x1811))+((x1798*x1809))+((x1798*x1808))+(((0.15)*x1813))+(((1.826)*x1799))+(((0.67)*pz))+(((-1.0)*pp))+(((0.73)*sj2*x1813))+(((-0.15)*x1794*x1799))+(((-0.05475)*sj2))+(((0.73)*x1797*x1809))+(((0.73)*x1797*x1808))+(((0.66649)*x1811))+(((-0.24455)*cj2))+(((0.73)*x1805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1814=sj2*sj2;
IkReal x1815=py*py;
IkReal x1816=(cj3*py);
IkReal x1817=(py*sj3);
IkReal x1818=(py*sj2);
IkReal x1819=(cj2*py);
IkReal x1820=((3.334276)*x1814);
CheckValue<IkReal> x1823 = IKatan2WithCheck(IkReal(((1.826)*sj2*x1815)),IkReal(((-1.826)*px*x1818)),IKFAST_ATAN2_MAGTHRESH);
if(!x1823.valid){
continue;
}
IkReal x1821=((1.0)*(x1823.value));
if(((((x1815*x1820*(px*px)))+((x1820*(x1815*x1815))))) < -0.00001)
continue;
CheckValue<IkReal> x1824=IKPowWithIntegerCheck(IKabs(IKsqrt((((x1815*x1820*(px*px)))+((x1820*(x1815*x1815)))))),-1);
if(!x1824.valid){
continue;
}
if( (((x1824.value)*(((((-0.06075)*x1816))+(((0.15)*pz*x1819))+(((0.634819)*x1818))+(((-0.0657)*sj2*x1817))+(((-0.05475)*py))+((pp*x1818))+(((-0.29565)*sj2*x1816))+(((-0.0135)*x1817))+(((-0.05025)*x1819))+(((-0.67)*pz*x1818)))))) < -1-IKFAST_SINCOS_THRESH || (((x1824.value)*(((((-0.06075)*x1816))+(((0.15)*pz*x1819))+(((0.634819)*x1818))+(((-0.0657)*sj2*x1817))+(((-0.05475)*py))+((pp*x1818))+(((-0.29565)*sj2*x1816))+(((-0.0135)*x1817))+(((-0.05025)*x1819))+(((-0.67)*pz*x1818)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1822=IKasin(((x1824.value)*(((((-0.06075)*x1816))+(((0.15)*pz*x1819))+(((0.634819)*x1818))+(((-0.0657)*sj2*x1817))+(((-0.05475)*py))+((pp*x1818))+(((-0.29565)*sj2*x1816))+(((-0.0135)*x1817))+(((-0.05025)*x1819))+(((-0.67)*pz*x1818))))));
j0array[0]=((((-1.0)*x1821))+(((-1.0)*x1822)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1821))+x1822);
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1825=IKsin(j0);
IkReal x1826=IKcos(j0);
IkReal x1827=cj2*cj2;
IkReal x1828=sj2*sj2;
IkReal x1829=px*px;
IkReal x1830=(cj3*px);
IkReal x1831=(sj2*sj3);
IkReal x1832=(py*sj2);
IkReal x1833=(px*sj2);
IkReal x1834=((1.0)*pp);
IkReal x1835=(cj2*py);
IkReal x1836=((0.67)*pz);
IkReal x1837=(cj2*px);
IkReal x1838=(px*sj3);
IkReal x1839=((0.73)*pz);
IkReal x1840=((0.15)*pz);
IkReal x1841=((1.826)*x1826);
IkReal x1842=((0.24455)*x1827);
IkReal x1843=(py*x1828);
IkReal x1844=(px*x1828);
IkReal x1845=((1.826)*px*x1825);
IkReal x1846=((1.826)*x1825*x1829);
evalcond[0]=((-0.410369)+(((0.29565)*cj3))+(((0.12105)*cj2*sj3))+(((0.12105)*cj3*sj2))+(((0.25785)*cj2*cj3))+(((-1.0)*x1834))+(((0.05475)*sj2))+(((-0.25785)*x1831))+(((0.0657)*sj3))+x1845+(((0.24455)*cj2))+(((-1.0)*py*x1841)));
evalcond[1]=((((-1.0)*x1833*x1834))+(((0.05475)*px))+(((-1.0)*px*x1832*x1841))+((sj2*x1846))+(((0.0135)*x1838))+(((0.06075)*x1830))+(((0.0657)*px*x1831))+((x1833*x1836))+(((-1.0)*x1837*x1840))+(((0.29565)*sj2*x1830))+(((0.05025)*x1837))+(((-0.634819)*x1833)));
evalcond[2]=((((-1.0)*x1834*x1835))+((py*x1827*x1839))+(((0.06075)*py*sj3))+(((-0.0135)*cj3*py))+((x1832*x1840))+((x1835*x1836))+(((-0.901269)*x1835))+((x1839*x1843))+(((-0.05025)*x1832))+(((-0.0657)*cj3*x1832))+(((-0.24455)*x1843))+(((-1.0)*py*x1835*x1841))+(((-1.0)*py*x1842))+(((0.29565)*py*x1831))+((x1835*x1845)));
evalcond[3]=((((-1.0)*px*x1827*x1839))+((px*x1842))+(((-1.0)*x1836*x1837))+(((-0.06075)*x1838))+(((-1.0)*x1839*x1844))+(((0.0657)*sj2*x1830))+((pp*x1837))+(((-1.0)*cj2*x1846))+(((0.0135)*x1830))+(((0.901269)*x1837))+(((0.24455)*x1844))+(((0.05025)*x1833))+(((-0.29565)*px*x1831))+((px*x1835*x1841))+(((-1.0)*x1833*x1840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
IkReal x1847=(cj3*sj2);
IkReal x1848=(cj2*cj3);
IkReal x1849=(sj2*sj3);
IkReal x1850=(cj2*sj3);
j1eval[0]=((1.0)+(((-1.2)*x1848))+(((4.86666666666667)*sj2))+(((5.4)*x1850))+(((1.2)*x1849))+(((5.4)*x1847)));
j1eval[1]=IKsign(((0.075)+(((0.405)*x1847))+(((0.365)*sj2))+(((0.405)*x1850))+(((-0.09)*x1848))+(((0.09)*x1849))));
j1eval[2]=((IKabs(((0.913)+(((-1.0)*px*sj0))+((cj0*py)))))+(IKabs((((cj0*px))+((py*sj0))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1851=pz*pz;
IkReal x1852=(pp*sj2);
IkReal x1853=(sj2*x1851);
IkReal x1854=(px*sj0*sj2);
IkReal x1855=(cj0*py*sj2);
j1eval[0]=((((-1.19966073594388)*x1853))+sj2+(((1.19966073594388)*x1852))+(((2.19058050383352)*x1855))+(((-2.19058050383352)*x1854)));
j1eval[1]=IKsign(((((0.833569)*sj2))+(((-1.0)*x1853))+x1852+(((-1.826)*x1854))+(((1.826)*x1855))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1856=(cj0*px);
IkReal x1857=(py*sj0);
IkReal x1858=((4.86666666666667)*sj2);
IkReal x1859=((5.4)*cj2*sj3);
IkReal x1860=((5.4)*cj3*sj2);
IkReal x1861=((1.2)*cj2*cj3);
IkReal x1862=((1.2)*sj2*sj3);
j1eval[0]=((((-1.0)*x1856*x1861))+((x1857*x1859))+((x1857*x1858))+((x1856*x1859))+((x1856*x1858))+((x1856*x1862))+((x1856*x1860))+x1856+x1857+((x1857*x1860))+((x1857*x1862))+(((-1.0)*x1857*x1861)));
j1eval[1]=((1.0)+x1860+x1862+x1858+x1859+(((-1.0)*x1861)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=((1.0375)+(((1.9125)*sj3))+(((-1.0)*pz)));
j1eval[1]=((1.0)+(((-1.2)*cj3))+(((5.4)*sj3)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x1863=(cj0*px);
IkReal x1864=((1.2)*cj3);
IkReal x1865=(py*sj0);
IkReal x1866=((5.4)*sj3);
j1eval[0]=((((-1.0)*x1864*x1865))+(((-1.0)*x1863*x1864))+((x1863*x1866))+((x1865*x1866))+x1863+x1865);
j1eval[1]=((1.0)+x1866+(((-1.0)*x1864)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x1867=((5.4)*sj3);
IkReal x1868=((1.2)*cj3);
IkReal x1869=(cj0*py);
IkReal x1870=((5.91456736035049)*sj3);
IkReal x1871=((1.31434830230011)*cj3);
IkReal x1872=(px*sj0);
j1eval[0]=((-1.0)+(((-1.09529025191676)*x1869))+(((-1.0)*x1869*x1870))+(((1.09529025191676)*x1872))+x1868+(((-1.0)*x1871*x1872))+((x1869*x1871))+(((-1.0)*x1867))+((x1870*x1872)));
j1eval[1]=((1.0)+x1867+(((-1.0)*x1868)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.0368941812728069)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-2466757053.71498)+(((1196681824.51447)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2466757053.71498)+(((1196681824.51447)*pp))))+IKsqr(((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2466757053.71498)+(((1196681824.51447)*pp))), ((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1873=IKsin(j1);
IkReal x1874=IKcos(j1);
CheckValue<IkReal> x1883=IKPowWithIntegerCheck(py,-1);
if(!x1883.valid){
continue;
}
IkReal x1875=x1883.value;
IkReal x1876=(py*sj0);
IkReal x1877=((0.0821467688937568)*pp);
IkReal x1878=(cj0*px);
IkReal x1879=(cj0*py);
IkReal x1880=((0.15)*x1874);
IkReal x1881=((1.0)*x1874);
IkReal x1882=(px*x1874);
evalcond[0]=((-1.12887774320343)+(((0.547645125958379)*pp))+(((-4.57636369784904e-10)*x1873)));
evalcond[1]=((((-4.57636369784904e-10)*x1874))+(((-1.0)*x1878))+(((-1.0)*x1876)));
evalcond[2]=((((-1.0)*x1879*x1881))+(((-0.913)*x1874))+((x1873*x1878))+((x1873*x1876))+((sj0*x1882)));
evalcond[3]=((-4.57636369784904e-10)+(((-1.0)*x1876*x1881))+(((-1.0)*x1878*x1881))+(((-0.913)*x1873))+(((-1.0)*x1873*x1879))+((px*sj0*x1873)));
evalcond[4]=((6.86454554677356e-11)+(((-1.0)*x1873*x1877))+((sj0*x1875*x1880*(px*px)))+((x1876*x1880))+(((-1.0)*x1875*x1877*x1882))+(((0.169331661480515)*x1873))+(((0.0323816614805145)*x1875*x1882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.54203636406487)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-1382267358.83679)+(((1504414963.66099)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1382267358.83679)+(((1504414963.66099)*pp))))+IKsqr(((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1382267358.83679)+(((1504414963.66099)*pp))), ((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1884=IKsin(j1);
IkReal x1885=IKcos(j1);
CheckValue<IkReal> x1894=IKPowWithIntegerCheck(py,-1);
if(!x1894.valid){
continue;
}
IkReal x1886=x1894.value;
IkReal x1887=(py*sj0);
IkReal x1888=(cj0*px);
IkReal x1889=(cj0*py);
IkReal x1890=((0.0821467688937568)*pp);
IkReal x1891=((0.15)*x1885);
IkReal x1892=((1.0)*x1885);
IkReal x1893=(px*x1885);
evalcond[0]=((-0.503180306048136)+(((0.547645125958379)*pp))+(((-3.64025311623919e-10)*x1884)));
evalcond[1]=((((-1.0)*x1887))+(((-1.0)*x1888))+(((-3.64025311623919e-10)*x1885)));
evalcond[2]=((((-0.913)*x1885))+(((-1.0)*x1889*x1892))+((sj0*x1893))+((x1884*x1887))+((x1884*x1888)));
evalcond[3]=((-3.64025311623919e-10)+(((-1.0)*x1884*x1889))+(((-0.913)*x1884))+(((-1.0)*x1888*x1892))+(((-1.0)*x1887*x1892))+((px*sj0*x1884)));
evalcond[4]=((5.46037967435879e-11)+(((0.0754770459072204)*x1884))+(((-1.0)*x1886*x1890*x1893))+(((-0.0614729540927796)*x1886*x1893))+((sj0*x1886*x1891*(px*px)))+(((-1.0)*x1884*x1890))+((x1887*x1891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst0=((-0.542483660130719)+(((0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.542483660130719)+sj3+(((-0.522875816993464)*pz)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1895=((0.522875816993464)*pz);
IkReal x1896=((-0.54248366)+x1895);
sj2=0;
cj2=1.0;
j2=0;
sj3=x1896;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
if( (x1896) < -1-IKFAST_SINCOS_THRESH || (x1896) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=IKasin(x1896);
IkReal gconst0=((-0.542483660130719)+x1895);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
j1eval[0]=((-1.60784313666667)+(((-1.0)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((2.35294117647059)*pz)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1897=((0.522875816993464)*pz);
IkReal x1898=((-0.54248366)+x1897);
sj2=0;
cj2=1.0;
j2=0;
sj3=x1898;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
if( (x1898) < -1-IKFAST_SINCOS_THRESH || (x1898) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=IKasin(x1898);
IkReal gconst0=((-0.542483660130719)+x1897);
j1eval[0]=((-1.0)+(((-1.09529025191676)*cj0*py))+(((1.09529025191676)*px*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1899=((0.522875816993464)*pz);
IkReal x1900=((-0.54248366)+x1899);
sj2=0;
cj2=1.0;
j2=0;
sj3=x1900;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
if( (x1900) < -1-IKFAST_SINCOS_THRESH || (x1900) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=IKasin(x1900);
IkReal gconst0=((-0.542483660130719)+x1899);
j1eval[0]=((((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1901=IKsin(j1);
IkReal x1902=IKcos(j1);
IkReal x1903=((0.211764705882353)*pz);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1904=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1905=((0.09)*x1904);
evalcond[0]=((-0.913)*x1902);
evalcond[1]=((-0.1447058823)+(((-0.913)*x1901))+x1903+(((-1.0)*x1905)));
evalcond[2]=((-0.889941176495)+(((1.30235294117647)*pz))+(((0.13695)*x1901))+(((-0.5535)*x1904)));
evalcond[3]=((((-1.0)*x1902*x1905))+(((-0.1447058823)*x1902))+((x1902*x1903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*(py*py)))+(((-9857612267.25082)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1906=IKcos(j1);
IkReal x1907=IKsin(j1);
IkReal x1908=((0.211764705882353)*pz);
IkReal x1909=(py*x1907);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1910=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1911=((0.09)*x1910);
evalcond[0]=((((-0.913)*x1906))+(((-1.0)*py*x1906)));
evalcond[1]=((((-0.1447058823)*x1906))+((x1906*x1908))+(((-1.0)*x1906*x1911)));
evalcond[2]=((-0.1447058823)+(((-0.913)*x1907))+(((-1.0)*x1909))+x1908+(((-1.0)*x1911)));
evalcond[3]=((-0.889941176495)+(((0.15)*x1909))+(((-0.5535)*x1910))+(((1.30235294117647)*pz))+(((0.13695)*x1907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*(py*py)))+(((-9857612267.25082)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1912=IKcos(j1);
IkReal x1913=IKsin(j1);
IkReal x1914=((0.211764705882353)*pz);
IkReal x1915=(py*x1913);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1916=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1917=((0.09)*x1916);
evalcond[0]=((((-0.913)*x1912))+((py*x1912)));
evalcond[1]=(((x1912*x1914))+(((-0.1447058823)*x1912))+(((-1.0)*x1912*x1917)));
evalcond[2]=((-0.1447058823)+(((-0.913)*x1913))+x1915+x1914+(((-1.0)*x1917)));
evalcond[3]=((-0.889941176495)+(((-0.5535)*x1916))+(((-0.15)*x1915))+(((0.13695)*x1913))+(((1.30235294117647)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*(px*px)))+(((-9857612267.25082)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1918=IKcos(j1);
IkReal x1919=IKsin(j1);
IkReal x1920=((0.211764705882353)*pz);
IkReal x1921=(px*x1919);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1922=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1923=((0.09)*x1922);
evalcond[0]=((((-0.913)*x1918))+((px*x1918)));
evalcond[1]=((((-1.0)*x1918*x1923))+((x1918*x1920))+(((-0.1447058823)*x1918)));
evalcond[2]=((-0.1447058823)+(((-0.913)*x1919))+(((-1.0)*x1923))+x1920+x1921);
evalcond[3]=((-0.889941176495)+(((-0.5535)*x1922))+(((0.13695)*x1919))+(((1.30235294117647)*pz))+(((-0.15)*x1921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*(px*px)))+(((-9857612267.25082)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1924=IKcos(j1);
IkReal x1925=IKsin(j1);
IkReal x1926=((0.211764705882353)*pz);
IkReal x1927=(px*x1925);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1928=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1929=((0.09)*x1928);
evalcond[0]=((((-1.0)*px*x1924))+(((-0.913)*x1924)));
evalcond[1]=((((-0.1447058823)*x1924))+(((-1.0)*x1924*x1929))+((x1924*x1926)));
evalcond[2]=((-0.1447058823)+(((-1.0)*x1927))+(((-1.0)*x1929))+x1926+(((-0.913)*x1925)));
evalcond[3]=((-0.889941176495)+(((0.15)*x1927))+(((-0.5535)*x1928))+(((1.30235294117647)*pz))+(((0.13695)*x1925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1930=(cj0*py);
IkReal x1931=((9857612267.25082)*pp);
IkReal x1932=(px*sj0);
IkReal x1933=((13800657174.1511)*pz);
CheckValue<IkReal> x1934=IKPowWithIntegerCheck(((((-1.0)*py*sj0))+(((-1.0)*cj0*px))),-1);
if(!x1934.valid){
continue;
}
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
if( IKabs(((5028062431.62651)+x1933+(((-1.0)*x1931)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1934.value)*(((4590621000.21971)+(((-1.0)*x1930*x1931))+((x1931*x1932))+((x1930*x1933))+(((0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((12599999999.7882)*pz))+(((-1.0)*x1932*x1933))+(((-5028062431.62651)*x1932))+(((5028062431.62651)*x1930))+(((-9000000000.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5028062431.62651)+x1933+(((-1.0)*x1931))))+IKsqr(((x1934.value)*(((4590621000.21971)+(((-1.0)*x1930*x1931))+((x1931*x1932))+((x1930*x1933))+(((0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((12599999999.7882)*pz))+(((-1.0)*x1932*x1933))+(((-5028062431.62651)*x1932))+(((5028062431.62651)*x1930))+(((-9000000000.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((5028062431.62651)+x1933+(((-1.0)*x1931))), ((x1934.value)*(((4590621000.21971)+(((-1.0)*x1930*x1931))+((x1931*x1932))+((x1930*x1933))+(((0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((12599999999.7882)*pz))+(((-1.0)*x1932*x1933))+(((-5028062431.62651)*x1932))+(((5028062431.62651)*x1930))+(((-9000000000.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1935=IKsin(j1);
IkReal x1936=IKcos(j1);
IkReal x1937=((0.15)*py);
IkReal x1938=((0.211764705882353)*pz);
IkReal x1939=((1.0)*py);
IkReal x1940=(sj0*x1936);
IkReal x1941=(cj0*x1935);
IkReal x1942=(sj0*x1935);
IkReal x1943=(cj0*px*x1936);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1944=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1945=((0.09)*x1944);
evalcond[0]=((-0.279336801757028)+(((0.547645125958379)*pp))+(((5.55555555555556e-11)*x1935))+(((-0.766703176341731)*pz)));
evalcond[1]=(((py*x1942))+((px*x1941))+((px*x1940))+(((-1.0)*cj0*x1936*x1939))+(((-0.913)*x1936)));
evalcond[2]=(((x1936*x1938))+(((-0.1447058823)*x1936))+(((-1.0)*x1936*x1945))+(((-1.0)*sj0*x1939))+(((-1.0)*cj0*px)));
evalcond[3]=((-0.1447058823)+(((-1.0)*x1945))+((px*x1942))+x1938+(((-1.0)*x1943))+(((-1.0)*x1939*x1940))+(((-1.0)*x1939*x1941))+(((-0.913)*x1935)));
evalcond[4]=((-0.889941176495)+((x1937*x1941))+((x1937*x1940))+(((0.15)*x1943))+(((1.30235294117647)*pz))+(((-0.15)*px*x1942))+(((0.13695)*x1935))+(((-0.5535)*x1944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1946=((13800657174.1511)*pz);
IkReal x1947=(py*sj0);
IkReal x1948=(cj0*px);
IkReal x1949=((9857612267.25082)*pp);
CheckValue<IkReal> x1950=IKPowWithIntegerCheck(((-0.913)+((px*sj0))+(((-1.0)*cj0*py))),-1);
if(!x1950.valid){
continue;
}
if( IKabs(((5028062431.62651)+(((-1.0)*x1949))+x1946)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1950.value)*(((((-1.0)*x1946*x1947))+(((-1.0)*x1946*x1948))+((x1948*x1949))+(((-5028062431.62651)*x1947))+(((-5028062431.62651)*x1948))+((x1947*x1949)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5028062431.62651)+(((-1.0)*x1949))+x1946))+IKsqr(((x1950.value)*(((((-1.0)*x1946*x1947))+(((-1.0)*x1946*x1948))+((x1948*x1949))+(((-5028062431.62651)*x1947))+(((-5028062431.62651)*x1948))+((x1947*x1949))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((5028062431.62651)+(((-1.0)*x1949))+x1946), ((x1950.value)*(((((-1.0)*x1946*x1947))+(((-1.0)*x1946*x1948))+((x1948*x1949))+(((-5028062431.62651)*x1947))+(((-5028062431.62651)*x1948))+((x1947*x1949))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1951=IKsin(j1);
IkReal x1952=IKcos(j1);
IkReal x1953=((0.15)*py);
IkReal x1954=((0.211764705882353)*pz);
IkReal x1955=((1.0)*py);
IkReal x1956=(sj0*x1952);
IkReal x1957=(cj0*x1951);
IkReal x1958=(sj0*x1951);
IkReal x1959=(cj0*px*x1952);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1960=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1961=((0.09)*x1960);
evalcond[0]=((-0.279336801757028)+(((0.547645125958379)*pp))+(((-0.766703176341731)*pz))+(((5.55555555555556e-11)*x1951)));
evalcond[1]=((((-0.913)*x1952))+((py*x1958))+((px*x1957))+((px*x1956))+(((-1.0)*cj0*x1952*x1955)));
evalcond[2]=((((-1.0)*x1952*x1961))+((x1952*x1954))+(((-1.0)*sj0*x1955))+(((-0.1447058823)*x1952))+(((-1.0)*cj0*px)));
evalcond[3]=((-0.1447058823)+(((-0.913)*x1951))+(((-1.0)*x1961))+((px*x1958))+x1954+(((-1.0)*x1959))+(((-1.0)*x1955*x1957))+(((-1.0)*x1955*x1956)));
evalcond[4]=((-0.889941176495)+(((0.15)*x1959))+(((0.13695)*x1951))+(((1.30235294117647)*pz))+((x1953*x1956))+((x1953*x1957))+(((-0.15)*px*x1958))+(((-0.5535)*x1960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x1962=IKPowWithIntegerCheck(((-0.1447058823)+(((-0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((0.211764705882353)*pz))),-1);
if(!x1962.valid){
continue;
}
if( IKabs(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1962.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp))))+IKsqr(((x1962.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp))), ((x1962.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1963=IKsin(j1);
IkReal x1964=IKcos(j1);
IkReal x1965=((0.15)*py);
IkReal x1966=((0.211764705882353)*pz);
IkReal x1967=((1.0)*py);
IkReal x1968=(sj0*x1964);
IkReal x1969=(cj0*x1963);
IkReal x1970=(sj0*x1963);
IkReal x1971=(cj0*px*x1964);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1972=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1973=((0.09)*x1972);
evalcond[0]=((-0.279336801757028)+(((0.547645125958379)*pp))+(((-0.766703176341731)*pz))+(((5.55555555555556e-11)*x1963)));
evalcond[1]=((((-0.913)*x1964))+((px*x1968))+((px*x1969))+((py*x1970))+(((-1.0)*cj0*x1964*x1967)));
evalcond[2]=((((-0.1447058823)*x1964))+(((-1.0)*x1964*x1973))+((x1964*x1966))+(((-1.0)*sj0*x1967))+(((-1.0)*cj0*px)));
evalcond[3]=((-0.1447058823)+(((-0.913)*x1963))+((px*x1970))+(((-1.0)*x1973))+(((-1.0)*x1971))+x1966+(((-1.0)*x1967*x1968))+(((-1.0)*x1967*x1969)));
evalcond[4]=((-0.889941176495)+(((0.15)*x1971))+(((1.30235294117647)*pz))+(((0.13695)*x1963))+((x1965*x1968))+((x1965*x1969))+(((-0.15)*px*x1970))+(((-0.5535)*x1972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst0=((-0.542483660130719)+(((0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.542483660130719)+sj3+(((-0.522875816993464)*pz)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1974=((0.522875816993464)*pz);
IkReal x1975=((-0.54248366)+x1974);
sj2=0;
cj2=1.0;
j2=0;
sj3=x1975;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))))));
if( (((0.54248366)+(((-1.0)*x1974)))) < -1-IKFAST_SINCOS_THRESH || (((0.54248366)+(((-1.0)*x1974)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(((1.0)*(IKasin(((0.54248366)+(((-1.0)*x1974))))))));
IkReal gconst0=((-0.542483660130719)+x1974);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
j1eval[0]=((-1.60784313666667)+(((2.35294117647059)*pz))+(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1976=((0.522875816993464)*pz);
IkReal x1977=((-0.54248366)+x1976);
sj2=0;
cj2=1.0;
j2=0;
sj3=x1977;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))))));
if( (((0.54248366)+(((-1.0)*x1976)))) < -1-IKFAST_SINCOS_THRESH || (((0.54248366)+(((-1.0)*x1976)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(((1.0)*(IKasin(((0.54248366)+(((-1.0)*x1976))))))));
IkReal gconst0=((-0.542483660130719)+x1976);
j1eval[0]=((-1.0)+(((-1.09529025191676)*cj0*py))+(((1.09529025191676)*px*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1978=((0.522875816993464)*pz);
IkReal x1979=((-0.54248366)+x1978);
sj2=0;
cj2=1.0;
j2=0;
sj3=x1979;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))))));
if( (((0.54248366)+(((-1.0)*x1978)))) < -1-IKFAST_SINCOS_THRESH || (((0.54248366)+(((-1.0)*x1978)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(((1.0)*(IKasin(((0.54248366)+(((-1.0)*x1978))))))));
IkReal gconst0=((-0.542483660130719)+x1978);
j1eval[0]=((((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1980=IKsin(j1);
IkReal x1981=IKcos(j1);
IkReal x1982=((0.211764705882353)*pz);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1983=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1984=((0.09)*x1983);
evalcond[0]=((-0.913)*x1981);
evalcond[1]=((-0.1447058823)+(((-0.913)*x1980))+x1984+x1982);
evalcond[2]=((-0.889941176495)+(((0.5535)*x1983))+(((0.13695)*x1980))+(((1.30235294117647)*pz)));
evalcond[3]=(((x1981*x1982))+((x1981*x1984))+(((-0.1447058823)*x1981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*(py*py)))+(((-9857612267.25082)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1985=IKcos(j1);
IkReal x1986=IKsin(j1);
IkReal x1987=((0.211764705882353)*pz);
IkReal x1988=(py*x1986);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1989=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1990=((0.09)*x1989);
evalcond[0]=((((-0.913)*x1985))+(((-1.0)*py*x1985)));
evalcond[1]=((((-0.1447058823)*x1985))+((x1985*x1990))+((x1985*x1987)));
evalcond[2]=((-0.1447058823)+(((-0.913)*x1986))+x1987+x1990+(((-1.0)*x1988)));
evalcond[3]=((-0.889941176495)+(((0.5535)*x1989))+(((0.13695)*x1986))+(((0.15)*x1988))+(((1.30235294117647)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*(py*py)))+(((-9857612267.25082)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1991=IKcos(j1);
IkReal x1992=IKsin(j1);
IkReal x1993=((0.211764705882353)*pz);
IkReal x1994=(py*x1992);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1995=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1996=((0.09)*x1995);
evalcond[0]=((((-0.913)*x1991))+((py*x1991)));
evalcond[1]=((((-0.1447058823)*x1991))+((x1991*x1996))+((x1991*x1993)));
evalcond[2]=((-0.1447058823)+(((-0.913)*x1992))+x1993+x1994+x1996);
evalcond[3]=((-0.889941176495)+(((0.13695)*x1992))+(((0.5535)*x1995))+(((1.30235294117647)*pz))+(((-0.15)*x1994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*(px*px)))+(((-9857612267.25082)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1997=IKcos(j1);
IkReal x1998=IKsin(j1);
IkReal x1999=((0.211764705882353)*pz);
IkReal x2000=(px*x1998);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2001=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2002=((0.09)*x2001);
evalcond[0]=((((-0.913)*x1997))+((px*x1997)));
evalcond[1]=(((x1997*x2002))+(((-0.1447058823)*x1997))+((x1997*x1999)));
evalcond[2]=((-0.1447058823)+x2002+x2000+(((-0.913)*x1998))+x1999);
evalcond[3]=((-0.889941176495)+(((0.13695)*x1998))+(((-0.15)*x2000))+(((1.30235294117647)*pz))+(((0.5535)*x2001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*(px*px)))+(((-9857612267.25082)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2003=IKcos(j1);
IkReal x2004=IKsin(j1);
IkReal x2005=((0.211764705882353)*pz);
IkReal x2006=(px*x2004);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2007=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2008=((0.09)*x2007);
evalcond[0]=((((-0.913)*x2003))+(((-1.0)*px*x2003)));
evalcond[1]=(((x2003*x2005))+((x2003*x2008))+(((-0.1447058823)*x2003)));
evalcond[2]=((-0.1447058823)+x2005+x2008+(((-0.913)*x2004))+(((-1.0)*x2006)));
evalcond[3]=((-0.889941176495)+(((1.30235294117647)*pz))+(((0.5535)*x2007))+(((0.13695)*x2004))+(((0.15)*x2006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2009=((9857612267.25082)*pp);
IkReal x2010=(cj0*py);
IkReal x2011=(px*sj0);
IkReal x2012=((13800657174.1511)*pz);
CheckValue<IkReal> x2013=IKPowWithIntegerCheck(((((-1.0)*py*sj0))+(((-1.0)*cj0*px))),-1);
if(!x2013.valid){
continue;
}
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
if( IKabs(((5028062431.62651)+x2012+(((-1.0)*x2009)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2013.value)*(((4590621000.21971)+(((-1.0)*x2009*x2010))+(((5028062431.62651)*x2010))+(((-5028062431.62651)*x2011))+(((12599999999.7882)*pz))+((x2010*x2012))+(((-1.0)*x2011*x2012))+(((-0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+((x2009*x2011))+(((-9000000000.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5028062431.62651)+x2012+(((-1.0)*x2009))))+IKsqr(((x2013.value)*(((4590621000.21971)+(((-1.0)*x2009*x2010))+(((5028062431.62651)*x2010))+(((-5028062431.62651)*x2011))+(((12599999999.7882)*pz))+((x2010*x2012))+(((-1.0)*x2011*x2012))+(((-0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+((x2009*x2011))+(((-9000000000.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((5028062431.62651)+x2012+(((-1.0)*x2009))), ((x2013.value)*(((4590621000.21971)+(((-1.0)*x2009*x2010))+(((5028062431.62651)*x2010))+(((-5028062431.62651)*x2011))+(((12599999999.7882)*pz))+((x2010*x2012))+(((-1.0)*x2011*x2012))+(((-0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+((x2009*x2011))+(((-9000000000.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2014=IKsin(j1);
IkReal x2015=IKcos(j1);
IkReal x2016=((0.15)*py);
IkReal x2017=((0.211764705882353)*pz);
IkReal x2018=((1.0)*py);
IkReal x2019=(sj0*x2015);
IkReal x2020=(cj0*x2014);
IkReal x2021=(sj0*x2014);
IkReal x2022=(cj0*px*x2015);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2023=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2024=((0.09)*x2023);
evalcond[0]=((-0.279336801757028)+(((0.547645125958379)*pp))+(((-0.766703176341731)*pz))+(((5.55555555555556e-11)*x2014)));
evalcond[1]=(((px*x2019))+(((-1.0)*cj0*x2015*x2018))+(((-0.913)*x2015))+((px*x2020))+((py*x2021)));
evalcond[2]=(((x2015*x2017))+(((-1.0)*sj0*x2018))+(((-0.1447058823)*x2015))+(((-1.0)*cj0*px))+((x2015*x2024)));
evalcond[3]=((-0.1447058823)+x2024+x2017+(((-0.913)*x2014))+((px*x2021))+(((-1.0)*x2022))+(((-1.0)*x2018*x2020))+(((-1.0)*x2018*x2019)));
evalcond[4]=((-0.889941176495)+((x2016*x2019))+(((1.30235294117647)*pz))+(((0.13695)*x2014))+(((0.5535)*x2023))+((x2016*x2020))+(((0.15)*x2022))+(((-0.15)*px*x2021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2025=((13800657174.1511)*pz);
IkReal x2026=(py*sj0);
IkReal x2027=(cj0*px);
IkReal x2028=((9857612267.25082)*pp);
CheckValue<IkReal> x2029=IKPowWithIntegerCheck(((-0.913)+((px*sj0))+(((-1.0)*cj0*py))),-1);
if(!x2029.valid){
continue;
}
if( IKabs(((5028062431.62651)+x2025+(((-1.0)*x2028)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2029.value)*(((((-5028062431.62651)*x2027))+(((-5028062431.62651)*x2026))+((x2026*x2028))+(((-1.0)*x2025*x2026))+(((-1.0)*x2025*x2027))+((x2027*x2028)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5028062431.62651)+x2025+(((-1.0)*x2028))))+IKsqr(((x2029.value)*(((((-5028062431.62651)*x2027))+(((-5028062431.62651)*x2026))+((x2026*x2028))+(((-1.0)*x2025*x2026))+(((-1.0)*x2025*x2027))+((x2027*x2028))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((5028062431.62651)+x2025+(((-1.0)*x2028))), ((x2029.value)*(((((-5028062431.62651)*x2027))+(((-5028062431.62651)*x2026))+((x2026*x2028))+(((-1.0)*x2025*x2026))+(((-1.0)*x2025*x2027))+((x2027*x2028))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2030=IKsin(j1);
IkReal x2031=IKcos(j1);
IkReal x2032=((0.15)*py);
IkReal x2033=((0.211764705882353)*pz);
IkReal x2034=((1.0)*py);
IkReal x2035=(sj0*x2031);
IkReal x2036=(cj0*x2030);
IkReal x2037=(sj0*x2030);
IkReal x2038=(cj0*px*x2031);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2039=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2040=((0.09)*x2039);
evalcond[0]=((-0.279336801757028)+(((0.547645125958379)*pp))+(((-0.766703176341731)*pz))+(((5.55555555555556e-11)*x2030)));
evalcond[1]=((((-0.913)*x2031))+((px*x2035))+((px*x2036))+((py*x2037))+(((-1.0)*cj0*x2031*x2034)));
evalcond[2]=((((-0.1447058823)*x2031))+((x2031*x2033))+((x2031*x2040))+(((-1.0)*sj0*x2034))+(((-1.0)*cj0*px)));
evalcond[3]=((-0.1447058823)+x2040+x2033+(((-0.913)*x2030))+((px*x2037))+(((-1.0)*x2038))+(((-1.0)*x2034*x2035))+(((-1.0)*x2034*x2036)));
evalcond[4]=((-0.889941176495)+((x2032*x2035))+((x2032*x2036))+(((1.30235294117647)*pz))+(((-0.15)*px*x2037))+(((0.5535)*x2039))+(((0.13695)*x2030))+(((0.15)*x2038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x2041=IKPowWithIntegerCheck(((-0.1447058823)+(((0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((0.211764705882353)*pz))),-1);
if(!x2041.valid){
continue;
}
if( IKabs(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2041.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp))))+IKsqr(((x2041.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp))), ((x2041.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2042=IKsin(j1);
IkReal x2043=IKcos(j1);
IkReal x2044=((0.15)*py);
IkReal x2045=((0.211764705882353)*pz);
IkReal x2046=((1.0)*py);
IkReal x2047=(sj0*x2043);
IkReal x2048=(cj0*x2042);
IkReal x2049=(sj0*x2042);
IkReal x2050=(cj0*px*x2043);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2051=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2052=((0.09)*x2051);
evalcond[0]=((-0.279336801757028)+(((0.547645125958379)*pp))+(((-0.766703176341731)*pz))+(((5.55555555555556e-11)*x2042)));
evalcond[1]=((((-0.913)*x2043))+((py*x2049))+(((-1.0)*cj0*x2043*x2046))+((px*x2048))+((px*x2047)));
evalcond[2]=((((-1.0)*sj0*x2046))+((x2043*x2045))+((x2043*x2052))+(((-0.1447058823)*x2043))+(((-1.0)*cj0*px)));
evalcond[3]=((-0.1447058823)+(((-0.913)*x2042))+x2045+x2052+(((-1.0)*x2050))+((px*x2049))+(((-1.0)*x2046*x2048))+(((-1.0)*x2046*x2047)));
evalcond[4]=((-0.889941176495)+(((0.5535)*x2051))+(((1.30235294117647)*pz))+(((0.15)*x2050))+((x2044*x2048))+((x2044*x2047))+(((0.13695)*x2042))+(((-0.15)*px*x2049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2053=cj0*cj0;
IkReal x2054=py*py;
IkReal x2055=(cj0*px);
IkReal x2056=((0.09)*cj3);
IkReal x2057=(py*sj0);
IkReal x2058=(cj0*py);
IkReal x2059=(px*sj0);
IkReal x2060=((0.405)*sj3);
CheckValue<IkReal> x2061=IKPowWithIntegerCheck(((-0.068475)+(((-0.075)*x2058))+(((-1.0)*x2058*x2060))+(((-0.369765)*sj3))+(((0.075)*x2059))+((x2059*x2060))+(((-1.0)*x2056*x2059))+((x2056*x2058))+(((0.08217)*cj3))),-1);
if(!x2061.valid){
continue;
}
CheckValue<IkReal> x2062=IKPowWithIntegerCheck(((0.075)+x2060+(((-1.0)*x2056))),-1);
if(!x2062.valid){
continue;
}
if( IKabs(((x2061.value)*(((-0.16965)+(((-1.0)*x2053*x2054))+x2054+(((0.155925)*(cj3*cj3)))+(((2.0)*x2055*x2057))+((x2053*(px*px)))+(((0.0135)*cj3))+(((-0.06075)*sj3))+(((0.0729)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2062.value)*((x2055+x2057)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2061.value)*(((-0.16965)+(((-1.0)*x2053*x2054))+x2054+(((0.155925)*(cj3*cj3)))+(((2.0)*x2055*x2057))+((x2053*(px*px)))+(((0.0135)*cj3))+(((-0.06075)*sj3))+(((0.0729)*cj3*sj3))))))+IKsqr(((x2062.value)*((x2055+x2057))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2061.value)*(((-0.16965)+(((-1.0)*x2053*x2054))+x2054+(((0.155925)*(cj3*cj3)))+(((2.0)*x2055*x2057))+((x2053*(px*px)))+(((0.0135)*cj3))+(((-0.06075)*sj3))+(((0.0729)*cj3*sj3))))), ((x2062.value)*((x2055+x2057))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2063=IKcos(j1);
IkReal x2064=IKsin(j1);
IkReal x2065=((0.15)*py);
IkReal x2066=((0.09)*cj3);
IkReal x2067=((1.0)*py);
IkReal x2068=((0.405)*sj3);
IkReal x2069=(sj0*x2063);
IkReal x2070=(cj0*x2064);
IkReal x2071=(sj0*x2064);
IkReal x2072=(cj0*px*x2063);
evalcond[0]=((((-1.0)*sj0*x2067))+(((-1.0)*x2063*x2066))+(((0.075)*x2063))+((x2063*x2068))+(((-1.0)*cj0*px)));
evalcond[1]=((-0.298276195691858)+(((0.547645125958379)*pp))+(((0.230555555555556)*x2064))+(((-0.0349123767798467)*sj3))+(((-0.222222222222222)*pz*x2064))+(((0.425)*sj3*x2064))+(((-0.748448338809785)*pz)));
evalcond[2]=((((-0.913)*x2063))+(((-1.0)*cj0*x2063*x2067))+((px*x2069))+((py*x2071))+((px*x2070)));
evalcond[3]=((0.075)+(((-0.913)*x2064))+x2068+(((-1.0)*x2066))+(((-1.0)*x2072))+((px*x2071))+(((-1.0)*x2067*x2070))+(((-1.0)*x2067*x2069)));
evalcond[4]=((-1.157069)+(((-0.15)*px*x2071))+(((-1.826)*cj0*py))+(((1.826)*px*sj0))+(((-1.0)*pp))+(((0.15)*x2072))+(((1.4)*pz))+(((0.13695)*x2064))+((x2065*x2070))+((x2065*x2069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2073=(cj0*px);
IkReal x2074=((0.09)*cj3);
IkReal x2075=(py*sj0);
IkReal x2076=((0.405)*sj3);
IkReal x2077=(px*py);
IkReal x2078=(cj0*sj0);
CheckValue<IkReal> x2079=IKPowWithIntegerCheck((((x2075*x2076))+(((-1.0)*x2074*x2075))+(((0.075)*x2073))+(((0.075)*x2075))+(((-1.0)*x2073*x2074))+((x2073*x2076))),-1);
if(!x2079.valid){
continue;
}
CheckValue<IkReal> x2080=IKPowWithIntegerCheck(((0.075)+x2076+(((-1.0)*x2074))),-1);
if(!x2080.valid){
continue;
}
if( IKabs(((x2079.value)*(((((0.913)*x2073))+(((0.913)*x2075))+(((-1.0)*x2077))+((cj0*py*x2075))+(((-1.0)*px*sj0*x2073))+(((2.0)*cj0*py*x2073)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2080.value)*((x2073+x2075)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2079.value)*(((((0.913)*x2073))+(((0.913)*x2075))+(((-1.0)*x2077))+((cj0*py*x2075))+(((-1.0)*px*sj0*x2073))+(((2.0)*cj0*py*x2073))))))+IKsqr(((x2080.value)*((x2073+x2075))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2079.value)*(((((0.913)*x2073))+(((0.913)*x2075))+(((-1.0)*x2077))+((cj0*py*x2075))+(((-1.0)*px*sj0*x2073))+(((2.0)*cj0*py*x2073))))), ((x2080.value)*((x2073+x2075))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2081=IKcos(j1);
IkReal x2082=IKsin(j1);
IkReal x2083=((0.15)*py);
IkReal x2084=((0.09)*cj3);
IkReal x2085=((1.0)*py);
IkReal x2086=((0.405)*sj3);
IkReal x2087=(sj0*x2081);
IkReal x2088=(cj0*x2082);
IkReal x2089=(sj0*x2082);
IkReal x2090=(cj0*px*x2081);
evalcond[0]=(((x2081*x2086))+(((-1.0)*x2081*x2084))+(((0.075)*x2081))+(((-1.0)*sj0*x2085))+(((-1.0)*cj0*px)));
evalcond[1]=((-0.298276195691858)+(((0.230555555555556)*x2082))+(((0.425)*sj3*x2082))+(((0.547645125958379)*pp))+(((-0.222222222222222)*pz*x2082))+(((-0.0349123767798467)*sj3))+(((-0.748448338809785)*pz)));
evalcond[2]=(((px*x2087))+((px*x2088))+((py*x2089))+(((-1.0)*cj0*x2081*x2085))+(((-0.913)*x2081)));
evalcond[3]=((0.075)+((px*x2089))+x2086+(((-1.0)*x2085*x2088))+(((-1.0)*x2085*x2087))+(((-1.0)*x2084))+(((-0.913)*x2082))+(((-1.0)*x2090)));
evalcond[4]=((-1.157069)+(((-1.826)*cj0*py))+(((1.826)*px*sj0))+(((-1.0)*pp))+((x2083*x2087))+((x2083*x2088))+(((-0.15)*px*x2089))+(((1.4)*pz))+(((0.15)*x2090))+(((0.13695)*x2082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2091=IKPowWithIntegerCheck(((0.230555555555556)+(((-0.222222222222222)*pz))+(((0.425)*sj3))),-1);
if(!x2091.valid){
continue;
}
CheckValue<IkReal> x2092=IKPowWithIntegerCheck(((0.075)+(((0.405)*sj3))+(((-0.09)*cj3))),-1);
if(!x2092.valid){
continue;
}
if( IKabs(((x2091.value)*(((0.298276195691858)+(((0.0349123767798467)*sj3))+(((-0.547645125958379)*pp))+(((0.748448338809785)*pz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2092.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2091.value)*(((0.298276195691858)+(((0.0349123767798467)*sj3))+(((-0.547645125958379)*pp))+(((0.748448338809785)*pz))))))+IKsqr(((x2092.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2091.value)*(((0.298276195691858)+(((0.0349123767798467)*sj3))+(((-0.547645125958379)*pp))+(((0.748448338809785)*pz))))), ((x2092.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2093=IKcos(j1);
IkReal x2094=IKsin(j1);
IkReal x2095=((0.15)*py);
IkReal x2096=((0.09)*cj3);
IkReal x2097=((1.0)*py);
IkReal x2098=((0.405)*sj3);
IkReal x2099=(sj0*x2093);
IkReal x2100=(cj0*x2094);
IkReal x2101=(sj0*x2094);
IkReal x2102=(cj0*px*x2093);
evalcond[0]=((((0.075)*x2093))+(((-1.0)*sj0*x2097))+(((-1.0)*x2093*x2096))+((x2093*x2098))+(((-1.0)*cj0*px)));
evalcond[1]=((-0.298276195691858)+(((0.547645125958379)*pp))+(((0.425)*sj3*x2094))+(((0.230555555555556)*x2094))+(((-0.0349123767798467)*sj3))+(((-0.222222222222222)*pz*x2094))+(((-0.748448338809785)*pz)));
evalcond[2]=(((px*x2100))+((px*x2099))+((py*x2101))+(((-0.913)*x2093))+(((-1.0)*cj0*x2093*x2097)));
evalcond[3]=((0.075)+((px*x2101))+(((-1.0)*x2096))+(((-1.0)*x2097*x2099))+x2098+(((-1.0)*x2097*x2100))+(((-0.913)*x2094))+(((-1.0)*x2102)));
evalcond[4]=((-1.157069)+(((-1.826)*cj0*py))+(((0.15)*x2102))+(((1.826)*px*sj0))+(((-0.15)*px*x2101))+(((-1.0)*pp))+(((0.13695)*x2094))+(((1.4)*pz))+((x2095*x2100))+((x2095*x2099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=((1.0)+(((-3.2520325203252)*pz))+(((-6.21951219512195)*sj3)));
j1eval[1]=((1.0)+(((1.2)*cj3))+(((-5.4)*sj3)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x2103=(cj0*px);
IkReal x2104=((1.2)*cj3);
IkReal x2105=(py*sj0);
IkReal x2106=((5.4)*sj3);
j1eval[0]=((((-1.0)*x2103*x2106))+((x2104*x2105))+((x2103*x2104))+x2103+x2105+(((-1.0)*x2105*x2106)));
j1eval[1]=((1.0)+(((-1.0)*x2106))+x2104);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x2107=((6.21951219512195)*sj3);
IkReal x2108=((3.2520325203252)*pz);
IkReal x2109=(px*sj0);
IkReal x2110=((3.56191951842848)*pz);
IkReal x2111=(cj0*py);
IkReal x2112=((6.81217107899447)*sj3);
IkReal x2113=(x2108+x2107);
j1eval[0]=((1.0)+(((-1.0)*x2113)));
j1eval[1]=((-1.0)+(((-1.09529025191676)*x2111))+x2113+((x2111*x2112))+((x2110*x2111))+(((-1.0)*x2109*x2110))+(((-1.0)*x2109*x2112))+(((1.09529025191676)*x2109)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal gconst1=((0.16078431372549)+(((-0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.16078431372549)+sj3+(((0.522875816993464)*pz)))))+(IKabs(((-1.0)+(IKsign(cj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2114=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x2114)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
if( (((-0.160784313599385)+x2114)) < -1-IKFAST_SINCOS_THRESH || (((-0.160784313599385)+x2114)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((-1.0)*(IKasin(((-0.160784313599385)+x2114))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x2114)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
j1eval[0]=((1.0)+(((21.4285713178271)*pz))+(((9.10714281007653)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2115=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x2115)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
if( (((-0.160784313599385)+x2115)) < -1-IKFAST_SINCOS_THRESH || (((-0.160784313599385)+x2115)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((-1.0)*(IKasin(((-0.160784313599385)+x2115))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x2115)));
j1eval[0]=((-1.0)+(((-1.09529025191676)*cj0*py))+(((1.09529025191676)*px*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2116=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x2116)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
if( (((-0.160784313599385)+x2116)) < -1-IKFAST_SINCOS_THRESH || (((-0.160784313599385)+x2116)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((-1.0)*(IKasin(((-0.160784313599385)+x2116))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x2116)));
j1eval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((10209765255.3315)+(((-10218256626.506)*(pz*pz)))+(((-613095397.590361)*pz)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2117=IKsin(j1);
IkReal x2118=IKcos(j1);
IkReal x2119=((0.211764705882353)*pz);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2120=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2121=((0.09)*x2120);
evalcond[0]=((-0.913)*x2118);
evalcond[1]=((-0.00988235299224913)+(((0.913)*x2117))+(((-1.0)*x2121))+(((-1.0)*x2119)));
evalcond[2]=((-0.00415058824227405)+(((-0.0378)*x2120))+(((-0.0889411764705882)*pz))+(((0.13695)*x2117)));
evalcond[3]=(((x2118*x2119))+((x2118*x2121))+(((0.00988235299224913)*x2118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((10209765255.3315)+(((-10218256626.506)*(pz*pz)))+(((-613095397.590361)*pz))+(((-10218256626.506)*(py*py))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2122=IKcos(j1);
IkReal x2123=IKsin(j1);
IkReal x2124=((0.211764705882353)*pz);
IkReal x2125=(py*x2123);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2126=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2127=((0.09)*x2126);
evalcond[0]=((((-0.913)*x2122))+(((-1.0)*py*x2122)));
evalcond[1]=(((x2122*x2124))+((x2122*x2127))+(((0.00988235299224913)*x2122)));
evalcond[2]=((-0.00988235299224913)+x2125+(((-1.0)*x2127))+(((-1.0)*x2124))+(((0.913)*x2123)));
evalcond[3]=((-0.00415058824227405)+(((0.15)*x2125))+(((0.13695)*x2123))+(((-0.0378)*x2126))+(((-0.0889411764705882)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((10209765255.3315)+(((-10218256626.506)*(pz*pz)))+(((-613095397.590361)*pz))+(((-10218256626.506)*(py*py))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2128=IKcos(j1);
IkReal x2129=IKsin(j1);
IkReal x2130=((0.211764705882353)*pz);
IkReal x2131=(py*x2129);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2132=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2133=((0.09)*x2132);
evalcond[0]=((((-0.913)*x2128))+((py*x2128)));
evalcond[1]=(((x2128*x2130))+((x2128*x2133))+(((0.00988235299224913)*x2128)));
evalcond[2]=((-0.00988235299224913)+(((-1.0)*x2133))+(((-1.0)*x2130))+(((-1.0)*x2131))+(((0.913)*x2129)));
evalcond[3]=((-0.00415058824227405)+(((0.13695)*x2129))+(((-0.0378)*x2132))+(((-0.0889411764705882)*pz))+(((-0.15)*x2131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((10209765255.3315)+(((-10218256626.506)*(pz*pz)))+(((-10218256626.506)*(px*px)))+(((-613095397.590361)*pz)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2134=IKcos(j1);
IkReal x2135=IKsin(j1);
IkReal x2136=((0.211764705882353)*pz);
IkReal x2137=(px*x2135);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2138=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2139=((0.09)*x2138);
evalcond[0]=((((-0.913)*x2134))+((px*x2134)));
evalcond[1]=(((x2134*x2139))+((x2134*x2136))+(((0.00988235299224913)*x2134)));
evalcond[2]=((-0.00988235299224913)+(((-1.0)*x2136))+(((-1.0)*x2139))+(((0.913)*x2135))+(((-1.0)*x2137)));
evalcond[3]=((-0.00415058824227405)+(((-0.0378)*x2138))+(((0.13695)*x2135))+(((-0.0889411764705882)*pz))+(((-0.15)*x2137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((10209765255.3315)+(((-10218256626.506)*(pz*pz)))+(((-10218256626.506)*(px*px)))+(((-613095397.590361)*pz)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2140=IKcos(j1);
IkReal x2141=IKsin(j1);
IkReal x2142=((0.211764705882353)*pz);
IkReal x2143=(px*x2141);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2144=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2145=((0.09)*x2144);
evalcond[0]=((((-1.0)*px*x2140))+(((-0.913)*x2140)));
evalcond[1]=((((0.00988235299224913)*x2140))+((x2140*x2145))+((x2140*x2142)));
evalcond[2]=((-0.00988235299224913)+x2143+(((-1.0)*x2142))+(((-1.0)*x2145))+(((0.913)*x2141)));
evalcond[3]=((-0.00415058824227405)+(((0.13695)*x2141))+(((-0.0889411764705882)*pz))+(((0.15)*x2143))+(((-0.0378)*x2144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2146=((10218256626.506)*pp);
IkReal x2147=(cj0*py);
IkReal x2148=((613095397.590361)*pz);
IkReal x2149=(px*sj0);
CheckValue<IkReal> x2150=IKPowWithIntegerCheck((((cj0*px))+((py*sj0))),-1);
if(!x2150.valid){
continue;
}
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
if( IKabs(((10209765255.3315)+(((-1.0)*x2146))+(((-1.0)*x2148)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2150.value)*(((-9321515678.10782)+((x2146*x2147))+(((-10209765255.3315)*x2147))+(((10209765255.3315)*x2149))+(((-1.0)*x2148*x2149))+(((9329268300.0)*pp))+(((0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((559756098.211765)*pz))+(((-1.0)*x2146*x2149))+((x2147*x2148)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((10209765255.3315)+(((-1.0)*x2146))+(((-1.0)*x2148))))+IKsqr(((x2150.value)*(((-9321515678.10782)+((x2146*x2147))+(((-10209765255.3315)*x2147))+(((10209765255.3315)*x2149))+(((-1.0)*x2148*x2149))+(((9329268300.0)*pp))+(((0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((559756098.211765)*pz))+(((-1.0)*x2146*x2149))+((x2147*x2148))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((10209765255.3315)+(((-1.0)*x2146))+(((-1.0)*x2148))), ((x2150.value)*(((-9321515678.10782)+((x2146*x2147))+(((-10209765255.3315)*x2147))+(((10209765255.3315)*x2149))+(((-1.0)*x2148*x2149))+(((9329268300.0)*pp))+(((0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((559756098.211765)*pz))+(((-1.0)*x2146*x2149))+((x2147*x2148))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2151=IKsin(j1);
IkReal x2152=IKcos(j1);
IkReal x2153=((0.15)*py);
IkReal x2154=((0.15)*px);
IkReal x2155=((0.211764705882353)*pz);
IkReal x2156=((1.0)*py);
IkReal x2157=((1.0)*px);
IkReal x2158=(sj0*x2152);
IkReal x2159=(cj0*x2151);
IkReal x2160=(sj0*x2151);
IkReal x2161=(cj0*x2152);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2162=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2163=((0.09)*x2162);
evalcond[0]=((-0.54719003286311)+(((0.547645125958379)*pp))+(((5.3594771199795e-11)*x2151))+(((0.0328587075575027)*pz)));
evalcond[1]=((((-0.913)*x2152))+((px*x2159))+((px*x2158))+(((-1.0)*x2156*x2161))+((py*x2160)));
evalcond[2]=((((-1.0)*cj0*x2157))+((x2152*x2155))+(((0.00988235299224913)*x2152))+((x2152*x2163))+(((-1.0)*sj0*x2156)));
evalcond[3]=((-0.00988235299224913)+((px*x2161))+(((0.913)*x2151))+(((-1.0)*x2157*x2160))+(((-1.0)*x2155))+(((-1.0)*x2163))+((py*x2159))+((py*x2158)));
evalcond[4]=((-0.00415058824227405)+(((-1.0)*x2154*x2160))+(((-0.0889411764705882)*pz))+((x2154*x2161))+((x2153*x2159))+((x2153*x2158))+(((0.13695)*x2151))+(((-0.0378)*x2162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2164=(cj0*px);
IkReal x2165=((10218256626.506)*pp);
IkReal x2166=(py*sj0);
IkReal x2167=((613095397.590361)*pz);
CheckValue<IkReal> x2168=IKPowWithIntegerCheck(((-0.913)+((px*sj0))+(((-1.0)*cj0*py))),-1);
if(!x2168.valid){
continue;
}
if( IKabs(((10209765255.3315)+(((-1.0)*x2165))+(((-1.0)*x2167)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2168.value)*((((x2164*x2167))+((x2164*x2165))+(((-10209765255.3315)*x2164))+(((-10209765255.3315)*x2166))+((x2166*x2167))+((x2165*x2166)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((10209765255.3315)+(((-1.0)*x2165))+(((-1.0)*x2167))))+IKsqr(((x2168.value)*((((x2164*x2167))+((x2164*x2165))+(((-10209765255.3315)*x2164))+(((-10209765255.3315)*x2166))+((x2166*x2167))+((x2165*x2166))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((10209765255.3315)+(((-1.0)*x2165))+(((-1.0)*x2167))), ((x2168.value)*((((x2164*x2167))+((x2164*x2165))+(((-10209765255.3315)*x2164))+(((-10209765255.3315)*x2166))+((x2166*x2167))+((x2165*x2166))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2169=IKsin(j1);
IkReal x2170=IKcos(j1);
IkReal x2171=((0.15)*py);
IkReal x2172=((0.15)*px);
IkReal x2173=((0.211764705882353)*pz);
IkReal x2174=((1.0)*py);
IkReal x2175=((1.0)*px);
IkReal x2176=(sj0*x2170);
IkReal x2177=(cj0*x2169);
IkReal x2178=(sj0*x2169);
IkReal x2179=(cj0*x2170);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2180=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2181=((0.09)*x2180);
evalcond[0]=((-0.54719003286311)+(((0.547645125958379)*pp))+(((5.3594771199795e-11)*x2169))+(((0.0328587075575027)*pz)));
evalcond[1]=(((px*x2177))+((px*x2176))+(((-1.0)*x2174*x2179))+(((-0.913)*x2170))+((py*x2178)));
evalcond[2]=(((x2170*x2173))+(((-1.0)*cj0*x2175))+(((0.00988235299224913)*x2170))+(((-1.0)*sj0*x2174))+((x2170*x2181)));
evalcond[3]=((-0.00988235299224913)+(((0.913)*x2169))+((px*x2179))+(((-1.0)*x2181))+(((-1.0)*x2175*x2178))+(((-1.0)*x2173))+((py*x2177))+((py*x2176)));
evalcond[4]=((-0.00415058824227405)+((x2172*x2179))+((x2171*x2176))+((x2171*x2177))+(((-0.0889411764705882)*pz))+(((0.13695)*x2169))+(((-1.0)*x2172*x2178))+(((-0.0378)*x2180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
CheckValue<IkReal> x2182=IKPowWithIntegerCheck(((0.00988235299224913)+(((0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((0.211764705882353)*pz))),-1);
if(!x2182.valid){
continue;
}
if( IKabs(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2182.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp))))+IKsqr(((x2182.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp))), ((x2182.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2183=IKsin(j1);
IkReal x2184=IKcos(j1);
IkReal x2185=((0.15)*py);
IkReal x2186=((0.15)*px);
IkReal x2187=((0.211764705882353)*pz);
IkReal x2188=((1.0)*py);
IkReal x2189=((1.0)*px);
IkReal x2190=(sj0*x2184);
IkReal x2191=(cj0*x2183);
IkReal x2192=(sj0*x2183);
IkReal x2193=(cj0*x2184);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2194=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2195=((0.09)*x2194);
evalcond[0]=((-0.54719003286311)+(((0.547645125958379)*pp))+(((5.3594771199795e-11)*x2183))+(((0.0328587075575027)*pz)));
evalcond[1]=(((py*x2192))+(((-1.0)*x2188*x2193))+((px*x2190))+((px*x2191))+(((-0.913)*x2184)));
evalcond[2]=((((0.00988235299224913)*x2184))+(((-1.0)*cj0*x2189))+(((-1.0)*sj0*x2188))+((x2184*x2187))+((x2184*x2195)));
evalcond[3]=((-0.00988235299224913)+((py*x2191))+((py*x2190))+(((-1.0)*x2189*x2192))+((px*x2193))+(((-1.0)*x2187))+(((-1.0)*x2195))+(((0.913)*x2183)));
evalcond[4]=((-0.00415058824227405)+((x2186*x2193))+(((-1.0)*x2186*x2192))+(((-0.0889411764705882)*pz))+(((0.13695)*x2183))+(((-0.0378)*x2194))+((x2185*x2190))+((x2185*x2191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst1=((0.16078431372549)+(((-0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.16078431372549)+sj3+(((0.522875816993464)*pz)))))+(IKabs(((1.0)+(IKsign(cj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2196=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x2196)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))))));
if( (((-0.160784313599385)+x2196)) < -1-IKFAST_SINCOS_THRESH || (((-0.160784313599385)+x2196)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(IKasin(((-0.160784313599385)+x2196))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x2196)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
j1eval[0]=((1.0)+(((-9.10714281007653)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((21.4285713178271)*pz)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2197=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x2197)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))))));
if( (((-0.160784313599385)+x2197)) < -1-IKFAST_SINCOS_THRESH || (((-0.160784313599385)+x2197)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(IKasin(((-0.160784313599385)+x2197))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x2197)));
j1eval[0]=((-1.0)+(((-1.09529025191676)*cj0*py))+(((1.09529025191676)*px*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2198=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x2198)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))))));
if( (((0.160784313599385)+(((-1.0)*x2198)))) < -1-IKFAST_SINCOS_THRESH || (((0.160784313599385)+(((-1.0)*x2198)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(((-1.0)*(IKasin(((0.160784313599385)+(((-1.0)*x2198))))))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x2198)));
j1eval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((10209765255.3315)+(((-10218256626.506)*(pz*pz)))+(((-613095397.590361)*pz)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2199=IKsin(j1);
IkReal x2200=IKcos(j1);
IkReal x2201=((0.211764705882353)*pz);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2202=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2203=((0.09)*x2202);
evalcond[0]=((-0.913)*x2200);
evalcond[1]=((-0.00988235299224913)+x2203+(((-1.0)*x2201))+(((0.913)*x2199)));
evalcond[2]=((-0.00415058824227405)+(((0.0378)*x2202))+(((-0.0889411764705882)*pz))+(((0.13695)*x2199)));
evalcond[3]=((((0.00988235299224913)*x2200))+((x2200*x2201))+(((-1.0)*x2200*x2203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((10209765255.3315)+(((-10218256626.506)*(pz*pz)))+(((-613095397.590361)*pz))+(((-10218256626.506)*(py*py))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2204=IKcos(j1);
IkReal x2205=IKsin(j1);
IkReal x2206=((0.211764705882353)*pz);
IkReal x2207=(py*x2205);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2208=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2209=((0.09)*x2208);
evalcond[0]=((((-1.0)*py*x2204))+(((-0.913)*x2204)));
evalcond[1]=((((-1.0)*x2204*x2209))+(((0.00988235299224913)*x2204))+((x2204*x2206)));
evalcond[2]=((-0.00988235299224913)+x2207+x2209+(((-1.0)*x2206))+(((0.913)*x2205)));
evalcond[3]=((-0.00415058824227405)+(((0.0378)*x2208))+(((0.15)*x2207))+(((0.13695)*x2205))+(((-0.0889411764705882)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((10209765255.3315)+(((-10218256626.506)*(pz*pz)))+(((-613095397.590361)*pz))+(((-10218256626.506)*(py*py))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2210=IKcos(j1);
IkReal x2211=IKsin(j1);
IkReal x2212=((0.211764705882353)*pz);
IkReal x2213=(py*x2211);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2214=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2215=((0.09)*x2214);
evalcond[0]=(((py*x2210))+(((-0.913)*x2210)));
evalcond[1]=((((-1.0)*x2210*x2215))+(((0.00988235299224913)*x2210))+((x2210*x2212)));
evalcond[2]=((-0.00988235299224913)+(((-1.0)*x2213))+x2215+(((-1.0)*x2212))+(((0.913)*x2211)));
evalcond[3]=((-0.00415058824227405)+(((0.0378)*x2214))+(((-0.15)*x2213))+(((0.13695)*x2211))+(((-0.0889411764705882)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((10209765255.3315)+(((-10218256626.506)*(pz*pz)))+(((-10218256626.506)*(px*px)))+(((-613095397.590361)*pz)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2216=IKcos(j1);
IkReal x2217=IKsin(j1);
IkReal x2218=((0.211764705882353)*pz);
IkReal x2219=(px*x2217);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2220=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2221=((0.09)*x2220);
evalcond[0]=(((px*x2216))+(((-0.913)*x2216)));
evalcond[1]=((((0.00988235299224913)*x2216))+((x2216*x2218))+(((-1.0)*x2216*x2221)));
evalcond[2]=((-0.00988235299224913)+(((-1.0)*x2219))+x2221+(((-1.0)*x2218))+(((0.913)*x2217)));
evalcond[3]=((-0.00415058824227405)+(((-0.15)*x2219))+(((0.13695)*x2217))+(((-0.0889411764705882)*pz))+(((0.0378)*x2220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((10209765255.3315)+(((-10218256626.506)*(pz*pz)))+(((-10218256626.506)*(px*px)))+(((-613095397.590361)*pz)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2222=IKcos(j1);
IkReal x2223=IKsin(j1);
IkReal x2224=((0.211764705882353)*pz);
IkReal x2225=(px*x2223);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2226=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2227=((0.09)*x2226);
evalcond[0]=((((-0.913)*x2222))+(((-1.0)*px*x2222)));
evalcond[1]=((((-1.0)*x2222*x2227))+((x2222*x2224))+(((0.00988235299224913)*x2222)));
evalcond[2]=((-0.00988235299224913)+x2227+x2225+(((-1.0)*x2224))+(((0.913)*x2223)));
evalcond[3]=((-0.00415058824227405)+(((-0.0889411764705882)*pz))+(((0.0378)*x2226))+(((0.13695)*x2223))+(((0.15)*x2225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2228=((10218256626.506)*pp);
IkReal x2229=(cj0*py);
IkReal x2230=((613095397.590361)*pz);
IkReal x2231=(px*sj0);
CheckValue<IkReal> x2232=IKPowWithIntegerCheck((((cj0*px))+((py*sj0))),-1);
if(!x2232.valid){
continue;
}
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
if( IKabs(((10209765255.3315)+(((-1.0)*x2230))+(((-1.0)*x2228)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2232.value)*(((-9321515678.10782)+(((-10209765255.3315)*x2229))+((x2228*x2229))+((x2229*x2230))+(((9329268300.0)*pp))+(((10209765255.3315)*x2231))+(((-1.0)*x2228*x2231))+(((559756098.211765)*pz))+(((-0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((-1.0)*x2230*x2231)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((10209765255.3315)+(((-1.0)*x2230))+(((-1.0)*x2228))))+IKsqr(((x2232.value)*(((-9321515678.10782)+(((-10209765255.3315)*x2229))+((x2228*x2229))+((x2229*x2230))+(((9329268300.0)*pp))+(((10209765255.3315)*x2231))+(((-1.0)*x2228*x2231))+(((559756098.211765)*pz))+(((-0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((-1.0)*x2230*x2231))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((10209765255.3315)+(((-1.0)*x2230))+(((-1.0)*x2228))), ((x2232.value)*(((-9321515678.10782)+(((-10209765255.3315)*x2229))+((x2228*x2229))+((x2229*x2230))+(((9329268300.0)*pp))+(((10209765255.3315)*x2231))+(((-1.0)*x2228*x2231))+(((559756098.211765)*pz))+(((-0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((-1.0)*x2230*x2231))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2233=IKsin(j1);
IkReal x2234=IKcos(j1);
IkReal x2235=((0.15)*py);
IkReal x2236=((0.15)*px);
IkReal x2237=((0.211764705882353)*pz);
IkReal x2238=((1.0)*py);
IkReal x2239=((1.0)*px);
IkReal x2240=(sj0*x2234);
IkReal x2241=(cj0*x2233);
IkReal x2242=(sj0*x2233);
IkReal x2243=(cj0*x2234);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2244=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2245=((0.09)*x2244);
evalcond[0]=((-0.54719003286311)+(((0.547645125958379)*pp))+(((5.3594771199795e-11)*x2233))+(((0.0328587075575027)*pz)));
evalcond[1]=((((-0.913)*x2234))+((px*x2241))+((px*x2240))+(((-1.0)*x2238*x2243))+((py*x2242)));
evalcond[2]=((((-1.0)*x2234*x2245))+(((-1.0)*sj0*x2238))+(((-1.0)*cj0*x2239))+(((0.00988235299224913)*x2234))+((x2234*x2237)));
evalcond[3]=((-0.00988235299224913)+x2245+(((-1.0)*x2237))+((px*x2243))+(((-1.0)*x2239*x2242))+(((0.913)*x2233))+((py*x2241))+((py*x2240)));
evalcond[4]=((-0.00415058824227405)+((x2236*x2243))+((x2235*x2240))+((x2235*x2241))+(((-0.0889411764705882)*pz))+(((-1.0)*x2236*x2242))+(((0.0378)*x2244))+(((0.13695)*x2233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2246=(cj0*px);
IkReal x2247=((10218256626.506)*pp);
IkReal x2248=(py*sj0);
IkReal x2249=((613095397.590361)*pz);
CheckValue<IkReal> x2250=IKPowWithIntegerCheck(((-0.913)+((px*sj0))+(((-1.0)*cj0*py))),-1);
if(!x2250.valid){
continue;
}
if( IKabs(((10209765255.3315)+(((-1.0)*x2247))+(((-1.0)*x2249)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2250.value)*((((x2246*x2249))+((x2246*x2247))+((x2247*x2248))+((x2248*x2249))+(((-10209765255.3315)*x2248))+(((-10209765255.3315)*x2246)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((10209765255.3315)+(((-1.0)*x2247))+(((-1.0)*x2249))))+IKsqr(((x2250.value)*((((x2246*x2249))+((x2246*x2247))+((x2247*x2248))+((x2248*x2249))+(((-10209765255.3315)*x2248))+(((-10209765255.3315)*x2246))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((10209765255.3315)+(((-1.0)*x2247))+(((-1.0)*x2249))), ((x2250.value)*((((x2246*x2249))+((x2246*x2247))+((x2247*x2248))+((x2248*x2249))+(((-10209765255.3315)*x2248))+(((-10209765255.3315)*x2246))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2251=IKsin(j1);
IkReal x2252=IKcos(j1);
IkReal x2253=((0.15)*py);
IkReal x2254=((0.15)*px);
IkReal x2255=((0.211764705882353)*pz);
IkReal x2256=((1.0)*py);
IkReal x2257=((1.0)*px);
IkReal x2258=(sj0*x2252);
IkReal x2259=(cj0*x2251);
IkReal x2260=(sj0*x2251);
IkReal x2261=(cj0*x2252);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2262=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2263=((0.09)*x2262);
evalcond[0]=((-0.54719003286311)+(((0.547645125958379)*pp))+(((0.0328587075575027)*pz))+(((5.3594771199795e-11)*x2251)));
evalcond[1]=((((-1.0)*x2256*x2261))+(((-0.913)*x2252))+((py*x2260))+((px*x2258))+((px*x2259)));
evalcond[2]=((((-1.0)*x2252*x2263))+(((-1.0)*cj0*x2257))+((x2252*x2255))+(((-1.0)*sj0*x2256))+(((0.00988235299224913)*x2252)));
evalcond[3]=((-0.00988235299224913)+((px*x2261))+x2263+(((0.913)*x2251))+(((-1.0)*x2257*x2260))+(((-1.0)*x2255))+((py*x2258))+((py*x2259)));
evalcond[4]=((-0.00415058824227405)+(((0.13695)*x2251))+(((-1.0)*x2254*x2260))+((x2253*x2259))+((x2253*x2258))+(((0.0378)*x2262))+(((-0.0889411764705882)*pz))+((x2254*x2261)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
CheckValue<IkReal> x2264=IKPowWithIntegerCheck(((0.00988235299224913)+(((-0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((0.211764705882353)*pz))),-1);
if(!x2264.valid){
continue;
}
if( IKabs(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2264.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp))))+IKsqr(((x2264.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp))), ((x2264.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2265=IKsin(j1);
IkReal x2266=IKcos(j1);
IkReal x2267=((0.15)*py);
IkReal x2268=((0.15)*px);
IkReal x2269=((0.211764705882353)*pz);
IkReal x2270=((1.0)*py);
IkReal x2271=((1.0)*px);
IkReal x2272=(sj0*x2266);
IkReal x2273=(cj0*x2265);
IkReal x2274=(sj0*x2265);
IkReal x2275=(cj0*x2266);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2276=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2277=((0.09)*x2276);
evalcond[0]=((-0.54719003286311)+(((0.547645125958379)*pp))+(((5.3594771199795e-11)*x2265))+(((0.0328587075575027)*pz)));
evalcond[1]=(((px*x2273))+((px*x2272))+((py*x2274))+(((-1.0)*x2270*x2275))+(((-0.913)*x2266)));
evalcond[2]=((((-1.0)*sj0*x2270))+(((-1.0)*x2266*x2277))+(((0.00988235299224913)*x2266))+(((-1.0)*cj0*x2271))+((x2266*x2269)));
evalcond[3]=((-0.00988235299224913)+((px*x2275))+x2277+((py*x2272))+((py*x2273))+(((-1.0)*x2269))+(((-1.0)*x2271*x2274))+(((0.913)*x2265)));
evalcond[4]=((-0.00415058824227405)+(((0.0378)*x2276))+(((0.13695)*x2265))+((x2268*x2275))+(((-0.0889411764705882)*pz))+(((-1.0)*x2268*x2274))+((x2267*x2272))+((x2267*x2273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((3.10469847231699)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-1168543470.65351)+(((1196681824.51447)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1168543470.65351)+(((1196681824.51447)*pp))))+IKsqr(((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1168543470.65351)+(((1196681824.51447)*pp))), ((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2278=IKsin(j1);
IkReal x2279=IKcos(j1);
CheckValue<IkReal> x2288=IKPowWithIntegerCheck(py,-1);
if(!x2288.valid){
continue;
}
IkReal x2280=x2288.value;
IkReal x2281=(py*sj0);
IkReal x2282=(px*sj0);
IkReal x2283=((0.0821467688937568)*pp);
IkReal x2284=(cj0*px);
IkReal x2285=(cj0*py);
IkReal x2286=((0.15)*x2279);
IkReal x2287=(px*x2279*x2280);
evalcond[0]=((-0.534767991845724)+(((0.547645125958379)*pp))+(((-4.57636369784904e-10)*x2278)));
evalcond[1]=((((-1.0)*x2284))+(((-1.0)*x2281))+(((-4.57636369784904e-10)*x2279)));
evalcond[2]=(((x2278*x2281))+((x2278*x2284))+((x2279*x2282))+(((-1.0)*x2279*x2285))+(((-0.913)*x2279)));
evalcond[3]=((4.57636369784904e-10)+(((0.913)*x2278))+(((-1.0)*x2278*x2282))+((x2278*x2285))+((x2279*x2281))+((x2279*x2284)));
evalcond[4]=((6.86454554677356e-11)+((x2281*x2286))+(((-1.0)*x2278*x2283))+((px*x2280*x2282*x2286))+(((-0.0567348012231413)*x2287))+(((0.0802151987768587)*x2278))+(((-1.0)*x2283*x2287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.400443710475077)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-1542704802.03156)+(((1504414963.66099)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1542704802.03156)+(((1504414963.66099)*pp))))+IKsqr(((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1542704802.03156)+(((1504414963.66099)*pp))), ((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2289=IKsin(j1);
IkReal x2290=IKcos(j1);
CheckValue<IkReal> x2299=IKPowWithIntegerCheck(py,-1);
if(!x2299.valid){
continue;
}
IkReal x2291=x2299.value;
IkReal x2292=(py*sj0);
IkReal x2293=(px*sj0);
IkReal x2294=((0.0821467688937568)*pp);
IkReal x2295=(cj0*px);
IkReal x2296=(cj0*py);
IkReal x2297=((0.15)*x2290);
IkReal x2298=(px*x2290*x2291);
evalcond[0]=((-0.561583596303256)+(((-3.64025311623919e-10)*x2289))+(((0.547645125958379)*pp)));
evalcond[1]=((((-3.64025311623919e-10)*x2290))+(((-1.0)*x2295))+(((-1.0)*x2292)));
evalcond[2]=((((-0.913)*x2290))+((x2289*x2292))+((x2289*x2295))+(((-1.0)*x2290*x2296))+((x2290*x2293)));
evalcond[3]=((3.64025311623919e-10)+(((-1.0)*x2289*x2293))+(((0.913)*x2289))+((x2289*x2296))+((x2290*x2295))+((x2290*x2292)));
evalcond[4]=((5.46037967435879e-11)+(((0.0842375394454885)*x2289))+(((-1.0)*x2289*x2294))+(((-0.0527124605545115)*x2298))+((px*x2291*x2293*x2297))+((x2292*x2297))+(((-1.0)*x2294*x2298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2300=(px*sj0);
IkReal x2301=((0.222222222222222)*pz);
IkReal x2302=(cj0*px);
IkReal x2303=((0.0349123767798467)*sj3);
IkReal x2304=((0.425)*sj3);
IkReal x2305=((0.547645125958379)*pp);
IkReal x2306=(py*sj0);
IkReal x2307=((0.0511135450894487)*pz);
IkReal x2308=(cj0*py);
CheckValue<IkReal> x2309=IKPowWithIntegerCheck(((0.0683333333333333)+(((-1.0)*x2304))+(((-1.0)*x2301))),-1);
if(!x2309.valid){
continue;
}
CheckValue<IkReal> x2310=IKPowWithIntegerCheck(((-0.0623883333333333)+(((0.388025)*sj3))+(((-1.0)*x2300*x2304))+(((-1.0)*x2300*x2301))+((x2304*x2308))+(((0.202888888888889)*pz))+((x2301*x2308))+(((0.0683333333333333)*x2300))+(((-0.0683333333333333)*x2308))),-1);
if(!x2310.valid){
continue;
}
if( IKabs(((x2309.value)*(((0.552803395399781)+(((-1.0)*x2307))+(((-1.0)*x2305))+(((-1.0)*x2303)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2310.value)*((((x2305*x2306))+((x2303*x2306))+(((-0.552803395399781)*x2306))+(((-0.552803395399781)*x2302))+((x2306*x2307))+((x2302*x2303))+((x2302*x2307))+((x2302*x2305)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2309.value)*(((0.552803395399781)+(((-1.0)*x2307))+(((-1.0)*x2305))+(((-1.0)*x2303))))))+IKsqr(((x2310.value)*((((x2305*x2306))+((x2303*x2306))+(((-0.552803395399781)*x2306))+(((-0.552803395399781)*x2302))+((x2306*x2307))+((x2302*x2303))+((x2302*x2307))+((x2302*x2305))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2309.value)*(((0.552803395399781)+(((-1.0)*x2307))+(((-1.0)*x2305))+(((-1.0)*x2303))))), ((x2310.value)*((((x2305*x2306))+((x2303*x2306))+(((-0.552803395399781)*x2306))+(((-0.552803395399781)*x2302))+((x2306*x2307))+((x2302*x2303))+((x2302*x2307))+((x2302*x2305))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2311=IKcos(j1);
IkReal x2312=IKsin(j1);
IkReal x2313=((0.15)*py);
IkReal x2314=(cj0*py);
IkReal x2315=((0.09)*cj3);
IkReal x2316=((0.15)*px);
IkReal x2317=((0.405)*sj3);
IkReal x2318=((1.0)*px);
IkReal x2319=(sj0*x2311);
IkReal x2320=(cj0*x2312);
IkReal x2321=(sj0*x2312);
IkReal x2322=(cj0*x2311);
evalcond[0]=(((x2311*x2315))+(((-1.0)*cj0*x2318))+(((-1.0)*x2311*x2317))+(((0.075)*x2311))+(((-1.0)*py*sj0)));
evalcond[1]=((-0.552803395399781)+(((0.547645125958379)*pp))+(((0.0349123767798467)*sj3))+(((0.0683333333333333)*x2312))+(((-0.425)*sj3*x2312))+(((0.0511135450894487)*pz))+(((-0.222222222222222)*pz*x2312)));
evalcond[2]=((((-0.913)*x2311))+((px*x2320))+((px*x2319))+((py*x2321))+(((-1.0)*x2311*x2314)));
evalcond[3]=((-0.075)+((x2312*x2314))+(((0.913)*x2312))+(((-1.0)*x2318*x2321))+x2317+((px*x2322))+((py*x2319))+(((-1.0)*x2315)));
evalcond[4]=((-0.667969)+((x2316*x2322))+(((-1.826)*x2314))+(((0.13695)*x2312))+(((1.826)*px*sj0))+(((-1.0)*pp))+(((-0.06)*pz))+(((-1.0)*x2316*x2321))+((x2313*x2320))+((x2313*x2319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2323=(cj0*px);
IkReal x2324=((0.09)*cj3);
IkReal x2325=(py*sj0);
IkReal x2326=((0.405)*sj3);
IkReal x2327=(px*py);
IkReal x2328=(cj0*sj0);
CheckValue<IkReal> x2329=IKPowWithIntegerCheck(((((0.075)*x2323))+(((0.075)*x2325))+(((-1.0)*x2323*x2326))+(((-1.0)*x2325*x2326))+((x2324*x2325))+((x2323*x2324))),-1);
if(!x2329.valid){
continue;
}
CheckValue<IkReal> x2330=IKPowWithIntegerCheck(((0.075)+x2324+(((-1.0)*x2326))),-1);
if(!x2330.valid){
continue;
}
if( IKabs(((x2329.value)*(((((0.913)*x2323))+(((0.913)*x2325))+(((2.0)*cj0*py*x2323))+((cj0*py*x2325))+(((-1.0)*px*sj0*x2323))+(((-1.0)*x2327)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2330.value)*((x2323+x2325)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2329.value)*(((((0.913)*x2323))+(((0.913)*x2325))+(((2.0)*cj0*py*x2323))+((cj0*py*x2325))+(((-1.0)*px*sj0*x2323))+(((-1.0)*x2327))))))+IKsqr(((x2330.value)*((x2323+x2325))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2329.value)*(((((0.913)*x2323))+(((0.913)*x2325))+(((2.0)*cj0*py*x2323))+((cj0*py*x2325))+(((-1.0)*px*sj0*x2323))+(((-1.0)*x2327))))), ((x2330.value)*((x2323+x2325))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2331=IKcos(j1);
IkReal x2332=IKsin(j1);
IkReal x2333=((0.15)*py);
IkReal x2334=(cj0*py);
IkReal x2335=((0.09)*cj3);
IkReal x2336=((0.15)*px);
IkReal x2337=((0.405)*sj3);
IkReal x2338=((1.0)*px);
IkReal x2339=(sj0*x2331);
IkReal x2340=(cj0*x2332);
IkReal x2341=(sj0*x2332);
IkReal x2342=(cj0*x2331);
evalcond[0]=(((x2331*x2335))+(((-1.0)*cj0*x2338))+(((-1.0)*x2331*x2337))+(((-1.0)*py*sj0))+(((0.075)*x2331)));
evalcond[1]=((-0.552803395399781)+(((0.547645125958379)*pp))+(((0.0349123767798467)*sj3))+(((0.0683333333333333)*x2332))+(((0.0511135450894487)*pz))+(((-0.222222222222222)*pz*x2332))+(((-0.425)*sj3*x2332)));
evalcond[2]=(((px*x2340))+(((-1.0)*x2331*x2334))+(((-0.913)*x2331))+((py*x2341))+((px*x2339)));
evalcond[3]=((-0.075)+(((-1.0)*x2335))+x2337+((x2332*x2334))+(((0.913)*x2332))+((px*x2342))+(((-1.0)*x2338*x2341))+((py*x2339)));
evalcond[4]=((-0.667969)+(((-1.826)*x2334))+((x2333*x2339))+(((1.826)*px*sj0))+(((0.13695)*x2332))+(((-1.0)*pp))+(((-0.06)*pz))+(((-1.0)*x2336*x2341))+((x2333*x2340))+((x2336*x2342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2343=IKPowWithIntegerCheck(((0.0683333333333333)+(((-0.222222222222222)*pz))+(((-0.425)*sj3))),-1);
if(!x2343.valid){
continue;
}
CheckValue<IkReal> x2344=IKPowWithIntegerCheck(((0.075)+(((0.09)*cj3))+(((-0.405)*sj3))),-1);
if(!x2344.valid){
continue;
}
if( IKabs(((x2343.value)*(((0.552803395399781)+(((-0.547645125958379)*pp))+(((-0.0511135450894487)*pz))+(((-0.0349123767798467)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2344.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2343.value)*(((0.552803395399781)+(((-0.547645125958379)*pp))+(((-0.0511135450894487)*pz))+(((-0.0349123767798467)*sj3))))))+IKsqr(((x2344.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2343.value)*(((0.552803395399781)+(((-0.547645125958379)*pp))+(((-0.0511135450894487)*pz))+(((-0.0349123767798467)*sj3))))), ((x2344.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2345=IKcos(j1);
IkReal x2346=IKsin(j1);
IkReal x2347=((0.15)*py);
IkReal x2348=(cj0*py);
IkReal x2349=((0.09)*cj3);
IkReal x2350=((0.15)*px);
IkReal x2351=((0.405)*sj3);
IkReal x2352=((1.0)*px);
IkReal x2353=(sj0*x2345);
IkReal x2354=(cj0*x2346);
IkReal x2355=(sj0*x2346);
IkReal x2356=(cj0*x2345);
evalcond[0]=((((-1.0)*x2345*x2351))+((x2345*x2349))+(((-1.0)*py*sj0))+(((0.075)*x2345))+(((-1.0)*cj0*x2352)));
evalcond[1]=((-0.552803395399781)+(((-0.222222222222222)*pz*x2346))+(((0.547645125958379)*pp))+(((0.0683333333333333)*x2346))+(((0.0349123767798467)*sj3))+(((0.0511135450894487)*pz))+(((-0.425)*sj3*x2346)));
evalcond[2]=((((-1.0)*x2345*x2348))+((px*x2353))+((px*x2354))+((py*x2355))+(((-0.913)*x2345)));
evalcond[3]=((-0.075)+((x2346*x2348))+x2351+((px*x2356))+(((0.913)*x2346))+(((-1.0)*x2352*x2355))+((py*x2353))+(((-1.0)*x2349)));
evalcond[4]=((-0.667969)+(((-1.826)*x2348))+(((1.826)*px*sj0))+((x2350*x2356))+(((-1.0)*pp))+(((-0.06)*pz))+(((0.13695)*x2346))+(((-1.0)*x2350*x2355))+((x2347*x2354))+((x2347*x2353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2357=(cj0*px);
IkReal x2358=(px*py);
IkReal x2359=(py*sj0);
IkReal x2360=((0.365)*sj2);
IkReal x2361=(cj0*sj0);
IkReal x2362=((0.405)*cj3*sj2);
IkReal x2363=((0.405)*cj2*sj3);
IkReal x2364=((0.09)*cj2*cj3);
IkReal x2365=((0.09)*sj2*sj3);
CheckValue<IkReal> x2366=IKPowWithIntegerCheck((((x2359*x2360))+((x2359*x2362))+((x2359*x2363))+((x2359*x2365))+(((-1.0)*x2357*x2364))+(((-1.0)*x2359*x2364))+((x2357*x2362))+((x2357*x2363))+((x2357*x2360))+((x2357*x2365))+(((0.075)*x2359))+(((0.075)*x2357))),-1);
if(!x2366.valid){
continue;
}
CheckValue<IkReal> x2367=IKPowWithIntegerCheck(((0.075)+x2365+x2363+x2362+x2360+(((-1.0)*x2364))),-1);
if(!x2367.valid){
continue;
}
if( IKabs(((x2366.value)*(((((2.0)*cj0*py*x2357))+(((-1.0)*x2358))+(((0.913)*x2359))+(((0.913)*x2357))+((cj0*py*x2359))+(((-1.0)*px*sj0*x2357)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2367.value)*((x2359+x2357)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2366.value)*(((((2.0)*cj0*py*x2357))+(((-1.0)*x2358))+(((0.913)*x2359))+(((0.913)*x2357))+((cj0*py*x2359))+(((-1.0)*px*sj0*x2357))))))+IKsqr(((x2367.value)*((x2359+x2357))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2366.value)*(((((2.0)*cj0*py*x2357))+(((-1.0)*x2358))+(((0.913)*x2359))+(((0.913)*x2357))+((cj0*py*x2359))+(((-1.0)*px*sj0*x2357))))), ((x2367.value)*((x2359+x2357))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2368=IKsin(j1);
IkReal x2369=IKcos(j1);
IkReal x2370=((0.405)*sj3);
IkReal x2371=(cj0*sj2);
IkReal x2372=((0.15)*cj0);
IkReal x2373=(px*sj0);
IkReal x2374=((0.09)*cj3);
IkReal x2375=((0.365)*sj2);
IkReal x2376=((1.0)*cj2);
IkReal x2377=((1.0)*py);
IkReal x2378=((0.405)*cj3);
IkReal x2379=(cj2*pz);
IkReal x2380=(cj0*px);
IkReal x2381=(cj2*x2368);
IkReal x2382=(px*x2369);
IkReal x2383=(py*x2368);
IkReal x2384=((0.09)*sj2*sj3);
IkReal x2385=(sj2*x2368);
IkReal x2386=(cj2*x2369);
IkReal x2387=(py*sj0*x2369);
evalcond[0]=((((-1.0)*cj0*x2369*x2377))+((x2368*x2380))+((sj0*x2383))+(((-0.913)*x2369))+((x2369*x2373)));
evalcond[1]=((((-1.0)*x2374*x2386))+((sj2*x2369*x2378))+(((0.075)*x2369))+(((-1.0)*x2380))+((x2369*x2384))+(((-1.0)*sj0*x2377))+((x2370*x2386))+((x2369*x2375)));
evalcond[2]=((-0.913)+((x2368*x2375))+(((-1.0)*x2374*x2381))+x2373+(((0.075)*x2368))+(((-1.0)*cj0*x2377))+((x2368*x2384))+((x2370*x2381))+((x2378*x2385)));
evalcond[3]=((-0.365)+x2379+(((-0.09)*sj3))+(((-1.0)*x2378))+(((-0.335)*cj2))+(((-0.075)*sj2))+((sj2*x2387))+(((0.913)*x2385))+(((-1.0)*x2373*x2385))+((x2371*x2382))+((x2371*x2383)));
evalcond[4]=((((-0.913)*x2381))+(((-1.0)*x2376*x2387))+x2370+(((-1.0)*x2374))+(((-1.0)*cj0*x2376*x2383))+(((0.075)*cj2))+(((-1.0)*x2369*x2376*x2380))+((pz*sj2))+((x2373*x2381))+(((-0.335)*sj2)));
evalcond[5]=((-0.912519)+(((0.13695)*x2368))+(((0.15)*x2387))+(((0.73)*sj2*x2387))+(((-0.15)*x2368*x2373))+(((-1.826)*cj0*py))+(((-0.73)*x2373*x2385))+(((0.66649)*x2385))+(((0.67)*pz))+(((0.73)*x2371*x2383))+(((0.73)*x2371*x2382))+(((-1.0)*pp))+(((-0.05475)*sj2))+(((0.73)*x2379))+((x2372*x2382))+((x2372*x2383))+(((1.826)*x2373))+(((-0.24455)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2388=(cj0*py);
IkReal x2389=(cj2*pz);
IkReal x2390=((0.09)*sj3);
IkReal x2391=((0.405)*cj3);
IkReal x2392=(cj0*px);
IkReal x2393=((0.075)*sj2);
IkReal x2394=(py*sj0);
IkReal x2395=(px*sj0);
IkReal x2396=((0.335)*cj2);
IkReal x2397=(sj2*x2395);
CheckValue<IkReal> x2398=IKPowWithIntegerCheck(IKsign(((((1.826)*sj2*x2388))+(((-1.0)*sj2*(pz*pz)))+(((0.833569)*sj2))+((pp*sj2))+(((-1.826)*x2397)))),-1);
if(!x2398.valid){
continue;
}
CheckValue<IkReal> x2399 = IKatan2WithCheck(IkReal(((0.333245)+(((0.365)*x2388))+(((-0.913)*x2389))+(((-1.0)*x2390*x2395))+(((0.08217)*sj3))+(((-0.365)*x2395))+(((0.068475)*sj2))+(((0.305855)*cj2))+(((0.369765)*cj3))+((x2388*x2393))+((x2388*x2390))+((x2388*x2396))+((x2388*x2391))+(((-1.0)*x2391*x2395))+((x2389*x2395))+(((-1.0)*x2393*x2395))+(((-1.0)*x2388*x2389))+(((-1.0)*x2395*x2396)))),IkReal((((x2392*x2396))+((x2392*x2393))+(((0.365)*x2394))+(((0.365)*x2392))+((x2393*x2394))+((x2390*x2392))+((x2390*x2394))+((x2391*x2394))+((x2391*x2392))+((x2394*x2396))+(((-1.0)*x2389*x2392))+(((-1.0)*x2389*x2394)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2399.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2398.value)))+(x2399.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2400=IKsin(j1);
IkReal x2401=IKcos(j1);
IkReal x2402=((0.405)*sj3);
IkReal x2403=(cj0*sj2);
IkReal x2404=((0.15)*cj0);
IkReal x2405=(px*sj0);
IkReal x2406=((0.09)*cj3);
IkReal x2407=((0.365)*sj2);
IkReal x2408=((1.0)*cj2);
IkReal x2409=((1.0)*py);
IkReal x2410=((0.405)*cj3);
IkReal x2411=(cj2*pz);
IkReal x2412=(cj0*px);
IkReal x2413=(cj2*x2400);
IkReal x2414=(px*x2401);
IkReal x2415=(py*x2400);
IkReal x2416=((0.09)*sj2*sj3);
IkReal x2417=(sj2*x2400);
IkReal x2418=(cj2*x2401);
IkReal x2419=(py*sj0*x2401);
evalcond[0]=(((sj0*x2415))+((x2401*x2405))+((x2400*x2412))+(((-1.0)*cj0*x2401*x2409))+(((-0.913)*x2401)));
evalcond[1]=((((0.075)*x2401))+(((-1.0)*x2412))+(((-1.0)*x2406*x2418))+((x2401*x2407))+((x2402*x2418))+((x2401*x2416))+(((-1.0)*sj0*x2409))+((sj2*x2401*x2410)));
evalcond[2]=((-0.913)+(((0.075)*x2400))+x2405+(((-1.0)*x2406*x2413))+((x2410*x2417))+((x2400*x2407))+((x2402*x2413))+((x2400*x2416))+(((-1.0)*cj0*x2409)));
evalcond[3]=((-0.365)+(((-1.0)*x2405*x2417))+(((0.913)*x2417))+x2411+(((-0.09)*sj3))+(((-0.335)*cj2))+(((-0.075)*sj2))+(((-1.0)*x2410))+((sj2*x2419))+((x2403*x2414))+((x2403*x2415)));
evalcond[4]=((((-0.913)*x2413))+x2402+(((-1.0)*x2408*x2419))+(((-1.0)*x2406))+(((-1.0)*cj0*x2408*x2415))+((x2405*x2413))+(((0.075)*cj2))+((pz*sj2))+(((-1.0)*x2401*x2408*x2412))+(((-0.335)*sj2)));
evalcond[5]=((-0.912519)+(((-1.826)*cj0*py))+(((0.73)*x2403*x2415))+(((0.73)*x2403*x2414))+((x2404*x2414))+((x2404*x2415))+(((0.66649)*x2417))+(((0.67)*pz))+(((0.73)*x2411))+(((-1.0)*pp))+(((-0.73)*x2405*x2417))+(((-0.05475)*sj2))+(((0.73)*sj2*x2419))+(((-0.15)*x2400*x2405))+(((0.13695)*x2400))+(((0.15)*x2419))+(((-0.24455)*cj2))+(((1.826)*x2405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2420=IKPowWithIntegerCheck(IKsign(((0.075)+(((0.365)*sj2))+(((0.09)*sj2*sj3))+(((-0.09)*cj2*cj3))+(((0.405)*cj2*sj3))+(((0.405)*cj3*sj2)))),-1);
if(!x2420.valid){
continue;
}
CheckValue<IkReal> x2421 = IKatan2WithCheck(IkReal(((0.913)+(((-1.0)*px*sj0))+((cj0*py)))),IkReal((((cj0*px))+((py*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2421.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2420.value)))+(x2421.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2422=IKsin(j1);
IkReal x2423=IKcos(j1);
IkReal x2424=((0.405)*sj3);
IkReal x2425=(cj0*sj2);
IkReal x2426=((0.15)*cj0);
IkReal x2427=(px*sj0);
IkReal x2428=((0.09)*cj3);
IkReal x2429=((0.365)*sj2);
IkReal x2430=((1.0)*cj2);
IkReal x2431=((1.0)*py);
IkReal x2432=((0.405)*cj3);
IkReal x2433=(cj2*pz);
IkReal x2434=(cj0*px);
IkReal x2435=(cj2*x2422);
IkReal x2436=(px*x2423);
IkReal x2437=(py*x2422);
IkReal x2438=((0.09)*sj2*sj3);
IkReal x2439=(sj2*x2422);
IkReal x2440=(cj2*x2423);
IkReal x2441=(py*sj0*x2423);
evalcond[0]=((((-1.0)*cj0*x2423*x2431))+((x2423*x2427))+(((-0.913)*x2423))+((x2422*x2434))+((sj0*x2437)));
evalcond[1]=((((-1.0)*x2434))+(((-1.0)*x2428*x2440))+((x2423*x2429))+((x2424*x2440))+(((0.075)*x2423))+((x2423*x2438))+((sj2*x2423*x2432))+(((-1.0)*sj0*x2431)));
evalcond[2]=((-0.913)+(((-1.0)*cj0*x2431))+((x2424*x2435))+x2427+((x2422*x2429))+((x2432*x2439))+(((0.075)*x2422))+(((-1.0)*x2428*x2435))+((x2422*x2438)));
evalcond[3]=((-0.365)+x2433+((x2425*x2436))+((x2425*x2437))+((sj2*x2441))+(((-0.09)*sj3))+(((-1.0)*x2432))+(((-0.335)*cj2))+(((-0.075)*sj2))+(((0.913)*x2439))+(((-1.0)*x2427*x2439)));
evalcond[4]=((((-1.0)*x2423*x2430*x2434))+x2424+(((-1.0)*x2430*x2441))+(((-1.0)*cj0*x2430*x2437))+(((0.075)*cj2))+(((-1.0)*x2428))+((pz*sj2))+((x2427*x2435))+(((-0.335)*sj2))+(((-0.913)*x2435)));
evalcond[5]=((-0.912519)+(((0.15)*x2441))+(((-1.826)*cj0*py))+(((0.13695)*x2422))+(((0.67)*pz))+(((0.73)*x2425*x2437))+(((0.73)*x2425*x2436))+(((-1.0)*pp))+(((1.826)*x2427))+(((0.73)*sj2*x2441))+((x2426*x2437))+((x2426*x2436))+(((-0.05475)*sj2))+(((-0.73)*x2427*x2439))+(((-0.15)*x2422*x2427))+(((-0.24455)*cj2))+(((0.66649)*x2439))+(((0.73)*x2433)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x2444 = IKatan2WithCheck(IkReal(((-1.826)*py)),IkReal(((1.826)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x2444.valid){
continue;
}
IkReal x2442=((1.0)*(x2444.value));
if((((((3.334276)*(py*py)))+(((3.334276)*(px*px))))) < -0.00001)
continue;
CheckValue<IkReal> x2445=IKPowWithIntegerCheck(IKabs(IKsqrt(((((3.334276)*(py*py)))+(((3.334276)*(px*px)))))),-1);
if(!x2445.valid){
continue;
}
if( (((x2445.value)*(((-0.410369)+(((0.29565)*cj3))+(((0.12105)*cj2*sj3))+(((0.12105)*cj3*sj2))+(((0.25785)*cj2*cj3))+(((0.05475)*sj2))+(((-1.0)*pp))+(((0.0657)*sj3))+(((-0.25785)*sj2*sj3))+(((0.24455)*cj2)))))) < -1-IKFAST_SINCOS_THRESH || (((x2445.value)*(((-0.410369)+(((0.29565)*cj3))+(((0.12105)*cj2*sj3))+(((0.12105)*cj3*sj2))+(((0.25785)*cj2*cj3))+(((0.05475)*sj2))+(((-1.0)*pp))+(((0.0657)*sj3))+(((-0.25785)*sj2*sj3))+(((0.24455)*cj2)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x2443=IKasin(((x2445.value)*(((-0.410369)+(((0.29565)*cj3))+(((0.12105)*cj2*sj3))+(((0.12105)*cj3*sj2))+(((0.25785)*cj2*cj3))+(((0.05475)*sj2))+(((-1.0)*pp))+(((0.0657)*sj3))+(((-0.25785)*sj2*sj3))+(((0.24455)*cj2))))));
j0array[0]=((((-1.0)*x2443))+(((-1.0)*x2442)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+x2443+(((-1.0)*x2442)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j1eval[3];
IkReal x2446=(cj3*sj2);
IkReal x2447=(cj2*cj3);
IkReal x2448=(sj2*sj3);
IkReal x2449=(cj2*sj3);
j1eval[0]=((1.0)+(((-1.2)*x2447))+(((5.4)*x2449))+(((5.4)*x2446))+(((1.2)*x2448))+(((4.86666666666667)*sj2)));
j1eval[1]=IKsign(((0.075)+(((0.09)*x2448))+(((0.365)*sj2))+(((-0.09)*x2447))+(((0.405)*x2449))+(((0.405)*x2446))));
j1eval[2]=((IKabs(((0.913)+(((-1.0)*px*sj0))+((cj0*py)))))+(IKabs((((cj0*px))+((py*sj0))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x2450=pz*pz;
IkReal x2451=(pp*sj2);
IkReal x2452=(sj2*x2450);
IkReal x2453=(px*sj0*sj2);
IkReal x2454=(cj0*py*sj2);
j1eval[0]=((((-2.19058050383352)*x2453))+sj2+(((-1.19966073594388)*x2452))+(((1.19966073594388)*x2451))+(((2.19058050383352)*x2454)));
j1eval[1]=IKsign((x2451+(((0.833569)*sj2))+(((-1.0)*x2452))+(((1.826)*x2454))+(((-1.826)*x2453))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x2455=(cj0*px);
IkReal x2456=(py*sj0);
IkReal x2457=((4.86666666666667)*sj2);
IkReal x2458=((5.4)*cj2*sj3);
IkReal x2459=((5.4)*cj3*sj2);
IkReal x2460=((1.2)*cj2*cj3);
IkReal x2461=((1.2)*sj2*sj3);
j1eval[0]=(x2455+x2456+(((-1.0)*x2456*x2460))+((x2456*x2458))+((x2456*x2459))+((x2456*x2457))+(((-1.0)*x2455*x2460))+((x2456*x2461))+((x2455*x2458))+((x2455*x2459))+((x2455*x2457))+((x2455*x2461)));
j1eval[1]=((1.0)+x2461+x2459+x2458+x2457+(((-1.0)*x2460)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=((1.0375)+(((1.9125)*sj3))+(((-1.0)*pz)));
j1eval[1]=((1.0)+(((-1.2)*cj3))+(((5.4)*sj3)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x2462=(cj0*px);
IkReal x2463=((1.2)*cj3);
IkReal x2464=(py*sj0);
IkReal x2465=((5.4)*sj3);
j1eval[0]=(x2464+x2462+((x2464*x2465))+((x2462*x2465))+(((-1.0)*x2463*x2464))+(((-1.0)*x2462*x2463)));
j1eval[1]=((1.0)+x2465+(((-1.0)*x2463)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x2466=((5.4)*sj3);
IkReal x2467=((1.2)*cj3);
IkReal x2468=(cj0*py);
IkReal x2469=((5.91456736035049)*sj3);
IkReal x2470=((1.31434830230011)*cj3);
IkReal x2471=(px*sj0);
j1eval[0]=((-1.0)+((x2468*x2470))+x2467+(((-1.0)*x2468*x2469))+(((1.09529025191676)*x2471))+(((-1.0)*x2470*x2471))+(((-1.0)*x2466))+(((-1.09529025191676)*x2468))+((x2469*x2471)));
j1eval[1]=((1.0)+x2466+(((-1.0)*x2467)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.0368941812728069)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-2466757053.71498)+(((1196681824.51447)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2466757053.71498)+(((1196681824.51447)*pp))))+IKsqr(((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-2466757053.71498)+(((1196681824.51447)*pp))), ((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2472=IKsin(j1);
IkReal x2473=IKcos(j1);
CheckValue<IkReal> x2482=IKPowWithIntegerCheck(py,-1);
if(!x2482.valid){
continue;
}
IkReal x2474=x2482.value;
IkReal x2475=(py*sj0);
IkReal x2476=((0.0821467688937568)*pp);
IkReal x2477=(cj0*px);
IkReal x2478=(cj0*py);
IkReal x2479=((0.15)*x2473);
IkReal x2480=((1.0)*x2473);
IkReal x2481=(px*x2473);
evalcond[0]=((-1.12887774320343)+(((0.547645125958379)*pp))+(((-4.57636369784904e-10)*x2472)));
evalcond[1]=((((-4.57636369784904e-10)*x2473))+(((-1.0)*x2475))+(((-1.0)*x2477)));
evalcond[2]=(((sj0*x2481))+(((-0.913)*x2473))+((x2472*x2475))+((x2472*x2477))+(((-1.0)*x2478*x2480)));
evalcond[3]=((-4.57636369784904e-10)+((px*sj0*x2472))+(((-1.0)*x2477*x2480))+(((-0.913)*x2472))+(((-1.0)*x2472*x2478))+(((-1.0)*x2475*x2480)));
evalcond[4]=((6.86454554677356e-11)+(((0.169331661480515)*x2472))+(((-1.0)*x2474*x2476*x2481))+(((-1.0)*x2472*x2476))+(((0.0323816614805145)*x2474*x2481))+((sj0*x2474*x2479*(px*px)))+((x2475*x2479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.54203636406487)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-1382267358.83679)+(((1504414963.66099)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1382267358.83679)+(((1504414963.66099)*pp))))+IKsqr(((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1382267358.83679)+(((1504414963.66099)*pp))), ((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2483=IKsin(j1);
IkReal x2484=IKcos(j1);
CheckValue<IkReal> x2493=IKPowWithIntegerCheck(py,-1);
if(!x2493.valid){
continue;
}
IkReal x2485=x2493.value;
IkReal x2486=(py*sj0);
IkReal x2487=(cj0*px);
IkReal x2488=(cj0*py);
IkReal x2489=((0.0821467688937568)*pp);
IkReal x2490=((0.15)*x2484);
IkReal x2491=((1.0)*x2484);
IkReal x2492=(px*x2484);
evalcond[0]=((-0.503180306048136)+(((0.547645125958379)*pp))+(((-3.64025311623919e-10)*x2483)));
evalcond[1]=((((-1.0)*x2487))+(((-1.0)*x2486))+(((-3.64025311623919e-10)*x2484)));
evalcond[2]=(((x2483*x2486))+((x2483*x2487))+(((-0.913)*x2484))+(((-1.0)*x2488*x2491))+((sj0*x2492)));
evalcond[3]=((-3.64025311623919e-10)+(((-1.0)*x2486*x2491))+(((-0.913)*x2483))+(((-1.0)*x2483*x2488))+(((-1.0)*x2487*x2491))+((px*sj0*x2483)));
evalcond[4]=((5.46037967435879e-11)+(((-1.0)*x2485*x2489*x2492))+(((-0.0614729540927796)*x2485*x2492))+(((0.0754770459072204)*x2483))+((sj0*x2485*x2490*(px*px)))+((x2486*x2490))+(((-1.0)*x2483*x2489)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst0=((-0.542483660130719)+(((0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.542483660130719)+sj3+(((-0.522875816993464)*pz)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2494=((0.522875816993464)*pz);
IkReal x2495=((-0.54248366)+x2494);
sj2=0;
cj2=1.0;
j2=0;
sj3=x2495;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
if( (((0.54248366)+(((-1.0)*x2494)))) < -1-IKFAST_SINCOS_THRESH || (((0.54248366)+(((-1.0)*x2494)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((-1.0)*(IKasin(((0.54248366)+(((-1.0)*x2494))))));
IkReal gconst0=((-0.542483660130719)+x2494);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
j1eval[0]=((-1.60784313666667)+(((-1.0)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((2.35294117647059)*pz)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2496=((0.522875816993464)*pz);
IkReal x2497=((-0.54248366)+x2496);
sj2=0;
cj2=1.0;
j2=0;
sj3=x2497;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
if( (((0.54248366)+(((-1.0)*x2496)))) < -1-IKFAST_SINCOS_THRESH || (((0.54248366)+(((-1.0)*x2496)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((-1.0)*(IKasin(((0.54248366)+(((-1.0)*x2496))))));
IkReal gconst0=((-0.542483660130719)+x2496);
j1eval[0]=((-1.0)+(((-1.09529025191676)*cj0*py))+(((1.09529025191676)*px*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2498=((0.522875816993464)*pz);
IkReal x2499=((-0.54248366)+x2498);
sj2=0;
cj2=1.0;
j2=0;
sj3=x2499;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
if( (((0.54248366)+(((-1.0)*x2498)))) < -1-IKFAST_SINCOS_THRESH || (((0.54248366)+(((-1.0)*x2498)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((-1.0)*(IKasin(((0.54248366)+(((-1.0)*x2498))))));
IkReal gconst0=((-0.542483660130719)+x2498);
j1eval[0]=((((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2500=IKsin(j1);
IkReal x2501=IKcos(j1);
IkReal x2502=((0.211764705882353)*pz);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2503=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2504=((0.09)*x2503);
evalcond[0]=((-0.913)*x2501);
evalcond[1]=((-0.1447058823)+(((-1.0)*x2504))+x2502+(((-0.913)*x2500)));
evalcond[2]=((-0.889941176495)+(((-0.5535)*x2503))+(((1.30235294117647)*pz))+(((0.13695)*x2500)));
evalcond[3]=(((x2501*x2502))+(((-1.0)*x2501*x2504))+(((-0.1447058823)*x2501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*(py*py)))+(((-9857612267.25082)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2505=IKcos(j1);
IkReal x2506=IKsin(j1);
IkReal x2507=((0.211764705882353)*pz);
IkReal x2508=(py*x2506);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2509=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2510=((0.09)*x2509);
evalcond[0]=((((-1.0)*py*x2505))+(((-0.913)*x2505)));
evalcond[1]=(((x2505*x2507))+(((-1.0)*x2505*x2510))+(((-0.1447058823)*x2505)));
evalcond[2]=((-0.1447058823)+x2507+(((-1.0)*x2510))+(((-0.913)*x2506))+(((-1.0)*x2508)));
evalcond[3]=((-0.889941176495)+(((0.15)*x2508))+(((-0.5535)*x2509))+(((1.30235294117647)*pz))+(((0.13695)*x2506)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*(py*py)))+(((-9857612267.25082)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2511=IKcos(j1);
IkReal x2512=IKsin(j1);
IkReal x2513=((0.211764705882353)*pz);
IkReal x2514=(py*x2512);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2515=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2516=((0.09)*x2515);
evalcond[0]=(((py*x2511))+(((-0.913)*x2511)));
evalcond[1]=(((x2511*x2513))+(((-1.0)*x2511*x2516))+(((-0.1447058823)*x2511)));
evalcond[2]=((-0.1447058823)+x2514+x2513+(((-1.0)*x2516))+(((-0.913)*x2512)));
evalcond[3]=((-0.889941176495)+(((0.13695)*x2512))+(((-0.5535)*x2515))+(((-0.15)*x2514))+(((1.30235294117647)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*(px*px)))+(((-9857612267.25082)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2517=IKcos(j1);
IkReal x2518=IKsin(j1);
IkReal x2519=((0.211764705882353)*pz);
IkReal x2520=(px*x2518);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2521=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2522=((0.09)*x2521);
evalcond[0]=(((px*x2517))+(((-0.913)*x2517)));
evalcond[1]=((((-1.0)*x2517*x2522))+((x2517*x2519))+(((-0.1447058823)*x2517)));
evalcond[2]=((-0.1447058823)+x2520+x2519+(((-0.913)*x2518))+(((-1.0)*x2522)));
evalcond[3]=((-0.889941176495)+(((0.13695)*x2518))+(((-0.5535)*x2521))+(((1.30235294117647)*pz))+(((-0.15)*x2520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*(px*px)))+(((-9857612267.25082)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2523=IKcos(j1);
IkReal x2524=IKsin(j1);
IkReal x2525=((0.211764705882353)*pz);
IkReal x2526=(px*x2524);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2527=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2528=((0.09)*x2527);
evalcond[0]=((((-1.0)*px*x2523))+(((-0.913)*x2523)));
evalcond[1]=((((-1.0)*x2523*x2528))+(((-0.1447058823)*x2523))+((x2523*x2525)));
evalcond[2]=((-0.1447058823)+x2525+(((-0.913)*x2524))+(((-1.0)*x2526))+(((-1.0)*x2528)));
evalcond[3]=((-0.889941176495)+(((0.13695)*x2524))+(((-0.5535)*x2527))+(((1.30235294117647)*pz))+(((0.15)*x2526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2529=(cj0*py);
IkReal x2530=((9857612267.25082)*pp);
IkReal x2531=(px*sj0);
IkReal x2532=((13800657174.1511)*pz);
CheckValue<IkReal> x2533=IKPowWithIntegerCheck(((((-1.0)*py*sj0))+(((-1.0)*cj0*px))),-1);
if(!x2533.valid){
continue;
}
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
if( IKabs(((5028062431.62651)+x2532+(((-1.0)*x2530)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2533.value)*(((4590621000.21971)+((x2530*x2531))+(((0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((-5028062431.62651)*x2531))+(((12599999999.7882)*pz))+(((5028062431.62651)*x2529))+(((-1.0)*x2531*x2532))+((x2529*x2532))+(((-1.0)*x2529*x2530))+(((-9000000000.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5028062431.62651)+x2532+(((-1.0)*x2530))))+IKsqr(((x2533.value)*(((4590621000.21971)+((x2530*x2531))+(((0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((-5028062431.62651)*x2531))+(((12599999999.7882)*pz))+(((5028062431.62651)*x2529))+(((-1.0)*x2531*x2532))+((x2529*x2532))+(((-1.0)*x2529*x2530))+(((-9000000000.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((5028062431.62651)+x2532+(((-1.0)*x2530))), ((x2533.value)*(((4590621000.21971)+((x2530*x2531))+(((0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((-5028062431.62651)*x2531))+(((12599999999.7882)*pz))+(((5028062431.62651)*x2529))+(((-1.0)*x2531*x2532))+((x2529*x2532))+(((-1.0)*x2529*x2530))+(((-9000000000.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2534=IKsin(j1);
IkReal x2535=IKcos(j1);
IkReal x2536=((0.15)*py);
IkReal x2537=((0.211764705882353)*pz);
IkReal x2538=((1.0)*py);
IkReal x2539=(sj0*x2535);
IkReal x2540=(cj0*x2534);
IkReal x2541=(sj0*x2534);
IkReal x2542=(cj0*px*x2535);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2543=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2544=((0.09)*x2543);
evalcond[0]=((-0.279336801757028)+(((0.547645125958379)*pp))+(((-0.766703176341731)*pz))+(((5.55555555555556e-11)*x2534)));
evalcond[1]=(((px*x2539))+(((-1.0)*cj0*x2535*x2538))+(((-0.913)*x2535))+((py*x2541))+((px*x2540)));
evalcond[2]=((((-0.1447058823)*x2535))+(((-1.0)*sj0*x2538))+(((-1.0)*x2535*x2544))+(((-1.0)*cj0*px))+((x2535*x2537)));
evalcond[3]=((-0.1447058823)+x2537+(((-1.0)*x2538*x2539))+(((-1.0)*x2542))+(((-0.913)*x2534))+(((-1.0)*x2538*x2540))+((px*x2541))+(((-1.0)*x2544)));
evalcond[4]=((-0.889941176495)+((x2536*x2539))+(((-0.15)*px*x2541))+(((1.30235294117647)*pz))+((x2536*x2540))+(((-0.5535)*x2543))+(((0.15)*x2542))+(((0.13695)*x2534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2545=((13800657174.1511)*pz);
IkReal x2546=(py*sj0);
IkReal x2547=(cj0*px);
IkReal x2548=((9857612267.25082)*pp);
CheckValue<IkReal> x2549=IKPowWithIntegerCheck(((-0.913)+((px*sj0))+(((-1.0)*cj0*py))),-1);
if(!x2549.valid){
continue;
}
if( IKabs(((5028062431.62651)+x2545+(((-1.0)*x2548)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2549.value)*((((x2547*x2548))+(((-1.0)*x2545*x2547))+(((-1.0)*x2545*x2546))+(((-5028062431.62651)*x2546))+(((-5028062431.62651)*x2547))+((x2546*x2548)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5028062431.62651)+x2545+(((-1.0)*x2548))))+IKsqr(((x2549.value)*((((x2547*x2548))+(((-1.0)*x2545*x2547))+(((-1.0)*x2545*x2546))+(((-5028062431.62651)*x2546))+(((-5028062431.62651)*x2547))+((x2546*x2548))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((5028062431.62651)+x2545+(((-1.0)*x2548))), ((x2549.value)*((((x2547*x2548))+(((-1.0)*x2545*x2547))+(((-1.0)*x2545*x2546))+(((-5028062431.62651)*x2546))+(((-5028062431.62651)*x2547))+((x2546*x2548))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2550=IKsin(j1);
IkReal x2551=IKcos(j1);
IkReal x2552=((0.15)*py);
IkReal x2553=((0.211764705882353)*pz);
IkReal x2554=((1.0)*py);
IkReal x2555=(sj0*x2551);
IkReal x2556=(cj0*x2550);
IkReal x2557=(sj0*x2550);
IkReal x2558=(cj0*px*x2551);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2559=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2560=((0.09)*x2559);
evalcond[0]=((-0.279336801757028)+(((5.55555555555556e-11)*x2550))+(((0.547645125958379)*pp))+(((-0.766703176341731)*pz)));
evalcond[1]=((((-1.0)*cj0*x2551*x2554))+(((-0.913)*x2551))+((px*x2556))+((px*x2555))+((py*x2557)));
evalcond[2]=(((x2551*x2553))+(((-0.1447058823)*x2551))+(((-1.0)*x2551*x2560))+(((-1.0)*cj0*px))+(((-1.0)*sj0*x2554)));
evalcond[3]=((-0.1447058823)+x2553+(((-1.0)*x2554*x2555))+(((-1.0)*x2554*x2556))+(((-0.913)*x2550))+(((-1.0)*x2558))+(((-1.0)*x2560))+((px*x2557)));
evalcond[4]=((-0.889941176495)+(((0.13695)*x2550))+(((-0.5535)*x2559))+(((1.30235294117647)*pz))+(((-0.15)*px*x2557))+(((0.15)*x2558))+((x2552*x2556))+((x2552*x2555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x2561=IKPowWithIntegerCheck(((-0.1447058823)+(((-0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((0.211764705882353)*pz))),-1);
if(!x2561.valid){
continue;
}
if( IKabs(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2561.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp))))+IKsqr(((x2561.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp))), ((x2561.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2562=IKsin(j1);
IkReal x2563=IKcos(j1);
IkReal x2564=((0.15)*py);
IkReal x2565=((0.211764705882353)*pz);
IkReal x2566=((1.0)*py);
IkReal x2567=(sj0*x2563);
IkReal x2568=(cj0*x2562);
IkReal x2569=(sj0*x2562);
IkReal x2570=(cj0*px*x2563);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2571=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2572=((0.09)*x2571);
evalcond[0]=((-0.279336801757028)+(((0.547645125958379)*pp))+(((-0.766703176341731)*pz))+(((5.55555555555556e-11)*x2562)));
evalcond[1]=((((-1.0)*cj0*x2563*x2566))+((px*x2567))+((px*x2568))+((py*x2569))+(((-0.913)*x2563)));
evalcond[2]=((((-1.0)*sj0*x2566))+(((-1.0)*x2563*x2572))+(((-0.1447058823)*x2563))+((x2563*x2565))+(((-1.0)*cj0*px)));
evalcond[3]=((-0.1447058823)+x2565+(((-1.0)*x2566*x2567))+(((-1.0)*x2566*x2568))+(((-1.0)*x2570))+((px*x2569))+(((-1.0)*x2572))+(((-0.913)*x2562)));
evalcond[4]=((-0.889941176495)+(((0.13695)*x2562))+(((1.30235294117647)*pz))+(((-0.5535)*x2571))+(((-0.15)*px*x2569))+(((0.15)*x2570))+((x2564*x2568))+((x2564*x2567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst0=((-0.542483660130719)+(((0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.542483660130719)+sj3+(((-0.522875816993464)*pz)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2573=((0.522875816993464)*pz);
IkReal x2574=((-0.54248366)+x2573);
sj2=0;
cj2=1.0;
j2=0;
sj3=x2574;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))))));
if( (((0.54248366)+(((-1.0)*x2573)))) < -1-IKFAST_SINCOS_THRESH || (((0.54248366)+(((-1.0)*x2573)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(((1.0)*(IKasin(((0.54248366)+(((-1.0)*x2573))))))));
IkReal gconst0=((-0.542483660130719)+x2573);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
j1eval[0]=((-1.60784313666667)+(((2.35294117647059)*pz))+(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2575=((0.522875816993464)*pz);
IkReal x2576=((-0.54248366)+x2575);
sj2=0;
cj2=1.0;
j2=0;
sj3=x2576;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))))));
if( (x2576) < -1-IKFAST_SINCOS_THRESH || (x2576) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(((-1.0)*(IKasin(x2576)))));
IkReal gconst0=((-0.542483660130719)+x2575);
j1eval[0]=((-1.0)+(((-1.09529025191676)*cj0*py))+(((1.09529025191676)*px*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2577=((0.522875816993464)*pz);
IkReal x2578=((-0.54248366)+x2577);
sj2=0;
cj2=1.0;
j2=0;
sj3=x2578;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))))));
if( (((0.54248366)+(((-1.0)*x2577)))) < -1-IKFAST_SINCOS_THRESH || (((0.54248366)+(((-1.0)*x2577)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(((1.0)*(IKasin(((0.54248366)+(((-1.0)*x2577))))))));
IkReal gconst0=((-0.542483660130719)+x2577);
j1eval[0]=((((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2579=IKsin(j1);
IkReal x2580=IKcos(j1);
IkReal x2581=((0.211764705882353)*pz);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2582=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2583=((0.09)*x2582);
evalcond[0]=((-0.913)*x2580);
evalcond[1]=((-0.1447058823)+x2583+x2581+(((-0.913)*x2579)));
evalcond[2]=((-0.889941176495)+(((0.13695)*x2579))+(((1.30235294117647)*pz))+(((0.5535)*x2582)));
evalcond[3]=((((-0.1447058823)*x2580))+((x2580*x2583))+((x2580*x2581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*(py*py)))+(((-9857612267.25082)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2584=IKcos(j1);
IkReal x2585=IKsin(j1);
IkReal x2586=((0.211764705882353)*pz);
IkReal x2587=(py*x2585);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2588=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2589=((0.09)*x2588);
evalcond[0]=((((-0.913)*x2584))+(((-1.0)*py*x2584)));
evalcond[1]=(((x2584*x2586))+((x2584*x2589))+(((-0.1447058823)*x2584)));
evalcond[2]=((-0.1447058823)+(((-0.913)*x2585))+x2586+x2589+(((-1.0)*x2587)));
evalcond[3]=((-0.889941176495)+(((0.13695)*x2585))+(((1.30235294117647)*pz))+(((0.15)*x2587))+(((0.5535)*x2588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*(py*py)))+(((-9857612267.25082)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2590=IKcos(j1);
IkReal x2591=IKsin(j1);
IkReal x2592=((0.211764705882353)*pz);
IkReal x2593=(py*x2591);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2594=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2595=((0.09)*x2594);
evalcond[0]=(((py*x2590))+(((-0.913)*x2590)));
evalcond[1]=((((-0.1447058823)*x2590))+((x2590*x2592))+((x2590*x2595)));
evalcond[2]=((-0.1447058823)+x2595+x2592+x2593+(((-0.913)*x2591)));
evalcond[3]=((-0.889941176495)+(((-0.15)*x2593))+(((0.13695)*x2591))+(((1.30235294117647)*pz))+(((0.5535)*x2594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*(px*px)))+(((-9857612267.25082)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2596=IKcos(j1);
IkReal x2597=IKsin(j1);
IkReal x2598=((0.211764705882353)*pz);
IkReal x2599=(px*x2597);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2600=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2601=((0.09)*x2600);
evalcond[0]=(((px*x2596))+(((-0.913)*x2596)));
evalcond[1]=(((x2596*x2601))+(((-0.1447058823)*x2596))+((x2596*x2598)));
evalcond[2]=((-0.1447058823)+x2598+x2599+(((-0.913)*x2597))+x2601);
evalcond[3]=((-0.889941176495)+(((-0.15)*x2599))+(((0.13695)*x2597))+(((1.30235294117647)*pz))+(((0.5535)*x2600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*(px*px)))+(((-9857612267.25082)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2602=IKcos(j1);
IkReal x2603=IKsin(j1);
IkReal x2604=((0.211764705882353)*pz);
IkReal x2605=(px*x2603);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2606=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2607=((0.09)*x2606);
evalcond[0]=((((-1.0)*px*x2602))+(((-0.913)*x2602)));
evalcond[1]=((((-0.1447058823)*x2602))+((x2602*x2607))+((x2602*x2604)));
evalcond[2]=((-0.1447058823)+(((-1.0)*x2605))+(((-0.913)*x2603))+x2604+x2607);
evalcond[3]=((-0.889941176495)+(((0.15)*x2605))+(((1.30235294117647)*pz))+(((0.13695)*x2603))+(((0.5535)*x2606)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2608=((9857612267.25082)*pp);
IkReal x2609=(cj0*py);
IkReal x2610=(px*sj0);
IkReal x2611=((13800657174.1511)*pz);
CheckValue<IkReal> x2612=IKPowWithIntegerCheck(((((-1.0)*py*sj0))+(((-1.0)*cj0*px))),-1);
if(!x2612.valid){
continue;
}
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
if( IKabs(((5028062431.62651)+(((-1.0)*x2608))+x2611)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2612.value)*(((4590621000.21971)+(((-1.0)*x2608*x2609))+(((-1.0)*x2610*x2611))+(((-5028062431.62651)*x2610))+(((12599999999.7882)*pz))+(((5028062431.62651)*x2609))+(((-0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+((x2608*x2610))+((x2609*x2611))+(((-9000000000.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5028062431.62651)+(((-1.0)*x2608))+x2611))+IKsqr(((x2612.value)*(((4590621000.21971)+(((-1.0)*x2608*x2609))+(((-1.0)*x2610*x2611))+(((-5028062431.62651)*x2610))+(((12599999999.7882)*pz))+(((5028062431.62651)*x2609))+(((-0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+((x2608*x2610))+((x2609*x2611))+(((-9000000000.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((5028062431.62651)+(((-1.0)*x2608))+x2611), ((x2612.value)*(((4590621000.21971)+(((-1.0)*x2608*x2609))+(((-1.0)*x2610*x2611))+(((-5028062431.62651)*x2610))+(((12599999999.7882)*pz))+(((5028062431.62651)*x2609))+(((-0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+((x2608*x2610))+((x2609*x2611))+(((-9000000000.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2613=IKsin(j1);
IkReal x2614=IKcos(j1);
IkReal x2615=((0.15)*py);
IkReal x2616=((0.211764705882353)*pz);
IkReal x2617=((1.0)*py);
IkReal x2618=(sj0*x2614);
IkReal x2619=(cj0*x2613);
IkReal x2620=(sj0*x2613);
IkReal x2621=(cj0*px*x2614);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2622=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2623=((0.09)*x2622);
evalcond[0]=((-0.279336801757028)+(((5.55555555555556e-11)*x2613))+(((0.547645125958379)*pp))+(((-0.766703176341731)*pz)));
evalcond[1]=((((-1.0)*cj0*x2614*x2617))+((px*x2619))+((px*x2618))+(((-0.913)*x2614))+((py*x2620)));
evalcond[2]=((((-0.1447058823)*x2614))+((x2614*x2623))+((x2614*x2616))+(((-1.0)*sj0*x2617))+(((-1.0)*cj0*px)));
evalcond[3]=((-0.1447058823)+(((-1.0)*x2617*x2619))+(((-1.0)*x2617*x2618))+((px*x2620))+(((-1.0)*x2621))+(((-0.913)*x2613))+x2616+x2623);
evalcond[4]=((-0.889941176495)+(((0.5535)*x2622))+(((0.15)*x2621))+(((0.13695)*x2613))+((x2615*x2618))+((x2615*x2619))+(((1.30235294117647)*pz))+(((-0.15)*px*x2620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2624=((13800657174.1511)*pz);
IkReal x2625=(py*sj0);
IkReal x2626=(cj0*px);
IkReal x2627=((9857612267.25082)*pp);
CheckValue<IkReal> x2628=IKPowWithIntegerCheck(((-0.913)+((px*sj0))+(((-1.0)*cj0*py))),-1);
if(!x2628.valid){
continue;
}
if( IKabs(((5028062431.62651)+(((-1.0)*x2627))+x2624)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2628.value)*((((x2626*x2627))+(((-1.0)*x2624*x2625))+(((-1.0)*x2624*x2626))+(((-5028062431.62651)*x2626))+(((-5028062431.62651)*x2625))+((x2625*x2627)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5028062431.62651)+(((-1.0)*x2627))+x2624))+IKsqr(((x2628.value)*((((x2626*x2627))+(((-1.0)*x2624*x2625))+(((-1.0)*x2624*x2626))+(((-5028062431.62651)*x2626))+(((-5028062431.62651)*x2625))+((x2625*x2627))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((5028062431.62651)+(((-1.0)*x2627))+x2624), ((x2628.value)*((((x2626*x2627))+(((-1.0)*x2624*x2625))+(((-1.0)*x2624*x2626))+(((-5028062431.62651)*x2626))+(((-5028062431.62651)*x2625))+((x2625*x2627))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2629=IKsin(j1);
IkReal x2630=IKcos(j1);
IkReal x2631=((0.15)*py);
IkReal x2632=((0.211764705882353)*pz);
IkReal x2633=((1.0)*py);
IkReal x2634=(sj0*x2630);
IkReal x2635=(cj0*x2629);
IkReal x2636=(sj0*x2629);
IkReal x2637=(cj0*px*x2630);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2638=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2639=((0.09)*x2638);
evalcond[0]=((-0.279336801757028)+(((0.547645125958379)*pp))+(((5.55555555555556e-11)*x2629))+(((-0.766703176341731)*pz)));
evalcond[1]=((((-0.913)*x2630))+((py*x2636))+(((-1.0)*cj0*x2630*x2633))+((px*x2634))+((px*x2635)));
evalcond[2]=((((-1.0)*sj0*x2633))+(((-0.1447058823)*x2630))+((x2630*x2632))+((x2630*x2639))+(((-1.0)*cj0*px)));
evalcond[3]=((-0.1447058823)+(((-0.913)*x2629))+((px*x2636))+(((-1.0)*x2637))+(((-1.0)*x2633*x2634))+(((-1.0)*x2633*x2635))+x2639+x2632);
evalcond[4]=((-0.889941176495)+(((0.13695)*x2629))+(((1.30235294117647)*pz))+(((-0.15)*px*x2636))+(((0.5535)*x2638))+(((0.15)*x2637))+((x2631*x2635))+((x2631*x2634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x2640=IKPowWithIntegerCheck(((-0.1447058823)+(((0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((0.211764705882353)*pz))),-1);
if(!x2640.valid){
continue;
}
if( IKabs(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2640.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp))))+IKsqr(((x2640.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((5028062431.62651)+(((13800657174.1511)*pz))+(((-9857612267.25082)*pp))), ((x2640.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2641=IKsin(j1);
IkReal x2642=IKcos(j1);
IkReal x2643=((0.15)*py);
IkReal x2644=((0.211764705882353)*pz);
IkReal x2645=((1.0)*py);
IkReal x2646=(sj0*x2642);
IkReal x2647=(cj0*x2641);
IkReal x2648=(sj0*x2641);
IkReal x2649=(cj0*px*x2642);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2650=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2651=((0.09)*x2650);
evalcond[0]=((-0.279336801757028)+(((0.547645125958379)*pp))+(((-0.766703176341731)*pz))+(((5.55555555555556e-11)*x2641)));
evalcond[1]=((((-0.913)*x2642))+((px*x2647))+((px*x2646))+(((-1.0)*cj0*x2642*x2645))+((py*x2648)));
evalcond[2]=((((-1.0)*sj0*x2645))+(((-0.1447058823)*x2642))+((x2642*x2651))+((x2642*x2644))+(((-1.0)*cj0*px)));
evalcond[3]=((-0.1447058823)+(((-0.913)*x2641))+((px*x2648))+(((-1.0)*x2645*x2647))+(((-1.0)*x2645*x2646))+(((-1.0)*x2649))+x2644+x2651);
evalcond[4]=((-0.889941176495)+(((-0.15)*px*x2648))+(((1.30235294117647)*pz))+(((0.5535)*x2650))+(((0.13695)*x2641))+(((0.15)*x2649))+((x2643*x2646))+((x2643*x2647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2652=cj0*cj0;
IkReal x2653=py*py;
IkReal x2654=(cj0*px);
IkReal x2655=((0.09)*cj3);
IkReal x2656=(py*sj0);
IkReal x2657=(cj0*py);
IkReal x2658=(px*sj0);
IkReal x2659=((0.405)*sj3);
CheckValue<IkReal> x2660=IKPowWithIntegerCheck(((-0.068475)+((x2658*x2659))+((x2655*x2657))+(((-0.369765)*sj3))+(((0.075)*x2658))+(((-1.0)*x2657*x2659))+(((-1.0)*x2655*x2658))+(((0.08217)*cj3))+(((-0.075)*x2657))),-1);
if(!x2660.valid){
continue;
}
CheckValue<IkReal> x2661=IKPowWithIntegerCheck(((0.075)+(((-1.0)*x2655))+x2659),-1);
if(!x2661.valid){
continue;
}
if( IKabs(((x2660.value)*(((-0.16965)+((x2652*(px*px)))+(((-1.0)*x2652*x2653))+(((0.155925)*(cj3*cj3)))+(((2.0)*x2654*x2656))+(((0.0135)*cj3))+(((-0.06075)*sj3))+(((0.0729)*cj3*sj3))+x2653)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2661.value)*((x2656+x2654)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2660.value)*(((-0.16965)+((x2652*(px*px)))+(((-1.0)*x2652*x2653))+(((0.155925)*(cj3*cj3)))+(((2.0)*x2654*x2656))+(((0.0135)*cj3))+(((-0.06075)*sj3))+(((0.0729)*cj3*sj3))+x2653))))+IKsqr(((x2661.value)*((x2656+x2654))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2660.value)*(((-0.16965)+((x2652*(px*px)))+(((-1.0)*x2652*x2653))+(((0.155925)*(cj3*cj3)))+(((2.0)*x2654*x2656))+(((0.0135)*cj3))+(((-0.06075)*sj3))+(((0.0729)*cj3*sj3))+x2653))), ((x2661.value)*((x2656+x2654))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2662=IKcos(j1);
IkReal x2663=IKsin(j1);
IkReal x2664=((0.15)*py);
IkReal x2665=((0.09)*cj3);
IkReal x2666=((1.0)*py);
IkReal x2667=((0.405)*sj3);
IkReal x2668=(sj0*x2662);
IkReal x2669=(cj0*x2663);
IkReal x2670=(sj0*x2663);
IkReal x2671=(cj0*px*x2662);
evalcond[0]=((((-1.0)*sj0*x2666))+((x2662*x2667))+(((-1.0)*x2662*x2665))+(((0.075)*x2662))+(((-1.0)*cj0*px)));
evalcond[1]=((-0.298276195691858)+(((0.425)*sj3*x2663))+(((0.547645125958379)*pp))+(((0.230555555555556)*x2663))+(((-0.0349123767798467)*sj3))+(((-0.748448338809785)*pz))+(((-0.222222222222222)*pz*x2663)));
evalcond[2]=((((-0.913)*x2662))+((px*x2669))+((px*x2668))+(((-1.0)*cj0*x2662*x2666))+((py*x2670)));
evalcond[3]=((0.075)+(((-1.0)*x2671))+(((-0.913)*x2663))+((px*x2670))+(((-1.0)*x2665))+(((-1.0)*x2666*x2668))+(((-1.0)*x2666*x2669))+x2667);
evalcond[4]=((-1.157069)+(((-1.826)*cj0*py))+(((-0.15)*px*x2670))+(((1.826)*px*sj0))+((x2664*x2669))+((x2664*x2668))+(((-1.0)*pp))+(((0.13695)*x2663))+(((1.4)*pz))+(((0.15)*x2671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2672=(cj0*px);
IkReal x2673=((0.09)*cj3);
IkReal x2674=(py*sj0);
IkReal x2675=((0.405)*sj3);
IkReal x2676=(px*py);
IkReal x2677=(cj0*sj0);
CheckValue<IkReal> x2678=IKPowWithIntegerCheck((((x2672*x2675))+(((0.075)*x2674))+(((0.075)*x2672))+(((-1.0)*x2673*x2674))+(((-1.0)*x2672*x2673))+((x2674*x2675))),-1);
if(!x2678.valid){
continue;
}
CheckValue<IkReal> x2679=IKPowWithIntegerCheck(((0.075)+(((-1.0)*x2673))+x2675),-1);
if(!x2679.valid){
continue;
}
if( IKabs(((x2678.value)*(((((-1.0)*x2676))+(((0.913)*x2674))+(((0.913)*x2672))+((cj0*py*x2674))+(((2.0)*cj0*py*x2672))+(((-1.0)*px*sj0*x2672)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2679.value)*((x2672+x2674)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2678.value)*(((((-1.0)*x2676))+(((0.913)*x2674))+(((0.913)*x2672))+((cj0*py*x2674))+(((2.0)*cj0*py*x2672))+(((-1.0)*px*sj0*x2672))))))+IKsqr(((x2679.value)*((x2672+x2674))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2678.value)*(((((-1.0)*x2676))+(((0.913)*x2674))+(((0.913)*x2672))+((cj0*py*x2674))+(((2.0)*cj0*py*x2672))+(((-1.0)*px*sj0*x2672))))), ((x2679.value)*((x2672+x2674))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2680=IKcos(j1);
IkReal x2681=IKsin(j1);
IkReal x2682=((0.15)*py);
IkReal x2683=((0.09)*cj3);
IkReal x2684=((1.0)*py);
IkReal x2685=((0.405)*sj3);
IkReal x2686=(sj0*x2680);
IkReal x2687=(cj0*x2681);
IkReal x2688=(sj0*x2681);
IkReal x2689=(cj0*px*x2680);
evalcond[0]=((((-1.0)*x2680*x2683))+(((-1.0)*sj0*x2684))+(((0.075)*x2680))+((x2680*x2685))+(((-1.0)*cj0*px)));
evalcond[1]=((-0.298276195691858)+(((0.425)*sj3*x2681))+(((0.547645125958379)*pp))+(((-0.222222222222222)*pz*x2681))+(((-0.0349123767798467)*sj3))+(((0.230555555555556)*x2681))+(((-0.748448338809785)*pz)));
evalcond[2]=((((-1.0)*cj0*x2680*x2684))+((py*x2688))+((px*x2687))+((px*x2686))+(((-0.913)*x2680)));
evalcond[3]=((0.075)+(((-1.0)*x2684*x2686))+(((-1.0)*x2684*x2687))+(((-1.0)*x2683))+(((-1.0)*x2689))+((px*x2688))+x2685+(((-0.913)*x2681)));
evalcond[4]=((-1.157069)+(((0.13695)*x2681))+(((-1.826)*cj0*py))+(((-0.15)*px*x2688))+(((1.826)*px*sj0))+(((-1.0)*pp))+(((0.15)*x2689))+((x2682*x2686))+((x2682*x2687))+(((1.4)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2690=IKPowWithIntegerCheck(((0.230555555555556)+(((-0.222222222222222)*pz))+(((0.425)*sj3))),-1);
if(!x2690.valid){
continue;
}
CheckValue<IkReal> x2691=IKPowWithIntegerCheck(((0.075)+(((0.405)*sj3))+(((-0.09)*cj3))),-1);
if(!x2691.valid){
continue;
}
if( IKabs(((x2690.value)*(((0.298276195691858)+(((0.0349123767798467)*sj3))+(((-0.547645125958379)*pp))+(((0.748448338809785)*pz)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2691.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2690.value)*(((0.298276195691858)+(((0.0349123767798467)*sj3))+(((-0.547645125958379)*pp))+(((0.748448338809785)*pz))))))+IKsqr(((x2691.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2690.value)*(((0.298276195691858)+(((0.0349123767798467)*sj3))+(((-0.547645125958379)*pp))+(((0.748448338809785)*pz))))), ((x2691.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2692=IKcos(j1);
IkReal x2693=IKsin(j1);
IkReal x2694=((0.15)*py);
IkReal x2695=((0.09)*cj3);
IkReal x2696=((1.0)*py);
IkReal x2697=((0.405)*sj3);
IkReal x2698=(sj0*x2692);
IkReal x2699=(cj0*x2693);
IkReal x2700=(sj0*x2693);
IkReal x2701=(cj0*px*x2692);
evalcond[0]=((((-1.0)*x2692*x2695))+(((0.075)*x2692))+(((-1.0)*cj0*px))+((x2692*x2697))+(((-1.0)*sj0*x2696)));
evalcond[1]=((-0.298276195691858)+(((0.547645125958379)*pp))+(((-0.0349123767798467)*sj3))+(((0.230555555555556)*x2693))+(((-0.222222222222222)*pz*x2693))+(((0.425)*sj3*x2693))+(((-0.748448338809785)*pz)));
evalcond[2]=((((-0.913)*x2692))+(((-1.0)*cj0*x2692*x2696))+((py*x2700))+((px*x2698))+((px*x2699)));
evalcond[3]=((0.075)+(((-0.913)*x2693))+(((-1.0)*x2696*x2699))+(((-1.0)*x2696*x2698))+((px*x2700))+(((-1.0)*x2695))+(((-1.0)*x2701))+x2697);
evalcond[4]=((-1.157069)+(((-1.826)*cj0*py))+(((0.15)*x2701))+(((-0.15)*px*x2700))+(((1.826)*px*sj0))+(((-1.0)*pp))+((x2694*x2698))+((x2694*x2699))+(((0.13695)*x2693))+(((1.4)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=((1.0)+(((-3.2520325203252)*pz))+(((-6.21951219512195)*sj3)));
j1eval[1]=((1.0)+(((1.2)*cj3))+(((-5.4)*sj3)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x2702=(cj0*px);
IkReal x2703=((1.2)*cj3);
IkReal x2704=(py*sj0);
IkReal x2705=((5.4)*sj3);
j1eval[0]=(x2704+x2702+(((-1.0)*x2702*x2705))+(((-1.0)*x2704*x2705))+((x2703*x2704))+((x2702*x2703)));
j1eval[1]=((1.0)+x2703+(((-1.0)*x2705)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x2706=((6.21951219512195)*sj3);
IkReal x2707=((3.2520325203252)*pz);
IkReal x2708=(px*sj0);
IkReal x2709=((3.56191951842848)*pz);
IkReal x2710=(cj0*py);
IkReal x2711=((6.81217107899447)*sj3);
IkReal x2712=(x2707+x2706);
j1eval[0]=((1.0)+(((-1.0)*x2712)));
j1eval[1]=((-1.0)+x2712+(((-1.0)*x2708*x2709))+(((-1.09529025191676)*x2710))+((x2709*x2710))+(((-1.0)*x2708*x2711))+((x2710*x2711))+(((1.09529025191676)*x2708)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal gconst1=((0.16078431372549)+(((-0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.16078431372549)+sj3+(((0.522875816993464)*pz)))))+(IKabs(((-1.0)+(IKsign(cj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2713=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x2713)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
if( (((0.160784313599385)+(((-1.0)*x2713)))) < -1-IKFAST_SINCOS_THRESH || (((0.160784313599385)+(((-1.0)*x2713)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((1.0)*(IKasin(((0.160784313599385)+(((-1.0)*x2713))))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x2713)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
j1eval[0]=((1.0)+(((21.4285713178271)*pz))+(((9.10714281007653)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2714=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x2714)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
if( (((-0.160784313599385)+x2714)) < -1-IKFAST_SINCOS_THRESH || (((-0.160784313599385)+x2714)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((-1.0)*(IKasin(((-0.160784313599385)+x2714))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x2714)));
j1eval[0]=((-1.0)+(((-1.09529025191676)*cj0*py))+(((1.09529025191676)*px*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2715=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x2715)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
if( (((-0.160784313599385)+x2715)) < -1-IKFAST_SINCOS_THRESH || (((-0.160784313599385)+x2715)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((-1.0)*(IKasin(((-0.160784313599385)+x2715))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x2715)));
j1eval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((10209765255.3315)+(((-10218256626.506)*(pz*pz)))+(((-613095397.590361)*pz)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2716=IKsin(j1);
IkReal x2717=IKcos(j1);
IkReal x2718=((0.211764705882353)*pz);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2719=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2720=((0.09)*x2719);
evalcond[0]=((-0.913)*x2717);
evalcond[1]=((-0.00988235299224913)+(((0.913)*x2716))+(((-1.0)*x2718))+(((-1.0)*x2720)));
evalcond[2]=((-0.00415058824227405)+(((0.13695)*x2716))+(((-0.0378)*x2719))+(((-0.0889411764705882)*pz)));
evalcond[3]=(((x2717*x2720))+(((0.00988235299224913)*x2717))+((x2717*x2718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((10209765255.3315)+(((-10218256626.506)*(pz*pz)))+(((-613095397.590361)*pz))+(((-10218256626.506)*(py*py))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2721=IKcos(j1);
IkReal x2722=IKsin(j1);
IkReal x2723=((0.211764705882353)*pz);
IkReal x2724=(py*x2722);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2725=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2726=((0.09)*x2725);
evalcond[0]=((((-1.0)*py*x2721))+(((-0.913)*x2721)));
evalcond[1]=((((0.00988235299224913)*x2721))+((x2721*x2723))+((x2721*x2726)));
evalcond[2]=((-0.00988235299224913)+x2724+(((0.913)*x2722))+(((-1.0)*x2726))+(((-1.0)*x2723)));
evalcond[3]=((-0.00415058824227405)+(((0.13695)*x2722))+(((-0.0378)*x2725))+(((-0.0889411764705882)*pz))+(((0.15)*x2724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((10209765255.3315)+(((-10218256626.506)*(pz*pz)))+(((-613095397.590361)*pz))+(((-10218256626.506)*(py*py))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2727=IKcos(j1);
IkReal x2728=IKsin(j1);
IkReal x2729=((0.211764705882353)*pz);
IkReal x2730=(py*x2728);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2731=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2732=((0.09)*x2731);
evalcond[0]=((((-0.913)*x2727))+((py*x2727)));
evalcond[1]=((((0.00988235299224913)*x2727))+((x2727*x2729))+((x2727*x2732)));
evalcond[2]=((-0.00988235299224913)+(((-1.0)*x2730))+(((0.913)*x2728))+(((-1.0)*x2729))+(((-1.0)*x2732)));
evalcond[3]=((-0.00415058824227405)+(((-0.15)*x2730))+(((-0.0378)*x2731))+(((0.13695)*x2728))+(((-0.0889411764705882)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((10209765255.3315)+(((-10218256626.506)*(pz*pz)))+(((-10218256626.506)*(px*px)))+(((-613095397.590361)*pz)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2733=IKcos(j1);
IkReal x2734=IKsin(j1);
IkReal x2735=((0.211764705882353)*pz);
IkReal x2736=(px*x2734);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2737=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2738=((0.09)*x2737);
evalcond[0]=(((px*x2733))+(((-0.913)*x2733)));
evalcond[1]=((((0.00988235299224913)*x2733))+((x2733*x2738))+((x2733*x2735)));
evalcond[2]=((-0.00988235299224913)+(((-1.0)*x2736))+(((0.913)*x2734))+(((-1.0)*x2735))+(((-1.0)*x2738)));
evalcond[3]=((-0.00415058824227405)+(((-0.15)*x2736))+(((-0.0378)*x2737))+(((-0.0889411764705882)*pz))+(((0.13695)*x2734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((10209765255.3315)+(((-10218256626.506)*(pz*pz)))+(((-10218256626.506)*(px*px)))+(((-613095397.590361)*pz)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2739=IKcos(j1);
IkReal x2740=IKsin(j1);
IkReal x2741=((0.211764705882353)*pz);
IkReal x2742=(px*x2740);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2743=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2744=((0.09)*x2743);
evalcond[0]=((((-1.0)*px*x2739))+(((-0.913)*x2739)));
evalcond[1]=(((x2739*x2744))+((x2739*x2741))+(((0.00988235299224913)*x2739)));
evalcond[2]=((-0.00988235299224913)+x2742+(((-1.0)*x2744))+(((-1.0)*x2741))+(((0.913)*x2740)));
evalcond[3]=((-0.00415058824227405)+(((0.15)*x2742))+(((-0.0889411764705882)*pz))+(((0.13695)*x2740))+(((-0.0378)*x2743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2745=((10218256626.506)*pp);
IkReal x2746=(cj0*py);
IkReal x2747=((613095397.590361)*pz);
IkReal x2748=(px*sj0);
CheckValue<IkReal> x2749=IKPowWithIntegerCheck((((cj0*px))+((py*sj0))),-1);
if(!x2749.valid){
continue;
}
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
if( IKabs(((10209765255.3315)+(((-1.0)*x2745))+(((-1.0)*x2747)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2749.value)*(((-9321515678.10782)+(((-1.0)*x2747*x2748))+((x2746*x2747))+(((-1.0)*x2745*x2748))+(((-10209765255.3315)*x2746))+(((9329268300.0)*pp))+(((0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+((x2745*x2746))+(((559756098.211765)*pz))+(((10209765255.3315)*x2748)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((10209765255.3315)+(((-1.0)*x2745))+(((-1.0)*x2747))))+IKsqr(((x2749.value)*(((-9321515678.10782)+(((-1.0)*x2747*x2748))+((x2746*x2747))+(((-1.0)*x2745*x2748))+(((-10209765255.3315)*x2746))+(((9329268300.0)*pp))+(((0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+((x2745*x2746))+(((559756098.211765)*pz))+(((10209765255.3315)*x2748))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((10209765255.3315)+(((-1.0)*x2745))+(((-1.0)*x2747))), ((x2749.value)*(((-9321515678.10782)+(((-1.0)*x2747*x2748))+((x2746*x2747))+(((-1.0)*x2745*x2748))+(((-10209765255.3315)*x2746))+(((9329268300.0)*pp))+(((0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+((x2745*x2746))+(((559756098.211765)*pz))+(((10209765255.3315)*x2748))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2750=IKsin(j1);
IkReal x2751=IKcos(j1);
IkReal x2752=((0.15)*py);
IkReal x2753=((0.15)*px);
IkReal x2754=((0.211764705882353)*pz);
IkReal x2755=((1.0)*py);
IkReal x2756=((1.0)*px);
IkReal x2757=(sj0*x2751);
IkReal x2758=(cj0*x2750);
IkReal x2759=(sj0*x2750);
IkReal x2760=(cj0*x2751);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2761=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2762=((0.09)*x2761);
evalcond[0]=((-0.54719003286311)+(((0.547645125958379)*pp))+(((5.3594771199795e-11)*x2750))+(((0.0328587075575027)*pz)));
evalcond[1]=((((-1.0)*x2755*x2760))+(((-0.913)*x2751))+((px*x2757))+((px*x2758))+((py*x2759)));
evalcond[2]=((((-1.0)*sj0*x2755))+(((-1.0)*cj0*x2756))+((x2751*x2762))+(((0.00988235299224913)*x2751))+((x2751*x2754)));
evalcond[3]=((-0.00988235299224913)+(((-1.0)*x2756*x2759))+(((-1.0)*x2762))+((px*x2760))+(((0.913)*x2750))+(((-1.0)*x2754))+((py*x2757))+((py*x2758)));
evalcond[4]=((-0.00415058824227405)+((x2752*x2757))+((x2752*x2758))+(((0.13695)*x2750))+(((-1.0)*x2753*x2759))+(((-0.0889411764705882)*pz))+(((-0.0378)*x2761))+((x2753*x2760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2763=(cj0*px);
IkReal x2764=((10218256626.506)*pp);
IkReal x2765=(py*sj0);
IkReal x2766=((613095397.590361)*pz);
CheckValue<IkReal> x2767=IKPowWithIntegerCheck(((-0.913)+((px*sj0))+(((-1.0)*cj0*py))),-1);
if(!x2767.valid){
continue;
}
if( IKabs(((10209765255.3315)+(((-1.0)*x2766))+(((-1.0)*x2764)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2767.value)*((((x2765*x2766))+(((-10209765255.3315)*x2763))+(((-10209765255.3315)*x2765))+((x2764*x2765))+((x2763*x2766))+((x2763*x2764)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((10209765255.3315)+(((-1.0)*x2766))+(((-1.0)*x2764))))+IKsqr(((x2767.value)*((((x2765*x2766))+(((-10209765255.3315)*x2763))+(((-10209765255.3315)*x2765))+((x2764*x2765))+((x2763*x2766))+((x2763*x2764))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((10209765255.3315)+(((-1.0)*x2766))+(((-1.0)*x2764))), ((x2767.value)*((((x2765*x2766))+(((-10209765255.3315)*x2763))+(((-10209765255.3315)*x2765))+((x2764*x2765))+((x2763*x2766))+((x2763*x2764))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2768=IKsin(j1);
IkReal x2769=IKcos(j1);
IkReal x2770=((0.15)*py);
IkReal x2771=((0.15)*px);
IkReal x2772=((0.211764705882353)*pz);
IkReal x2773=((1.0)*py);
IkReal x2774=((1.0)*px);
IkReal x2775=(sj0*x2769);
IkReal x2776=(cj0*x2768);
IkReal x2777=(sj0*x2768);
IkReal x2778=(cj0*x2769);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2779=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2780=((0.09)*x2779);
evalcond[0]=((-0.54719003286311)+(((0.547645125958379)*pp))+(((5.3594771199795e-11)*x2768))+(((0.0328587075575027)*pz)));
evalcond[1]=((((-0.913)*x2769))+(((-1.0)*x2773*x2778))+((px*x2775))+((px*x2776))+((py*x2777)));
evalcond[2]=(((x2769*x2772))+(((0.00988235299224913)*x2769))+((x2769*x2780))+(((-1.0)*cj0*x2774))+(((-1.0)*sj0*x2773)));
evalcond[3]=((-0.00988235299224913)+(((-1.0)*x2780))+(((0.913)*x2768))+((px*x2778))+(((-1.0)*x2772))+(((-1.0)*x2774*x2777))+((py*x2776))+((py*x2775)));
evalcond[4]=((-0.00415058824227405)+((x2770*x2776))+((x2770*x2775))+((x2771*x2778))+(((-0.0889411764705882)*pz))+(((-1.0)*x2771*x2777))+(((-0.0378)*x2779))+(((0.13695)*x2768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
CheckValue<IkReal> x2781=IKPowWithIntegerCheck(((0.00988235299224913)+(((0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((0.211764705882353)*pz))),-1);
if(!x2781.valid){
continue;
}
if( IKabs(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2781.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp))))+IKsqr(((x2781.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp))), ((x2781.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2782=IKsin(j1);
IkReal x2783=IKcos(j1);
IkReal x2784=((0.15)*py);
IkReal x2785=((0.15)*px);
IkReal x2786=((0.211764705882353)*pz);
IkReal x2787=((1.0)*py);
IkReal x2788=((1.0)*px);
IkReal x2789=(sj0*x2783);
IkReal x2790=(cj0*x2782);
IkReal x2791=(sj0*x2782);
IkReal x2792=(cj0*x2783);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2793=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2794=((0.09)*x2793);
evalcond[0]=((-0.54719003286311)+(((0.547645125958379)*pp))+(((5.3594771199795e-11)*x2782))+(((0.0328587075575027)*pz)));
evalcond[1]=((((-1.0)*x2787*x2792))+((py*x2791))+(((-0.913)*x2783))+((px*x2790))+((px*x2789)));
evalcond[2]=((((-1.0)*sj0*x2787))+((x2783*x2786))+((x2783*x2794))+(((-1.0)*cj0*x2788))+(((0.00988235299224913)*x2783)));
evalcond[3]=((-0.00988235299224913)+(((-1.0)*x2786))+(((-1.0)*x2794))+((py*x2789))+((py*x2790))+((px*x2792))+(((0.913)*x2782))+(((-1.0)*x2788*x2791)));
evalcond[4]=((-0.00415058824227405)+(((-0.0378)*x2793))+((x2785*x2792))+(((0.13695)*x2782))+((x2784*x2790))+((x2784*x2789))+(((-1.0)*x2785*x2791))+(((-0.0889411764705882)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst1=((0.16078431372549)+(((-0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.16078431372549)+sj3+(((0.522875816993464)*pz)))))+(IKabs(((1.0)+(IKsign(cj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2795=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x2795)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))))));
if( (((-0.160784313599385)+x2795)) < -1-IKFAST_SINCOS_THRESH || (((-0.160784313599385)+x2795)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(IKasin(((-0.160784313599385)+x2795))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x2795)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
j1eval[0]=((1.0)+(((-9.10714281007653)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((21.4285713178271)*pz)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2796=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x2796)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))))));
if( (((0.160784313599385)+(((-1.0)*x2796)))) < -1-IKFAST_SINCOS_THRESH || (((0.160784313599385)+(((-1.0)*x2796)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(((-1.0)*(IKasin(((0.160784313599385)+(((-1.0)*x2796))))))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x2796)));
j1eval[0]=((-1.0)+(((-1.09529025191676)*cj0*py))+(((1.09529025191676)*px*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2797=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x2797)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))))));
if( (((0.160784313599385)+(((-1.0)*x2797)))) < -1-IKFAST_SINCOS_THRESH || (((0.160784313599385)+(((-1.0)*x2797)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(((-1.0)*(IKasin(((0.160784313599385)+(((-1.0)*x2797))))))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x2797)));
j1eval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((10209765255.3315)+(((-10218256626.506)*(pz*pz)))+(((-613095397.590361)*pz)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2798=IKsin(j1);
IkReal x2799=IKcos(j1);
IkReal x2800=((0.211764705882353)*pz);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2801=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2802=((0.09)*x2801);
evalcond[0]=((-0.913)*x2799);
evalcond[1]=((-0.00988235299224913)+(((-1.0)*x2800))+(((0.913)*x2798))+x2802);
evalcond[2]=((-0.00415058824227405)+(((0.13695)*x2798))+(((0.0378)*x2801))+(((-0.0889411764705882)*pz)));
evalcond[3]=((((-1.0)*x2799*x2802))+((x2799*x2800))+(((0.00988235299224913)*x2799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((10209765255.3315)+(((-10218256626.506)*(pz*pz)))+(((-613095397.590361)*pz))+(((-10218256626.506)*(py*py))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2803=IKcos(j1);
IkReal x2804=IKsin(j1);
IkReal x2805=((0.211764705882353)*pz);
IkReal x2806=(py*x2804);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2807=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2808=((0.09)*x2807);
evalcond[0]=((((-1.0)*py*x2803))+(((-0.913)*x2803)));
evalcond[1]=((((-1.0)*x2803*x2808))+((x2803*x2805))+(((0.00988235299224913)*x2803)));
evalcond[2]=((-0.00988235299224913)+(((-1.0)*x2805))+(((0.913)*x2804))+x2808+x2806);
evalcond[3]=((-0.00415058824227405)+(((0.15)*x2806))+(((0.0378)*x2807))+(((-0.0889411764705882)*pz))+(((0.13695)*x2804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((10209765255.3315)+(((-10218256626.506)*(pz*pz)))+(((-613095397.590361)*pz))+(((-10218256626.506)*(py*py))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2809=IKcos(j1);
IkReal x2810=IKsin(j1);
IkReal x2811=((0.211764705882353)*pz);
IkReal x2812=(py*x2810);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2813=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2814=((0.09)*x2813);
evalcond[0]=(((py*x2809))+(((-0.913)*x2809)));
evalcond[1]=(((x2809*x2811))+(((-1.0)*x2809*x2814))+(((0.00988235299224913)*x2809)));
evalcond[2]=((-0.00988235299224913)+(((0.913)*x2810))+(((-1.0)*x2812))+(((-1.0)*x2811))+x2814);
evalcond[3]=((-0.00415058824227405)+(((0.0378)*x2813))+(((0.13695)*x2810))+(((-0.0889411764705882)*pz))+(((-0.15)*x2812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((10209765255.3315)+(((-10218256626.506)*(pz*pz)))+(((-10218256626.506)*(px*px)))+(((-613095397.590361)*pz)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2815=IKcos(j1);
IkReal x2816=IKsin(j1);
IkReal x2817=((0.211764705882353)*pz);
IkReal x2818=(px*x2816);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2819=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2820=((0.09)*x2819);
evalcond[0]=(((px*x2815))+(((-0.913)*x2815)));
evalcond[1]=((((0.00988235299224913)*x2815))+((x2815*x2817))+(((-1.0)*x2815*x2820)));
evalcond[2]=((-0.00988235299224913)+(((0.913)*x2816))+(((-1.0)*x2818))+(((-1.0)*x2817))+x2820);
evalcond[3]=((-0.00415058824227405)+(((0.0378)*x2819))+(((0.13695)*x2816))+(((-0.0889411764705882)*pz))+(((-0.15)*x2818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((10209765255.3315)+(((-10218256626.506)*(pz*pz)))+(((-10218256626.506)*(px*px)))+(((-613095397.590361)*pz)));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2821=IKcos(j1);
IkReal x2822=IKsin(j1);
IkReal x2823=((0.211764705882353)*pz);
IkReal x2824=(px*x2822);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2825=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2826=((0.09)*x2825);
evalcond[0]=((((-0.913)*x2821))+(((-1.0)*px*x2821)));
evalcond[1]=(((x2821*x2823))+(((-1.0)*x2821*x2826))+(((0.00988235299224913)*x2821)));
evalcond[2]=((-0.00988235299224913)+(((-1.0)*x2823))+x2824+x2826+(((0.913)*x2822)));
evalcond[3]=((-0.00415058824227405)+(((0.0378)*x2825))+(((0.15)*x2824))+(((-0.0889411764705882)*pz))+(((0.13695)*x2822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2827=((10218256626.506)*pp);
IkReal x2828=(cj0*py);
IkReal x2829=((613095397.590361)*pz);
IkReal x2830=(px*sj0);
CheckValue<IkReal> x2831=IKPowWithIntegerCheck((((cj0*px))+((py*sj0))),-1);
if(!x2831.valid){
continue;
}
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
if( IKabs(((10209765255.3315)+(((-1.0)*x2829))+(((-1.0)*x2827)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2831.value)*(((-9321515678.10782)+(((10209765255.3315)*x2830))+(((9329268300.0)*pp))+((x2828*x2829))+(((559756098.211765)*pz))+(((-10209765255.3315)*x2828))+(((-1.0)*x2827*x2830))+(((-0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+((x2827*x2828))+(((-1.0)*x2829*x2830)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((10209765255.3315)+(((-1.0)*x2829))+(((-1.0)*x2827))))+IKsqr(((x2831.value)*(((-9321515678.10782)+(((10209765255.3315)*x2830))+(((9329268300.0)*pp))+((x2828*x2829))+(((559756098.211765)*pz))+(((-10209765255.3315)*x2828))+(((-1.0)*x2827*x2830))+(((-0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+((x2827*x2828))+(((-1.0)*x2829*x2830))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((10209765255.3315)+(((-1.0)*x2829))+(((-1.0)*x2827))), ((x2831.value)*(((-9321515678.10782)+(((10209765255.3315)*x2830))+(((9329268300.0)*pp))+((x2828*x2829))+(((559756098.211765)*pz))+(((-10209765255.3315)*x2828))+(((-1.0)*x2827*x2830))+(((-0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+((x2827*x2828))+(((-1.0)*x2829*x2830))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2832=IKsin(j1);
IkReal x2833=IKcos(j1);
IkReal x2834=((0.15)*py);
IkReal x2835=((0.15)*px);
IkReal x2836=((0.211764705882353)*pz);
IkReal x2837=((1.0)*py);
IkReal x2838=((1.0)*px);
IkReal x2839=(sj0*x2833);
IkReal x2840=(cj0*x2832);
IkReal x2841=(sj0*x2832);
IkReal x2842=(cj0*x2833);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2843=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2844=((0.09)*x2843);
evalcond[0]=((-0.54719003286311)+(((0.547645125958379)*pp))+(((5.3594771199795e-11)*x2832))+(((0.0328587075575027)*pz)));
evalcond[1]=(((px*x2839))+((px*x2840))+(((-0.913)*x2833))+(((-1.0)*x2837*x2842))+((py*x2841)));
evalcond[2]=((((-1.0)*sj0*x2837))+(((0.00988235299224913)*x2833))+(((-1.0)*cj0*x2838))+(((-1.0)*x2833*x2844))+((x2833*x2836)));
evalcond[3]=((-0.00988235299224913)+((py*x2839))+(((-1.0)*x2836))+((px*x2842))+(((0.913)*x2832))+(((-1.0)*x2838*x2841))+x2844+((py*x2840)));
evalcond[4]=((-0.00415058824227405)+((x2834*x2839))+(((0.13695)*x2832))+(((-0.0889411764705882)*pz))+(((0.0378)*x2843))+(((-1.0)*x2835*x2841))+((x2834*x2840))+((x2835*x2842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2845=(cj0*px);
IkReal x2846=((10218256626.506)*pp);
IkReal x2847=(py*sj0);
IkReal x2848=((613095397.590361)*pz);
CheckValue<IkReal> x2849=IKPowWithIntegerCheck(((-0.913)+((px*sj0))+(((-1.0)*cj0*py))),-1);
if(!x2849.valid){
continue;
}
if( IKabs(((10209765255.3315)+(((-1.0)*x2848))+(((-1.0)*x2846)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2849.value)*(((((-10209765255.3315)*x2845))+(((-10209765255.3315)*x2847))+((x2847*x2848))+((x2846*x2847))+((x2845*x2846))+((x2845*x2848)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((10209765255.3315)+(((-1.0)*x2848))+(((-1.0)*x2846))))+IKsqr(((x2849.value)*(((((-10209765255.3315)*x2845))+(((-10209765255.3315)*x2847))+((x2847*x2848))+((x2846*x2847))+((x2845*x2846))+((x2845*x2848))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((10209765255.3315)+(((-1.0)*x2848))+(((-1.0)*x2846))), ((x2849.value)*(((((-10209765255.3315)*x2845))+(((-10209765255.3315)*x2847))+((x2847*x2848))+((x2846*x2847))+((x2845*x2846))+((x2845*x2848))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2850=IKsin(j1);
IkReal x2851=IKcos(j1);
IkReal x2852=((0.15)*py);
IkReal x2853=((0.15)*px);
IkReal x2854=((0.211764705882353)*pz);
IkReal x2855=((1.0)*py);
IkReal x2856=((1.0)*px);
IkReal x2857=(sj0*x2851);
IkReal x2858=(cj0*x2850);
IkReal x2859=(sj0*x2850);
IkReal x2860=(cj0*x2851);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2861=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2862=((0.09)*x2861);
evalcond[0]=((-0.54719003286311)+(((0.547645125958379)*pp))+(((5.3594771199795e-11)*x2850))+(((0.0328587075575027)*pz)));
evalcond[1]=((((-1.0)*x2855*x2860))+((px*x2858))+((px*x2857))+(((-0.913)*x2851))+((py*x2859)));
evalcond[2]=((((-1.0)*x2851*x2862))+(((-1.0)*cj0*x2856))+((x2851*x2854))+(((0.00988235299224913)*x2851))+(((-1.0)*sj0*x2855)));
evalcond[3]=((-0.00988235299224913)+(((0.913)*x2850))+(((-1.0)*x2856*x2859))+((px*x2860))+x2862+((py*x2858))+((py*x2857))+(((-1.0)*x2854)));
evalcond[4]=((-0.00415058824227405)+(((0.0378)*x2861))+((x2853*x2860))+((x2852*x2858))+((x2852*x2857))+(((-0.0889411764705882)*pz))+(((0.13695)*x2850))+(((-1.0)*x2853*x2859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
CheckValue<IkReal> x2863=IKPowWithIntegerCheck(((0.00988235299224913)+(((-0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((0.211764705882353)*pz))),-1);
if(!x2863.valid){
continue;
}
if( IKabs(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2863.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp))))+IKsqr(((x2863.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((10209765255.3315)+(((-613095397.590361)*pz))+(((-10218256626.506)*pp))), ((x2863.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2864=IKsin(j1);
IkReal x2865=IKcos(j1);
IkReal x2866=((0.15)*py);
IkReal x2867=((0.15)*px);
IkReal x2868=((0.211764705882353)*pz);
IkReal x2869=((1.0)*py);
IkReal x2870=((1.0)*px);
IkReal x2871=(sj0*x2865);
IkReal x2872=(cj0*x2864);
IkReal x2873=(sj0*x2864);
IkReal x2874=(cj0*x2865);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2875=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2876=((0.09)*x2875);
evalcond[0]=((-0.54719003286311)+(((0.547645125958379)*pp))+(((5.3594771199795e-11)*x2864))+(((0.0328587075575027)*pz)));
evalcond[1]=(((py*x2873))+(((-1.0)*x2869*x2874))+((px*x2871))+((px*x2872))+(((-0.913)*x2865)));
evalcond[2]=((((-1.0)*cj0*x2870))+(((-1.0)*sj0*x2869))+((x2865*x2868))+(((0.00988235299224913)*x2865))+(((-1.0)*x2865*x2876)));
evalcond[3]=((-0.00988235299224913)+(((0.913)*x2864))+((py*x2871))+((py*x2872))+(((-1.0)*x2870*x2873))+(((-1.0)*x2868))+((px*x2874))+x2876);
evalcond[4]=((-0.00415058824227405)+(((0.0378)*x2875))+((x2866*x2871))+((x2866*x2872))+(((0.13695)*x2864))+(((-0.0889411764705882)*pz))+((x2867*x2874))+(((-1.0)*x2867*x2873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((3.10469847231699)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-1168543470.65351)+(((1196681824.51447)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1168543470.65351)+(((1196681824.51447)*pp))))+IKsqr(((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1168543470.65351)+(((1196681824.51447)*pp))), ((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2877=IKsin(j1);
IkReal x2878=IKcos(j1);
CheckValue<IkReal> x2887=IKPowWithIntegerCheck(py,-1);
if(!x2887.valid){
continue;
}
IkReal x2879=x2887.value;
IkReal x2880=(py*sj0);
IkReal x2881=(px*sj0);
IkReal x2882=((0.0821467688937568)*pp);
IkReal x2883=(cj0*px);
IkReal x2884=(cj0*py);
IkReal x2885=((0.15)*x2878);
IkReal x2886=(px*x2878*x2879);
evalcond[0]=((-0.534767991845724)+(((0.547645125958379)*pp))+(((-4.57636369784904e-10)*x2877)));
evalcond[1]=((((-1.0)*x2880))+(((-1.0)*x2883))+(((-4.57636369784904e-10)*x2878)));
evalcond[2]=(((x2877*x2880))+((x2877*x2883))+((x2878*x2881))+(((-1.0)*x2878*x2884))+(((-0.913)*x2878)));
evalcond[3]=((4.57636369784904e-10)+((x2877*x2884))+((x2878*x2880))+((x2878*x2883))+(((-1.0)*x2877*x2881))+(((0.913)*x2877)));
evalcond[4]=((6.86454554677356e-11)+(((0.0802151987768587)*x2877))+(((-1.0)*x2882*x2886))+((x2880*x2885))+(((-1.0)*x2877*x2882))+((px*x2879*x2881*x2885))+(((-0.0567348012231413)*x2886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.400443710475077)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-1542704802.03156)+(((1504414963.66099)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1542704802.03156)+(((1504414963.66099)*pp))))+IKsqr(((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1542704802.03156)+(((1504414963.66099)*pp))), ((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2888=IKsin(j1);
IkReal x2889=IKcos(j1);
CheckValue<IkReal> x2898=IKPowWithIntegerCheck(py,-1);
if(!x2898.valid){
continue;
}
IkReal x2890=x2898.value;
IkReal x2891=(py*sj0);
IkReal x2892=(px*sj0);
IkReal x2893=((0.0821467688937568)*pp);
IkReal x2894=(cj0*px);
IkReal x2895=(cj0*py);
IkReal x2896=((0.15)*x2889);
IkReal x2897=(px*x2889*x2890);
evalcond[0]=((-0.561583596303256)+(((0.547645125958379)*pp))+(((-3.64025311623919e-10)*x2888)));
evalcond[1]=((((-1.0)*x2891))+(((-1.0)*x2894))+(((-3.64025311623919e-10)*x2889)));
evalcond[2]=((((-0.913)*x2889))+((x2889*x2892))+((x2888*x2894))+((x2888*x2891))+(((-1.0)*x2889*x2895)));
evalcond[3]=((3.64025311623919e-10)+(((0.913)*x2888))+(((-1.0)*x2888*x2892))+((x2889*x2891))+((x2889*x2894))+((x2888*x2895)));
evalcond[4]=((5.46037967435879e-11)+((x2891*x2896))+(((-1.0)*x2888*x2893))+(((0.0842375394454885)*x2888))+(((-1.0)*x2893*x2897))+(((-0.0527124605545115)*x2897))+((px*x2890*x2892*x2896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2899=(px*sj0);
IkReal x2900=((0.222222222222222)*pz);
IkReal x2901=(cj0*px);
IkReal x2902=((0.0349123767798467)*sj3);
IkReal x2903=((0.425)*sj3);
IkReal x2904=((0.547645125958379)*pp);
IkReal x2905=(py*sj0);
IkReal x2906=((0.0511135450894487)*pz);
IkReal x2907=(cj0*py);
CheckValue<IkReal> x2908=IKPowWithIntegerCheck(((0.0683333333333333)+(((-1.0)*x2900))+(((-1.0)*x2903))),-1);
if(!x2908.valid){
continue;
}
CheckValue<IkReal> x2909=IKPowWithIntegerCheck(((-0.0623883333333333)+(((0.388025)*sj3))+(((-0.0683333333333333)*x2907))+((x2900*x2907))+(((0.202888888888889)*pz))+((x2903*x2907))+(((-1.0)*x2899*x2900))+(((-1.0)*x2899*x2903))+(((0.0683333333333333)*x2899))),-1);
if(!x2909.valid){
continue;
}
if( IKabs(((x2908.value)*(((0.552803395399781)+(((-1.0)*x2904))+(((-1.0)*x2906))+(((-1.0)*x2902)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2909.value)*((((x2902*x2905))+((x2901*x2906))+((x2901*x2904))+((x2901*x2902))+(((-0.552803395399781)*x2905))+(((-0.552803395399781)*x2901))+((x2905*x2906))+((x2904*x2905)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2908.value)*(((0.552803395399781)+(((-1.0)*x2904))+(((-1.0)*x2906))+(((-1.0)*x2902))))))+IKsqr(((x2909.value)*((((x2902*x2905))+((x2901*x2906))+((x2901*x2904))+((x2901*x2902))+(((-0.552803395399781)*x2905))+(((-0.552803395399781)*x2901))+((x2905*x2906))+((x2904*x2905))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2908.value)*(((0.552803395399781)+(((-1.0)*x2904))+(((-1.0)*x2906))+(((-1.0)*x2902))))), ((x2909.value)*((((x2902*x2905))+((x2901*x2906))+((x2901*x2904))+((x2901*x2902))+(((-0.552803395399781)*x2905))+(((-0.552803395399781)*x2901))+((x2905*x2906))+((x2904*x2905))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2910=IKcos(j1);
IkReal x2911=IKsin(j1);
IkReal x2912=((0.15)*py);
IkReal x2913=(cj0*py);
IkReal x2914=((0.09)*cj3);
IkReal x2915=((0.15)*px);
IkReal x2916=((0.405)*sj3);
IkReal x2917=((1.0)*px);
IkReal x2918=(sj0*x2910);
IkReal x2919=(cj0*x2911);
IkReal x2920=(sj0*x2911);
IkReal x2921=(cj0*x2910);
evalcond[0]=((((0.075)*x2910))+(((-1.0)*x2910*x2916))+(((-1.0)*py*sj0))+(((-1.0)*cj0*x2917))+((x2910*x2914)));
evalcond[1]=((-0.552803395399781)+(((0.547645125958379)*pp))+(((-0.222222222222222)*pz*x2911))+(((0.0349123767798467)*sj3))+(((0.0511135450894487)*pz))+(((0.0683333333333333)*x2911))+(((-0.425)*sj3*x2911)));
evalcond[2]=((((-0.913)*x2910))+((py*x2920))+(((-1.0)*x2910*x2913))+((px*x2919))+((px*x2918)));
evalcond[3]=((-0.075)+((py*x2918))+((px*x2921))+(((-1.0)*x2917*x2920))+(((0.913)*x2911))+((x2911*x2913))+x2916+(((-1.0)*x2914)));
evalcond[4]=((-0.667969)+((x2915*x2921))+(((-1.0)*x2915*x2920))+(((1.826)*px*sj0))+(((0.13695)*x2911))+(((-1.0)*pp))+(((-0.06)*pz))+((x2912*x2918))+((x2912*x2919))+(((-1.826)*x2913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2922=(cj0*px);
IkReal x2923=((0.09)*cj3);
IkReal x2924=(py*sj0);
IkReal x2925=((0.405)*sj3);
IkReal x2926=(px*py);
IkReal x2927=(cj0*sj0);
CheckValue<IkReal> x2928=IKPowWithIntegerCheck(((((-1.0)*x2924*x2925))+(((0.075)*x2922))+(((0.075)*x2924))+((x2922*x2923))+((x2923*x2924))+(((-1.0)*x2922*x2925))),-1);
if(!x2928.valid){
continue;
}
CheckValue<IkReal> x2929=IKPowWithIntegerCheck(((0.075)+(((-1.0)*x2925))+x2923),-1);
if(!x2929.valid){
continue;
}
if( IKabs(((x2928.value)*(((((2.0)*cj0*py*x2922))+(((-1.0)*px*sj0*x2922))+(((0.913)*x2922))+(((0.913)*x2924))+(((-1.0)*x2926))+((cj0*py*x2924)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2929.value)*((x2922+x2924)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2928.value)*(((((2.0)*cj0*py*x2922))+(((-1.0)*px*sj0*x2922))+(((0.913)*x2922))+(((0.913)*x2924))+(((-1.0)*x2926))+((cj0*py*x2924))))))+IKsqr(((x2929.value)*((x2922+x2924))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2928.value)*(((((2.0)*cj0*py*x2922))+(((-1.0)*px*sj0*x2922))+(((0.913)*x2922))+(((0.913)*x2924))+(((-1.0)*x2926))+((cj0*py*x2924))))), ((x2929.value)*((x2922+x2924))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2930=IKcos(j1);
IkReal x2931=IKsin(j1);
IkReal x2932=((0.15)*py);
IkReal x2933=(cj0*py);
IkReal x2934=((0.09)*cj3);
IkReal x2935=((0.15)*px);
IkReal x2936=((0.405)*sj3);
IkReal x2937=((1.0)*px);
IkReal x2938=(sj0*x2930);
IkReal x2939=(cj0*x2931);
IkReal x2940=(sj0*x2931);
IkReal x2941=(cj0*x2930);
evalcond[0]=((((-1.0)*x2930*x2936))+(((-1.0)*py*sj0))+((x2930*x2934))+(((0.075)*x2930))+(((-1.0)*cj0*x2937)));
evalcond[1]=((-0.552803395399781)+(((0.0683333333333333)*x2931))+(((0.547645125958379)*pp))+(((-0.425)*sj3*x2931))+(((0.0349123767798467)*sj3))+(((0.0511135450894487)*pz))+(((-0.222222222222222)*pz*x2931)));
evalcond[2]=((((-0.913)*x2930))+((px*x2939))+((px*x2938))+((py*x2940))+(((-1.0)*x2930*x2933)));
evalcond[3]=((-0.075)+(((0.913)*x2931))+((px*x2941))+(((-1.0)*x2934))+((py*x2938))+x2936+((x2931*x2933))+(((-1.0)*x2937*x2940)));
evalcond[4]=((-0.667969)+((x2935*x2941))+(((-1.0)*x2935*x2940))+(((0.13695)*x2931))+(((1.826)*px*sj0))+((x2932*x2938))+((x2932*x2939))+(((-1.0)*pp))+(((-0.06)*pz))+(((-1.826)*x2933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2942=IKPowWithIntegerCheck(((0.0683333333333333)+(((-0.222222222222222)*pz))+(((-0.425)*sj3))),-1);
if(!x2942.valid){
continue;
}
CheckValue<IkReal> x2943=IKPowWithIntegerCheck(((0.075)+(((0.09)*cj3))+(((-0.405)*sj3))),-1);
if(!x2943.valid){
continue;
}
if( IKabs(((x2942.value)*(((0.552803395399781)+(((-0.547645125958379)*pp))+(((-0.0511135450894487)*pz))+(((-0.0349123767798467)*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2943.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2942.value)*(((0.552803395399781)+(((-0.547645125958379)*pp))+(((-0.0511135450894487)*pz))+(((-0.0349123767798467)*sj3))))))+IKsqr(((x2943.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2942.value)*(((0.552803395399781)+(((-0.547645125958379)*pp))+(((-0.0511135450894487)*pz))+(((-0.0349123767798467)*sj3))))), ((x2943.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2944=IKcos(j1);
IkReal x2945=IKsin(j1);
IkReal x2946=((0.15)*py);
IkReal x2947=(cj0*py);
IkReal x2948=((0.09)*cj3);
IkReal x2949=((0.15)*px);
IkReal x2950=((0.405)*sj3);
IkReal x2951=((1.0)*px);
IkReal x2952=(sj0*x2944);
IkReal x2953=(cj0*x2945);
IkReal x2954=(sj0*x2945);
IkReal x2955=(cj0*x2944);
evalcond[0]=((((-1.0)*cj0*x2951))+(((-1.0)*x2944*x2950))+(((0.075)*x2944))+((x2944*x2948))+(((-1.0)*py*sj0)));
evalcond[1]=((-0.552803395399781)+(((0.547645125958379)*pp))+(((0.0683333333333333)*x2945))+(((0.0349123767798467)*sj3))+(((-0.425)*sj3*x2945))+(((0.0511135450894487)*pz))+(((-0.222222222222222)*pz*x2945)));
evalcond[2]=(((py*x2954))+(((-1.0)*x2944*x2947))+(((-0.913)*x2944))+((px*x2953))+((px*x2952)));
evalcond[3]=((-0.075)+((x2945*x2947))+((py*x2952))+(((0.913)*x2945))+(((-1.0)*x2948))+((px*x2955))+(((-1.0)*x2951*x2954))+x2950);
evalcond[4]=((-0.667969)+(((0.13695)*x2945))+((x2946*x2952))+((x2946*x2953))+(((1.826)*px*sj0))+(((-1.826)*x2947))+(((-1.0)*pp))+(((-0.06)*pz))+(((-1.0)*x2949*x2954))+((x2949*x2955)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2956=(cj0*px);
IkReal x2957=(px*py);
IkReal x2958=(py*sj0);
IkReal x2959=((0.365)*sj2);
IkReal x2960=(cj0*sj0);
IkReal x2961=((0.405)*cj3*sj2);
IkReal x2962=((0.405)*cj2*sj3);
IkReal x2963=((0.09)*cj2*cj3);
IkReal x2964=((0.09)*sj2*sj3);
CheckValue<IkReal> x2965=IKPowWithIntegerCheck((((x2956*x2964))+((x2956*x2962))+((x2956*x2961))+(((-1.0)*x2958*x2963))+(((0.075)*x2956))+(((0.075)*x2958))+((x2958*x2964))+((x2958*x2961))+((x2958*x2962))+(((-1.0)*x2956*x2963))+((x2958*x2959))+((x2956*x2959))),-1);
if(!x2965.valid){
continue;
}
CheckValue<IkReal> x2966=IKPowWithIntegerCheck(((0.075)+(((-1.0)*x2963))+x2959+x2964+x2961+x2962),-1);
if(!x2966.valid){
continue;
}
if( IKabs(((x2965.value)*((((cj0*py*x2958))+(((-1.0)*x2957))+(((-1.0)*px*sj0*x2956))+(((2.0)*cj0*py*x2956))+(((0.913)*x2958))+(((0.913)*x2956)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2966.value)*((x2958+x2956)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2965.value)*((((cj0*py*x2958))+(((-1.0)*x2957))+(((-1.0)*px*sj0*x2956))+(((2.0)*cj0*py*x2956))+(((0.913)*x2958))+(((0.913)*x2956))))))+IKsqr(((x2966.value)*((x2958+x2956))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2965.value)*((((cj0*py*x2958))+(((-1.0)*x2957))+(((-1.0)*px*sj0*x2956))+(((2.0)*cj0*py*x2956))+(((0.913)*x2958))+(((0.913)*x2956))))), ((x2966.value)*((x2958+x2956))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2967=IKsin(j1);
IkReal x2968=IKcos(j1);
IkReal x2969=((0.405)*sj3);
IkReal x2970=(cj0*sj2);
IkReal x2971=((0.15)*cj0);
IkReal x2972=(px*sj0);
IkReal x2973=((0.09)*cj3);
IkReal x2974=((0.365)*sj2);
IkReal x2975=((1.0)*cj2);
IkReal x2976=((1.0)*py);
IkReal x2977=((0.405)*cj3);
IkReal x2978=(cj2*pz);
IkReal x2979=(cj0*px);
IkReal x2980=(cj2*x2967);
IkReal x2981=(px*x2968);
IkReal x2982=(py*x2967);
IkReal x2983=((0.09)*sj2*sj3);
IkReal x2984=(sj2*x2967);
IkReal x2985=(cj2*x2968);
IkReal x2986=(py*sj0*x2968);
evalcond[0]=((((-1.0)*cj0*x2968*x2976))+((x2968*x2972))+(((-0.913)*x2968))+((sj0*x2982))+((x2967*x2979)));
evalcond[1]=((((-1.0)*x2979))+((x2968*x2983))+((x2969*x2985))+((x2968*x2974))+(((0.075)*x2968))+(((-1.0)*x2973*x2985))+((sj2*x2968*x2977))+(((-1.0)*sj0*x2976)));
evalcond[2]=((-0.913)+(((-1.0)*cj0*x2976))+((x2969*x2980))+((x2977*x2984))+(((0.075)*x2967))+((x2967*x2983))+(((-1.0)*x2973*x2980))+x2972+((x2967*x2974)));
evalcond[3]=((-0.365)+(((-0.09)*sj3))+((x2970*x2981))+((x2970*x2982))+(((-0.335)*cj2))+((sj2*x2986))+(((-0.075)*sj2))+(((0.913)*x2984))+(((-1.0)*x2977))+(((-1.0)*x2972*x2984))+x2978);
evalcond[4]=((((0.075)*cj2))+(((-1.0)*x2973))+(((-0.913)*x2980))+(((-1.0)*x2968*x2975*x2979))+((pz*sj2))+((x2972*x2980))+(((-1.0)*cj0*x2975*x2982))+(((-0.335)*sj2))+x2969+(((-1.0)*x2975*x2986)));
evalcond[5]=((-0.912519)+(((0.73)*x2978))+(((0.73)*sj2*x2986))+(((-1.826)*cj0*py))+(((0.66649)*x2984))+(((0.15)*x2986))+(((-0.15)*x2967*x2972))+(((0.73)*x2970*x2981))+(((0.73)*x2970*x2982))+(((1.826)*x2972))+((x2971*x2981))+((x2971*x2982))+(((0.67)*pz))+(((-1.0)*pp))+(((-0.73)*x2972*x2984))+(((-0.05475)*sj2))+(((0.13695)*x2967))+(((-0.24455)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2987=(cj0*py);
IkReal x2988=(cj2*pz);
IkReal x2989=((0.09)*sj3);
IkReal x2990=((0.405)*cj3);
IkReal x2991=(cj0*px);
IkReal x2992=((0.075)*sj2);
IkReal x2993=(py*sj0);
IkReal x2994=(px*sj0);
IkReal x2995=((0.335)*cj2);
IkReal x2996=(sj2*x2994);
CheckValue<IkReal> x2997 = IKatan2WithCheck(IkReal(((0.333245)+(((-1.0)*x2992*x2994))+(((-0.365)*x2994))+((x2987*x2995))+((x2987*x2992))+((x2987*x2990))+(((0.365)*x2987))+(((0.08217)*sj3))+(((0.068475)*sj2))+(((-1.0)*x2989*x2994))+((x2987*x2989))+(((-1.0)*x2987*x2988))+(((-1.0)*x2994*x2995))+(((-0.913)*x2988))+(((0.305855)*cj2))+(((0.369765)*cj3))+((x2988*x2994))+(((-1.0)*x2990*x2994)))),IkReal((((x2990*x2991))+((x2990*x2993))+(((-1.0)*x2988*x2993))+(((-1.0)*x2988*x2991))+((x2992*x2993))+((x2991*x2995))+((x2991*x2992))+(((0.365)*x2993))+(((0.365)*x2991))+((x2993*x2995))+((x2989*x2991))+((x2989*x2993)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2997.valid){
continue;
}
CheckValue<IkReal> x2998=IKPowWithIntegerCheck(IKsign(((((1.826)*sj2*x2987))+(((-1.0)*sj2*(pz*pz)))+(((0.833569)*sj2))+((pp*sj2))+(((-1.826)*x2996)))),-1);
if(!x2998.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2997.value)+(((1.5707963267949)*(x2998.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2999=IKsin(j1);
IkReal x3000=IKcos(j1);
IkReal x3001=((0.405)*sj3);
IkReal x3002=(cj0*sj2);
IkReal x3003=((0.15)*cj0);
IkReal x3004=(px*sj0);
IkReal x3005=((0.09)*cj3);
IkReal x3006=((0.365)*sj2);
IkReal x3007=((1.0)*cj2);
IkReal x3008=((1.0)*py);
IkReal x3009=((0.405)*cj3);
IkReal x3010=(cj2*pz);
IkReal x3011=(cj0*px);
IkReal x3012=(cj2*x2999);
IkReal x3013=(px*x3000);
IkReal x3014=(py*x2999);
IkReal x3015=((0.09)*sj2*sj3);
IkReal x3016=(sj2*x2999);
IkReal x3017=(cj2*x3000);
IkReal x3018=(py*sj0*x3000);
evalcond[0]=(((x2999*x3011))+((x3000*x3004))+(((-1.0)*cj0*x3000*x3008))+((sj0*x3014))+(((-0.913)*x3000)));
evalcond[1]=((((0.075)*x3000))+((x3000*x3015))+((x3001*x3017))+((x3000*x3006))+((sj2*x3000*x3009))+(((-1.0)*x3005*x3017))+(((-1.0)*x3011))+(((-1.0)*sj0*x3008)));
evalcond[2]=((-0.913)+(((-1.0)*cj0*x3008))+((x3009*x3016))+((x2999*x3006))+x3004+((x2999*x3015))+((x3001*x3012))+(((-1.0)*x3005*x3012))+(((0.075)*x2999)));
evalcond[3]=((-0.365)+(((-1.0)*x3004*x3016))+x3010+(((-0.09)*sj3))+(((-0.335)*cj2))+(((-0.075)*sj2))+(((-1.0)*x3009))+((x3002*x3013))+((x3002*x3014))+((sj2*x3018))+(((0.913)*x3016)));
evalcond[4]=(x3001+(((-1.0)*x3000*x3007*x3011))+(((0.075)*cj2))+(((-1.0)*x3005))+((x3004*x3012))+(((-1.0)*x3007*x3018))+((pz*sj2))+(((-0.913)*x3012))+(((-1.0)*cj0*x3007*x3014))+(((-0.335)*sj2)));
evalcond[5]=((-0.912519)+(((-1.826)*cj0*py))+(((-0.73)*x3004*x3016))+(((1.826)*x3004))+(((0.73)*x3010))+(((0.66649)*x3016))+(((0.13695)*x2999))+(((0.67)*pz))+((x3003*x3014))+((x3003*x3013))+(((0.73)*x3002*x3013))+(((0.73)*x3002*x3014))+(((-1.0)*pp))+(((-0.05475)*sj2))+(((0.15)*x3018))+(((-0.24455)*cj2))+(((-0.15)*x2999*x3004))+(((0.73)*sj2*x3018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3019=IKPowWithIntegerCheck(IKsign(((0.075)+(((0.365)*sj2))+(((0.09)*sj2*sj3))+(((-0.09)*cj2*cj3))+(((0.405)*cj2*sj3))+(((0.405)*cj3*sj2)))),-1);
if(!x3019.valid){
continue;
}
CheckValue<IkReal> x3020 = IKatan2WithCheck(IkReal(((0.913)+(((-1.0)*px*sj0))+((cj0*py)))),IkReal((((cj0*px))+((py*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3020.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3019.value)))+(x3020.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3021=IKsin(j1);
IkReal x3022=IKcos(j1);
IkReal x3023=((0.405)*sj3);
IkReal x3024=(cj0*sj2);
IkReal x3025=((0.15)*cj0);
IkReal x3026=(px*sj0);
IkReal x3027=((0.09)*cj3);
IkReal x3028=((0.365)*sj2);
IkReal x3029=((1.0)*cj2);
IkReal x3030=((1.0)*py);
IkReal x3031=((0.405)*cj3);
IkReal x3032=(cj2*pz);
IkReal x3033=(cj0*px);
IkReal x3034=(cj2*x3021);
IkReal x3035=(px*x3022);
IkReal x3036=(py*x3021);
IkReal x3037=((0.09)*sj2*sj3);
IkReal x3038=(sj2*x3021);
IkReal x3039=(cj2*x3022);
IkReal x3040=(py*sj0*x3022);
evalcond[0]=((((-0.913)*x3022))+((sj0*x3036))+(((-1.0)*cj0*x3022*x3030))+((x3021*x3033))+((x3022*x3026)));
evalcond[1]=(((x3022*x3037))+((x3023*x3039))+(((-1.0)*x3033))+((sj2*x3022*x3031))+(((0.075)*x3022))+(((-1.0)*x3027*x3039))+(((-1.0)*sj0*x3030))+((x3022*x3028)));
evalcond[2]=((-0.913)+x3026+((x3021*x3028))+((x3023*x3034))+(((0.075)*x3021))+(((-1.0)*cj0*x3030))+(((-1.0)*x3027*x3034))+((x3031*x3038))+((x3021*x3037)));
evalcond[3]=((-0.365)+(((-1.0)*x3026*x3038))+x3032+(((-0.09)*sj3))+((sj2*x3040))+(((-0.335)*cj2))+(((-0.075)*sj2))+((x3024*x3035))+((x3024*x3036))+(((-1.0)*x3031))+(((0.913)*x3038)));
evalcond[4]=((((-1.0)*x3022*x3029*x3033))+((x3026*x3034))+x3023+(((-1.0)*x3027))+(((-0.913)*x3034))+(((0.075)*cj2))+((pz*sj2))+(((-1.0)*cj0*x3029*x3036))+(((-0.335)*sj2))+(((-1.0)*x3029*x3040)));
evalcond[5]=((-0.912519)+(((1.826)*x3026))+(((0.73)*x3032))+(((0.73)*sj2*x3040))+(((-0.73)*x3026*x3038))+(((-1.826)*cj0*py))+(((0.66649)*x3038))+(((0.67)*pz))+(((-1.0)*pp))+((x3025*x3036))+((x3025*x3035))+(((0.15)*x3040))+(((0.73)*x3024*x3035))+(((0.73)*x3024*x3036))+(((0.13695)*x3021))+(((-0.05475)*sj2))+(((-0.15)*x3021*x3026))+(((-0.24455)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x98=(cj1*sj0);
IkReal x99=(cj0*sj1);
IkReal x100=(cj2*sj3);
IkReal x101=(cj3*sj2);
IkReal x102=(cj0*cj1);
IkReal x103=((1.0)*sj0*sj1);
IkReal x104=(((cj2*cj3))+(((-1.0)*sj2*sj3)));
IkReal x105=((((-1.0)*x103))+x102);
IkReal x106=(x100+x101);
IkReal x107=(sj0*x104);
IkReal x108=((((-1.0)*x100))+(((-1.0)*x101)));
IkReal x109=(x102*x104);
IkReal x110=((((-1.0)*x99))+(((-1.0)*x98)));
IkReal x111=(x109+(((-1.0)*x103*x104)));
IkReal x112=(((x104*x98))+((x104*x99)));
IkReal x113=(((x106*x98))+((x106*x99)));
IkReal x114=(((x102*x106))+(((-1.0)*x103*x106)));
new_r00=(((r10*x112))+((r20*x108))+((r00*x111)));
new_r01=(((r21*x108))+((r11*x112))+((r01*x111)));
new_r02=(((r22*x108))+((r02*(((((-1.0)*sj1*x107))+x109))))+((r12*x112)));
new_r10=(((r10*x105))+((r00*x110)));
new_r11=(((r11*x105))+((r01*x110)));
new_r12=(((r02*x110))+((r12*x105)));
new_r20=(((r10*x113))+((r20*x104))+((r00*x114)));
new_r21=(((r21*x104))+((r11*x113))+((r01*x114)));
new_r22=(((r02*x114))+((r22*x104))+((r12*x113)));
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
cj5array[0]=new_r22;
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[3];
j4eval[0]=sj5;
j4eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j4eval[2]=IKsign(sj5);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
j6eval[0]=sj5;
j6eval[1]=((IKabs(new_r20))+(IKabs(new_r21)));
j6eval[2]=IKsign(sj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=new_r12;
j4eval[1]=sj5;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j6mul = 1;
j6=0;
j4mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4=IKatan2(((-1.0)*new_r01), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].fmul = j4mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].fmul = j6mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j6mul = 1;
j6=0;
j4mul=1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].fmul = j4mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].fmul = j6mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x115=new_r22*new_r22;
IkReal x116=((16.0)*new_r10);
IkReal x117=((16.0)*new_r01);
IkReal x118=((16.0)*new_r22);
IkReal x119=((8.0)*new_r11);
IkReal x120=((8.0)*new_r00);
IkReal x121=(x115*x116);
IkReal x122=(x115*x117);
j4eval[0]=((IKabs((((new_r11*x118))+(((16.0)*new_r00))+(((-32.0)*new_r00*x115)))))+(IKabs(((((-1.0)*x121))+x116)))+(IKabs(((((-1.0)*new_r22*x120))+((x115*x119)))))+(IKabs(((((-1.0)*x122))+x117)))+(IKabs(((((-1.0)*x116))+x121)))+(IKabs(((((-1.0)*x117))+x122)))+(IKabs((((new_r22*x119))+(((-1.0)*x120)))))+(IKabs(((((32.0)*new_r11))+(((-1.0)*new_r00*x118))+(((-16.0)*new_r11*x115))))));
if( IKabs(j4eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j4, j6]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j4evalpoly[1];
IkReal x123=new_r22*new_r22;
IkReal x124=((16.0)*new_r10);
IkReal x125=(new_r11*new_r22);
IkReal x126=(x123*x124);
IkReal x127=((((-8.0)*new_r00))+(((8.0)*x125)));
op[0]=x127;
op[1]=((((-1.0)*x126))+x124);
op[2]=((((16.0)*x125))+(((16.0)*new_r00))+(((-32.0)*new_r00*x123)));
op[3]=((((-1.0)*x124))+x126);
op[4]=x127;
polyroots4(op,zeror,numroots);
IkReal j4array[4], cj4array[4], sj4array[4], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[4]={true,true,true,true};
_nj4 = 4;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

IkReal x128=new_r22*new_r22;
IkReal x129=((16.0)*new_r01);
IkReal x130=(new_r00*new_r22);
IkReal x131=((8.0)*x130);
IkReal x132=(new_r11*x128);
IkReal x133=(x128*x129);
IkReal x134=((8.0)*x132);
j4evalpoly[0]=(x134+(((-1.0)*x131))+((htj4*((x129+(((-1.0)*x133))))))+(((htj4*htj4*htj4)*(((((-1.0)*x129))+x133))))+(((htj4*htj4*htj4*htj4)*((x134+(((-1.0)*x131))))))+(((htj4*htj4)*(((((32.0)*new_r11))+(((-16.0)*x130))+(((-16.0)*x132)))))));
if( IKabs(j4evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j6eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x135=cj4*cj4;
IkReal x136=(cj4*new_r22);
IkReal x137=((-1.0)+(((-1.0)*x135*(new_r22*new_r22)))+x135);
j6eval[0]=x137;
j6eval[1]=((IKabs((((new_r01*sj4))+(((-1.0)*new_r00*x136)))))+(IKabs((((new_r01*x136))+((new_r00*sj4))))));
j6eval[2]=IKsign(x137);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j6eval[0]=new_r22;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x138=new_r22*new_r22;
j6eval[0]=(((cj4*x138))+(((-1.0)*cj4)));
j6eval[1]=((((-1.0)*sj4))+((sj4*x138)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x139=IKsin(j6);
IkReal x140=IKcos(j6);
evalcond[0]=x139;
evalcond[1]=((-1.0)*x140);
evalcond[2]=((((-1.0)*x139))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x140))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x141=IKsin(j6);
IkReal x142=IKcos(j6);
evalcond[0]=x141;
evalcond[1]=((-1.0)*x142);
evalcond[2]=((((-1.0)*x141))+new_r00);
evalcond[3]=((((-1.0)*x142))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x143=IKsin(j6);
IkReal x144=IKcos(j6);
evalcond[0]=x143;
evalcond[1]=((-1.0)*x144);
evalcond[2]=((((-1.0)*x143))+new_r10);
evalcond[3]=((((-1.0)*x144))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x145=IKsin(j6);
IkReal x146=IKcos(j6);
evalcond[0]=x145;
evalcond[1]=((-1.0)*x146);
evalcond[2]=((((-1.0)*x145))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x146))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x147=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x147.valid){
continue;
}
if((x147.value) < -0.00001)
continue;
IkReal gconst11=((-1.0)*(IKsqrt(x147.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj4)))))+(IKabs((cj4+(((-1.0)*gconst11)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst11*gconst11))))) < -0.00001)
continue;
sj4=IKsqrt(((1.0)+(((-1.0)*(gconst11*gconst11)))));
cj4=gconst11;
if( (gconst11) < -1-IKFAST_SINCOS_THRESH || (gconst11) > 1+IKFAST_SINCOS_THRESH )
    continue;
j4=IKacos(gconst11);
CheckValue<IkReal> x148=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x148.valid){
continue;
}
if((x148.value) < -0.00001)
continue;
IkReal gconst11=((-1.0)*(IKsqrt(x148.value)));
j6eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if((((1.0)+(((-1.0)*(gconst11*gconst11))))) < -0.00001)
continue;
CheckValue<IkReal> x149=IKPowWithIntegerCheck(gconst11,-1);
if(!x149.valid){
continue;
}
if( IKabs(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst11*gconst11))))))))+((gconst11*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x149.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst11*gconst11))))))))+((gconst11*new_r10))))+IKsqr((new_r11*(x149.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst11*gconst11))))))))+((gconst11*new_r10))), (new_r11*(x149.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x150=IKcos(j6);
IkReal x151=IKsin(j6);
IkReal x152=((1.0)*gconst11);
if((((1.0)+(((-1.0)*gconst11*x152)))) < -0.00001)
continue;
IkReal x153=IKsqrt(((1.0)+(((-1.0)*gconst11*x152))));
IkReal x154=((1.0)*x153);
evalcond[0]=x151;
evalcond[1]=((-1.0)*x150);
evalcond[2]=((((-1.0)*x150*x152))+new_r11);
evalcond[3]=((((-1.0)*x151*x152))+new_r10);
evalcond[4]=(((x150*x153))+new_r01);
evalcond[5]=(((x151*x153))+new_r00);
evalcond[6]=((((-1.0)*x151))+(((-1.0)*new_r00*x154))+((gconst11*new_r10)));
evalcond[7]=((((-1.0)*x150))+(((-1.0)*new_r01*x154))+((gconst11*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x155=IKPowWithIntegerCheck(IKsign(gconst11),-1);
if(!x155.valid){
continue;
}
CheckValue<IkReal> x156 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x156.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x155.value)))+(x156.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x157=IKcos(j6);
IkReal x158=IKsin(j6);
IkReal x159=((1.0)*gconst11);
if((((1.0)+(((-1.0)*gconst11*x159)))) < -0.00001)
continue;
IkReal x160=IKsqrt(((1.0)+(((-1.0)*gconst11*x159))));
IkReal x161=((1.0)*x160);
evalcond[0]=x158;
evalcond[1]=((-1.0)*x157);
evalcond[2]=((((-1.0)*x157*x159))+new_r11);
evalcond[3]=((((-1.0)*x158*x159))+new_r10);
evalcond[4]=(((x157*x160))+new_r01);
evalcond[5]=(new_r00+((x158*x160)));
evalcond[6]=((((-1.0)*new_r00*x161))+(((-1.0)*x158))+((gconst11*new_r10)));
evalcond[7]=((((-1.0)*x157))+(((-1.0)*new_r01*x161))+((gconst11*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x162=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x162.valid){
continue;
}
if((x162.value) < -0.00001)
continue;
IkReal gconst11=((-1.0)*(IKsqrt(x162.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj4+(((-1.0)*gconst11)))))+(IKabs(((1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst11*gconst11))))) < -0.00001)
continue;
sj4=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst11*gconst11)))))));
cj4=gconst11;
if( (gconst11) < -1-IKFAST_SINCOS_THRESH || (gconst11) > 1+IKFAST_SINCOS_THRESH )
    continue;
j4=((-1.0)*(IKacos(gconst11)));
CheckValue<IkReal> x163=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x163.valid){
continue;
}
if((x163.value) < -0.00001)
continue;
IkReal gconst11=((-1.0)*(IKsqrt(x163.value)));
j6eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if((((1.0)+(((-1.0)*(gconst11*gconst11))))) < -0.00001)
continue;
CheckValue<IkReal> x164=IKPowWithIntegerCheck(gconst11,-1);
if(!x164.valid){
continue;
}
if( IKabs((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst11*gconst11))))))))+((gconst11*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x164.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst11*gconst11))))))))+((gconst11*new_r10))))+IKsqr((new_r11*(x164.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst11*gconst11))))))))+((gconst11*new_r10))), (new_r11*(x164.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x165=IKcos(j6);
IkReal x166=IKsin(j6);
IkReal x167=((1.0)*gconst11);
if((((1.0)+(((-1.0)*gconst11*x167)))) < -0.00001)
continue;
IkReal x168=IKsqrt(((1.0)+(((-1.0)*gconst11*x167))));
IkReal x169=((1.0)*x168);
evalcond[0]=x166;
evalcond[1]=((-1.0)*x165);
evalcond[2]=(new_r11+(((-1.0)*x165*x167)));
evalcond[3]=((((-1.0)*x166*x167))+new_r10);
evalcond[4]=(new_r01+(((-1.0)*x165*x169)));
evalcond[5]=((((-1.0)*x166*x169))+new_r00);
evalcond[6]=(((new_r00*x168))+(((-1.0)*x166))+((gconst11*new_r10)));
evalcond[7]=(((new_r01*x168))+(((-1.0)*x165))+((gconst11*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x170=IKPowWithIntegerCheck(IKsign(gconst11),-1);
if(!x170.valid){
continue;
}
CheckValue<IkReal> x171 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x171.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x170.value)))+(x171.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x172=IKcos(j6);
IkReal x173=IKsin(j6);
IkReal x174=((1.0)*gconst11);
if((((1.0)+(((-1.0)*gconst11*x174)))) < -0.00001)
continue;
IkReal x175=IKsqrt(((1.0)+(((-1.0)*gconst11*x174))));
IkReal x176=((1.0)*x175);
evalcond[0]=x173;
evalcond[1]=((-1.0)*x172);
evalcond[2]=(new_r11+(((-1.0)*x172*x174)));
evalcond[3]=(new_r10+(((-1.0)*x173*x174)));
evalcond[4]=(new_r01+(((-1.0)*x172*x176)));
evalcond[5]=(new_r00+(((-1.0)*x173*x176)));
evalcond[6]=(((new_r00*x175))+(((-1.0)*x173))+((gconst11*new_r10)));
evalcond[7]=(((new_r01*x175))+(((-1.0)*x172))+((gconst11*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x177=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x177.valid){
continue;
}
if((x177.value) < -0.00001)
continue;
IkReal gconst12=IKsqrt(x177.value);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj4)))))+(IKabs((cj4+(((-1.0)*gconst12)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
sj4=IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))));
cj4=gconst12;
if( (gconst12) < -1-IKFAST_SINCOS_THRESH || (gconst12) > 1+IKFAST_SINCOS_THRESH )
    continue;
j4=IKacos(gconst12);
CheckValue<IkReal> x178=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x178.valid){
continue;
}
if((x178.value) < -0.00001)
continue;
IkReal gconst12=IKsqrt(x178.value);
j6eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
CheckValue<IkReal> x179=IKPowWithIntegerCheck(gconst12,-1);
if(!x179.valid){
continue;
}
if( IKabs(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12))))))))+((gconst12*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x179.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12))))))))+((gconst12*new_r10))))+IKsqr((new_r11*(x179.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12))))))))+((gconst12*new_r10))), (new_r11*(x179.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x180=IKcos(j6);
IkReal x181=IKsin(j6);
IkReal x182=((1.0)*x180);
IkReal x183=((1.0)*x181);
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
IkReal x184=IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))));
IkReal x185=((1.0)*x184);
evalcond[0]=x181;
evalcond[1]=((-1.0)*x180);
evalcond[2]=((((-1.0)*gconst12*x182))+new_r11);
evalcond[3]=((((-1.0)*gconst12*x183))+new_r10);
evalcond[4]=(((x180*x184))+new_r01);
evalcond[5]=(new_r00+((x181*x184)));
evalcond[6]=((((-1.0)*x183))+(((-1.0)*new_r00*x185))+((gconst12*new_r10)));
evalcond[7]=((((-1.0)*x182))+(((-1.0)*new_r01*x185))+((gconst12*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x186 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x186.valid){
continue;
}
CheckValue<IkReal> x187=IKPowWithIntegerCheck(IKsign(gconst12),-1);
if(!x187.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x186.value)+(((1.5707963267949)*(x187.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x188=IKcos(j6);
IkReal x189=IKsin(j6);
IkReal x190=((1.0)*x188);
IkReal x191=((1.0)*x189);
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
IkReal x192=IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))));
IkReal x193=((1.0)*x192);
evalcond[0]=x189;
evalcond[1]=((-1.0)*x188);
evalcond[2]=((((-1.0)*gconst12*x190))+new_r11);
evalcond[3]=((((-1.0)*gconst12*x191))+new_r10);
evalcond[4]=(((x188*x192))+new_r01);
evalcond[5]=(((x189*x192))+new_r00);
evalcond[6]=((((-1.0)*x191))+(((-1.0)*new_r00*x193))+((gconst12*new_r10)));
evalcond[7]=((((-1.0)*x190))+(((-1.0)*new_r01*x193))+((gconst12*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x194=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x194.valid){
continue;
}
if((x194.value) < -0.00001)
continue;
IkReal gconst12=IKsqrt(x194.value);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj4+(((-1.0)*gconst12)))))+(IKabs(((1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
sj4=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))))));
cj4=gconst12;
if( (gconst12) < -1-IKFAST_SINCOS_THRESH || (gconst12) > 1+IKFAST_SINCOS_THRESH )
    continue;
j4=((-1.0)*(IKacos(gconst12)));
CheckValue<IkReal> x195=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x195.valid){
continue;
}
if((x195.value) < -0.00001)
continue;
IkReal gconst12=IKsqrt(x195.value);
j6eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
CheckValue<IkReal> x196=IKPowWithIntegerCheck(gconst12,-1);
if(!x196.valid){
continue;
}
if( IKabs((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12))))))))+((gconst12*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x196.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12))))))))+((gconst12*new_r10))))+IKsqr((new_r11*(x196.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12))))))))+((gconst12*new_r10))), (new_r11*(x196.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x197=IKcos(j6);
IkReal x198=IKsin(j6);
IkReal x199=((1.0)*x197);
IkReal x200=((1.0)*x198);
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
IkReal x201=IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))));
IkReal x202=((1.0)*x201);
evalcond[0]=x198;
evalcond[1]=((-1.0)*x197);
evalcond[2]=((((-1.0)*gconst12*x199))+new_r11);
evalcond[3]=((((-1.0)*gconst12*x200))+new_r10);
evalcond[4]=((((-1.0)*x199*x201))+new_r01);
evalcond[5]=((((-1.0)*x200*x201))+new_r00);
evalcond[6]=(((new_r00*x201))+(((-1.0)*x200))+((gconst12*new_r10)));
evalcond[7]=((((-1.0)*x199))+((new_r01*x201))+((gconst12*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x203 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x203.valid){
continue;
}
CheckValue<IkReal> x204=IKPowWithIntegerCheck(IKsign(gconst12),-1);
if(!x204.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x203.value)+(((1.5707963267949)*(x204.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x205=IKcos(j6);
IkReal x206=IKsin(j6);
IkReal x207=((1.0)*x205);
IkReal x208=((1.0)*x206);
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
IkReal x209=IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))));
IkReal x210=((1.0)*x209);
evalcond[0]=x206;
evalcond[1]=((-1.0)*x205);
evalcond[2]=((((-1.0)*gconst12*x207))+new_r11);
evalcond[3]=((((-1.0)*gconst12*x208))+new_r10);
evalcond[4]=((((-1.0)*x207*x209))+new_r01);
evalcond[5]=((((-1.0)*x208*x209))+new_r00);
evalcond[6]=(((new_r00*x209))+(((-1.0)*x208))+((gconst12*new_r10)));
evalcond[7]=(((new_r01*x209))+(((-1.0)*x207))+((gconst12*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x211=new_r22*new_r22;
CheckValue<IkReal> x212=IKPowWithIntegerCheck((((cj4*x211))+(((-1.0)*cj4))),-1);
if(!x212.valid){
continue;
}
CheckValue<IkReal> x213=IKPowWithIntegerCheck(((((-1.0)*sj4))+((sj4*x211))),-1);
if(!x213.valid){
continue;
}
if( IKabs(((x212.value)*(((((-1.0)*new_r01*new_r22))+(((-1.0)*new_r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x213.value)*((((new_r10*new_r22))+new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x212.value)*(((((-1.0)*new_r01*new_r22))+(((-1.0)*new_r10))))))+IKsqr(((x213.value)*((((new_r10*new_r22))+new_r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((x212.value)*(((((-1.0)*new_r01*new_r22))+(((-1.0)*new_r10))))), ((x213.value)*((((new_r10*new_r22))+new_r01))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[10];
IkReal x214=IKsin(j6);
IkReal x215=IKcos(j6);
IkReal x216=((1.0)*sj4);
IkReal x217=(cj4*new_r01);
IkReal x218=(new_r10*sj4);
IkReal x219=(new_r11*sj4);
IkReal x220=(cj4*new_r00);
IkReal x221=((1.0)*x215);
IkReal x222=(sj4*x214);
IkReal x223=(new_r22*x214);
IkReal x224=((1.0)*x214);
evalcond[0]=(x217+x219+x223);
evalcond[1]=(((new_r22*x219))+((new_r22*x217))+x214);
evalcond[2]=(((cj4*new_r10))+(((-1.0)*new_r00*x216))+(((-1.0)*x224)));
evalcond[3]=(((cj4*new_r11))+(((-1.0)*new_r01*x216))+(((-1.0)*x221)));
evalcond[4]=(((cj4*x223))+new_r01+((sj4*x215)));
evalcond[5]=(x218+x220+(((-1.0)*new_r22*x221)));
evalcond[6]=(x222+(((-1.0)*cj4*new_r22*x221))+new_r00);
evalcond[7]=((((-1.0)*cj4*x221))+((new_r22*x222))+new_r11);
evalcond[8]=(((new_r22*x218))+((new_r22*x220))+(((-1.0)*x221)));
evalcond[9]=((((-1.0)*new_r22*x215*x216))+(((-1.0)*cj4*x224))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x225=((1.0)*sj4);
CheckValue<IkReal> x226=IKPowWithIntegerCheck(new_r22,-1);
if(!x226.valid){
continue;
}
if( IKabs(((x226.value)*(((((-1.0)*cj4*new_r01))+(((-1.0)*new_r11*x225)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x225))+((cj4*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x226.value)*(((((-1.0)*cj4*new_r01))+(((-1.0)*new_r11*x225))))))+IKsqr(((((-1.0)*new_r01*x225))+((cj4*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((x226.value)*(((((-1.0)*cj4*new_r01))+(((-1.0)*new_r11*x225))))), ((((-1.0)*new_r01*x225))+((cj4*new_r11))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[10];
IkReal x227=IKsin(j6);
IkReal x228=IKcos(j6);
IkReal x229=((1.0)*sj4);
IkReal x230=(cj4*new_r01);
IkReal x231=(new_r10*sj4);
IkReal x232=(new_r11*sj4);
IkReal x233=(cj4*new_r00);
IkReal x234=((1.0)*x228);
IkReal x235=(sj4*x227);
IkReal x236=(new_r22*x227);
IkReal x237=((1.0)*x227);
evalcond[0]=(x232+x230+x236);
evalcond[1]=(((new_r22*x230))+((new_r22*x232))+x227);
evalcond[2]=(((cj4*new_r10))+(((-1.0)*x237))+(((-1.0)*new_r00*x229)));
evalcond[3]=((((-1.0)*new_r01*x229))+((cj4*new_r11))+(((-1.0)*x234)));
evalcond[4]=(((sj4*x228))+((cj4*x236))+new_r01);
evalcond[5]=((((-1.0)*new_r22*x234))+x233+x231);
evalcond[6]=(x235+new_r00+(((-1.0)*cj4*new_r22*x234)));
evalcond[7]=((((-1.0)*cj4*x234))+((new_r22*x235))+new_r11);
evalcond[8]=(((new_r22*x231))+((new_r22*x233))+(((-1.0)*x234)));
evalcond[9]=((((-1.0)*cj4*x237))+(((-1.0)*new_r22*x228*x229))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x238=cj4*cj4;
IkReal x239=(cj4*new_r22);
CheckValue<IkReal> x240 = IKatan2WithCheck(IkReal((((new_r01*x239))+((new_r00*sj4)))),IkReal(((((-1.0)*new_r00*x239))+((new_r01*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x240.valid){
continue;
}
CheckValue<IkReal> x241=IKPowWithIntegerCheck(IKsign(((-1.0)+(((-1.0)*x238*(new_r22*new_r22)))+x238)),-1);
if(!x241.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x240.value)+(((1.5707963267949)*(x241.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[10];
IkReal x242=IKsin(j6);
IkReal x243=IKcos(j6);
IkReal x244=((1.0)*sj4);
IkReal x245=(cj4*new_r01);
IkReal x246=(new_r10*sj4);
IkReal x247=(new_r11*sj4);
IkReal x248=(cj4*new_r00);
IkReal x249=((1.0)*x243);
IkReal x250=(sj4*x242);
IkReal x251=(new_r22*x242);
IkReal x252=((1.0)*x242);
evalcond[0]=(x251+x247+x245);
evalcond[1]=(((new_r22*x245))+((new_r22*x247))+x242);
evalcond[2]=(((cj4*new_r10))+(((-1.0)*new_r00*x244))+(((-1.0)*x252)));
evalcond[3]=((((-1.0)*new_r01*x244))+((cj4*new_r11))+(((-1.0)*x249)));
evalcond[4]=(new_r01+((cj4*x251))+((sj4*x243)));
evalcond[5]=((((-1.0)*new_r22*x249))+x246+x248);
evalcond[6]=((((-1.0)*cj4*new_r22*x249))+x250+new_r00);
evalcond[7]=((((-1.0)*cj4*x249))+((new_r22*x250))+new_r11);
evalcond[8]=(((new_r22*x248))+((new_r22*x246))+(((-1.0)*x249)));
evalcond[9]=((((-1.0)*new_r22*x243*x244))+(((-1.0)*cj4*x252))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x254=IKPowWithIntegerCheck(sj5,-1);
if(!x254.valid){
continue;
}
IkReal x253=x254.value;
CheckValue<IkReal> x255=IKPowWithIntegerCheck(new_r12,-1);
if(!x255.valid){
continue;
}
if( IKabs((x253*(x255.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj5*cj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x253)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x253*(x255.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj5*cj5)))))))+IKsqr((new_r02*x253))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x253*(x255.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj5*cj5)))))), (new_r02*x253));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x256=IKcos(j4);
IkReal x257=IKsin(j4);
IkReal x258=((1.0)*sj5);
IkReal x259=((1.0)*cj5);
IkReal x260=(new_r12*x257);
IkReal x261=(new_r02*x256);
evalcond[0]=((((-1.0)*x256*x258))+new_r02);
evalcond[1]=((((-1.0)*x257*x258))+new_r12);
evalcond[2]=(((new_r12*x256))+(((-1.0)*new_r02*x257)));
evalcond[3]=(x261+x260+(((-1.0)*x258)));
evalcond[4]=(((cj5*x261))+((cj5*x260))+(((-1.0)*new_r22*x258)));
evalcond[5]=((((-1.0)*new_r00*x256*x258))+(((-1.0)*new_r10*x257*x258))+(((-1.0)*new_r20*x259)));
evalcond[6]=((((-1.0)*new_r21*x259))+(((-1.0)*new_r01*x256*x258))+(((-1.0)*new_r11*x257*x258)));
evalcond[7]=((1.0)+(((-1.0)*x258*x261))+(((-1.0)*x258*x260))+(((-1.0)*new_r22*x259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[3];
j6eval[0]=sj5;
j6eval[1]=((IKabs(new_r20))+(IKabs(new_r21)));
j6eval[2]=IKsign(sj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
j6eval[0]=sj4;
j6eval[1]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
j6eval[0]=cj4;
j6eval[1]=cj5;
j6eval[2]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j6eval[0]=new_r12;
j6eval[1]=IKsign(new_r12);
j6eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j6eval[0]=cj5;
j6eval[1]=IKsign(cj5);
j6eval[2]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j6eval[0]=new_r12;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x262=IKcos(j6);
IkReal x263=((1.0)*(IKsin(j6)));
evalcond[0]=(x262+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x263)));
evalcond[2]=((((-1.0)*new_r00))+(((-1.0)*x263)));
evalcond[3]=((((-1.0)*x262))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x264=IKsin(j6);
IkReal x265=((1.0)*(IKcos(j6)));
evalcond[0]=(x264+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x265)));
evalcond[2]=((((-1.0)*x264))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*new_r01))+(((-1.0)*x265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r12);
evalcond[1]=new_r20;
evalcond[2]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
new_r12=0;
j6eval[0]=cj5;
j6eval[1]=IKsign(cj5);
j6eval[2]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
new_r12=0;
j6eval[0]=cj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r11;
evalcond[2]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x266=IKsin(j6);
IkReal x267=IKcos(j6);
evalcond[0]=x266;
evalcond[1]=((-1.0)*x267);
evalcond[2]=((((-1.0)*x266))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x267))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r11;
evalcond[2]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x268=IKsin(j6);
IkReal x269=IKcos(j6);
evalcond[0]=x268;
evalcond[1]=((-1.0)*x269);
evalcond[2]=((((-1.0)*x268))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x269))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x270=IKsin(j6);
IkReal x271=IKcos(j6);
IkReal x272=((-1.0)*x271);
evalcond[0]=x270;
evalcond[1]=(cj5*x270);
evalcond[2]=x272;
evalcond[3]=(cj5*x272);
evalcond[4]=((((-1.0)*x270))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x271))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x273=IKPowWithIntegerCheck(cj5,-1);
if(!x273.valid){
continue;
}
if( IKabs(((-1.0)*cj5*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r10*(x273.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj5*new_r11))+IKsqr((new_r10*(x273.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*cj5*new_r11), (new_r10*(x273.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x274=IKsin(j6);
IkReal x275=IKcos(j6);
IkReal x276=((1.0)*x275);
evalcond[0]=(((cj5*x274))+new_r11);
evalcond[1]=(((cj5*new_r11))+x274);
evalcond[2]=((((-1.0)*cj5*x276))+new_r10);
evalcond[3]=((((-1.0)*x274))+(((-1.0)*new_r00)));
evalcond[4]=((((-1.0)*x276))+(((-1.0)*new_r01)));
evalcond[5]=(((cj5*new_r10))+(((-1.0)*x276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x277 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x277.valid){
continue;
}
CheckValue<IkReal> x278=IKPowWithIntegerCheck(IKsign(cj5),-1);
if(!x278.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x277.value)+(((1.5707963267949)*(x278.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x279=IKsin(j6);
IkReal x280=IKcos(j6);
IkReal x281=((1.0)*x280);
evalcond[0]=(((cj5*x279))+new_r11);
evalcond[1]=(((cj5*new_r11))+x279);
evalcond[2]=((((-1.0)*cj5*x281))+new_r10);
evalcond[3]=((((-1.0)*x279))+(((-1.0)*new_r00)));
evalcond[4]=((((-1.0)*x281))+(((-1.0)*new_r01)));
evalcond[5]=(((cj5*new_r10))+(((-1.0)*x281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x282=IKsin(j6);
IkReal x283=IKcos(j6);
IkReal x284=((-1.0)*x283);
evalcond[0]=x282;
evalcond[1]=(new_r22*x282);
evalcond[2]=x284;
evalcond[3]=(new_r22*x284);
evalcond[4]=((((-1.0)*x282))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x283))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x285=IKPowWithIntegerCheck(new_r12,-1);
if(!x285.valid){
continue;
}
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x285.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r20*(x285.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r20*(x285.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x286=IKsin(j6);
IkReal x287=IKcos(j6);
IkReal x288=((1.0)*sj5);
IkReal x289=((1.0)*x287);
IkReal x290=((1.0)*x286);
evalcond[0]=(((new_r12*x287))+new_r20);
evalcond[1]=(new_r11+((cj5*x286)));
evalcond[2]=((((-1.0)*new_r12*x290))+new_r21);
evalcond[3]=((((-1.0)*cj5*x289))+new_r10);
evalcond[4]=((((-1.0)*x290))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x289))+(((-1.0)*new_r01)));
evalcond[6]=(((cj5*new_r11))+x286+(((-1.0)*new_r21*x288)));
evalcond[7]=(((cj5*new_r10))+(((-1.0)*x289))+(((-1.0)*new_r20*x288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x291 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x291.valid){
continue;
}
CheckValue<IkReal> x292=IKPowWithIntegerCheck(IKsign(cj5),-1);
if(!x292.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x291.value)+(((1.5707963267949)*(x292.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x293=IKsin(j6);
IkReal x294=IKcos(j6);
IkReal x295=((1.0)*sj5);
IkReal x296=((1.0)*x294);
IkReal x297=((1.0)*x293);
evalcond[0]=(((new_r12*x294))+new_r20);
evalcond[1]=(((cj5*x293))+new_r11);
evalcond[2]=((((-1.0)*new_r12*x297))+new_r21);
evalcond[3]=((((-1.0)*cj5*x296))+new_r10);
evalcond[4]=((((-1.0)*x297))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x296))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x295))+((cj5*new_r11))+x293);
evalcond[7]=((((-1.0)*new_r20*x295))+((cj5*new_r10))+(((-1.0)*x296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x298 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x298.valid){
continue;
}
CheckValue<IkReal> x299=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x299.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x298.value)+(((1.5707963267949)*(x299.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x300=IKsin(j6);
IkReal x301=IKcos(j6);
IkReal x302=((1.0)*sj5);
IkReal x303=((1.0)*x301);
IkReal x304=((1.0)*x300);
evalcond[0]=(((new_r12*x301))+new_r20);
evalcond[1]=(new_r11+((cj5*x300)));
evalcond[2]=((((-1.0)*new_r12*x304))+new_r21);
evalcond[3]=((((-1.0)*cj5*x303))+new_r10);
evalcond[4]=((((-1.0)*new_r00))+(((-1.0)*x304)));
evalcond[5]=((((-1.0)*new_r01))+(((-1.0)*x303)));
evalcond[6]=((((-1.0)*new_r21*x302))+((cj5*new_r11))+x300);
evalcond[7]=(((cj5*new_r10))+(((-1.0)*new_r20*x302))+(((-1.0)*x303)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x305=IKsin(j6);
IkReal x306=IKcos(j6);
CheckValue<IkReal> x311=IKPowWithIntegerCheck(new_r12,-1);
if(!x311.valid){
continue;
}
IkReal x307=x311.value;
IkReal x308=new_r22*new_r22;
IkReal x309=((1.0)*x306);
IkReal x310=(x307*x308);
evalcond[0]=(((new_r12*x305))+new_r21);
evalcond[1]=((((-1.0)*x305))+new_r00);
evalcond[2]=(new_r01+(((-1.0)*x309)));
evalcond[3]=((((-1.0)*new_r12*x309))+new_r20);
evalcond[4]=((((-1.0)*new_r11))+((cj5*x305)));
evalcond[5]=((((-1.0)*cj5*x309))+(((-1.0)*new_r10)));
evalcond[6]=(x305+((new_r12*new_r21))+((new_r21*x310)));
evalcond[7]=(((new_r20*x310))+((new_r12*new_r20))+(((-1.0)*x309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x312=IKcos(j6);
IkReal x313=IKsin(j6);
IkReal x314=((1.0)*sj4);
IkReal x315=((1.0)*x313);
IkReal x316=((1.0)*x312);
evalcond[0]=(x312+new_r20);
evalcond[1]=((((-1.0)*x315))+new_r21);
evalcond[2]=(((sj4*x312))+new_r01);
evalcond[3]=(((sj4*x313))+new_r00);
evalcond[4]=((((-1.0)*cj4*x316))+new_r11);
evalcond[5]=((((-1.0)*cj4*x315))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x314))+((cj4*new_r10))+(((-1.0)*x315)));
evalcond[7]=(((cj4*new_r11))+(((-1.0)*x316))+(((-1.0)*new_r01*x314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x317=IKcos(j6);
IkReal x318=IKsin(j6);
IkReal x319=((1.0)*sj4);
IkReal x320=((1.0)*x317);
IkReal x321=((1.0)*x318);
evalcond[0]=(x318+new_r21);
evalcond[1]=((((-1.0)*x320))+new_r20);
evalcond[2]=(((sj4*x317))+new_r01);
evalcond[3]=(((sj4*x318))+new_r00);
evalcond[4]=(new_r11+(((-1.0)*cj4*x320)));
evalcond[5]=(new_r10+(((-1.0)*cj4*x321)));
evalcond[6]=((((-1.0)*new_r00*x319))+((cj4*new_r10))+(((-1.0)*x321)));
evalcond[7]=(((cj4*new_r11))+(((-1.0)*x320))+(((-1.0)*new_r01*x319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x322=((1.0)*new_r01);
if( IKabs(((((-1.0)*new_r00*sj4))+(((-1.0)*cj4*x322)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*new_r00))+(((-1.0)*sj4*x322)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*sj4))+(((-1.0)*cj4*x322))))+IKsqr((((cj4*new_r00))+(((-1.0)*sj4*x322))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*new_r00*sj4))+(((-1.0)*cj4*x322))), (((cj4*new_r00))+(((-1.0)*sj4*x322))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x323=IKsin(j6);
IkReal x324=IKcos(j6);
IkReal x325=((1.0)*sj4);
IkReal x326=((1.0)*x324);
IkReal x327=(sj4*x323);
IkReal x328=(sj4*x324);
IkReal x329=(cj4*x323);
IkReal x330=(cj4*x326);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x323);
evalcond[1]=(x328+x329+new_r01);
evalcond[2]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x326)));
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x323))+(((-1.0)*new_r00*x325)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x326))+(((-1.0)*new_r01*x325)));
evalcond[5]=(x327+(((-1.0)*x330))+new_r00);
evalcond[6]=(x327+(((-1.0)*x330))+new_r11);
evalcond[7]=((((-1.0)*x329))+new_r10+(((-1.0)*x324*x325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x331=((1.0)*new_r00);
if( IKabs(((((-1.0)*sj4*x331))+((cj4*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x331)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x331))+((cj4*new_r01))))+IKsqr(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x331))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*sj4*x331))+((cj4*new_r01))), ((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x331))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x332=IKcos(j6);
IkReal x333=IKsin(j6);
IkReal x334=((1.0)*sj4);
IkReal x335=((1.0)*x333);
IkReal x336=(sj4*x332);
IkReal x337=((1.0)*x332);
IkReal x338=(cj4*x335);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x332);
evalcond[1]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x335)));
evalcond[2]=(((sj4*x333))+((cj4*x332))+new_r00);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x334))+(((-1.0)*x335)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x337))+(((-1.0)*new_r01*x334)));
evalcond[5]=(x336+(((-1.0)*x338))+new_r01);
evalcond[6]=(x336+(((-1.0)*x338))+new_r10);
evalcond[7]=((((-1.0)*x333*x334))+(((-1.0)*cj4*x337))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x339=IKcos(j6);
IkReal x340=IKsin(j6);
IkReal x341=((1.0)*sj5);
IkReal x342=((1.0)*x339);
IkReal x343=((1.0)*x340);
evalcond[0]=(((new_r02*x339))+new_r20);
evalcond[1]=(new_r10+(((-1.0)*x343)));
evalcond[2]=(new_r11+(((-1.0)*x342)));
evalcond[3]=(((cj5*x340))+new_r01);
evalcond[4]=((((-1.0)*new_r02*x343))+new_r21);
evalcond[5]=((((-1.0)*cj5*x342))+new_r00);
evalcond[6]=(((cj5*new_r01))+x340+(((-1.0)*new_r21*x341)));
evalcond[7]=(((cj5*new_r00))+(((-1.0)*new_r20*x341))+(((-1.0)*x342)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j6eval[0]=new_r02;
j6eval[1]=IKsign(new_r02);
j6eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j6eval[0]=new_r02;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j6eval[0]=new_r02;
j6eval[1]=cj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x344=IKcos(j6);
IkReal x345=((1.0)*(IKsin(j6)));
evalcond[0]=(x344+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x345)));
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x345)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x346=IKsin(j6);
IkReal x347=((1.0)*(IKcos(j6)));
evalcond[0]=(x346+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x347)));
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x346)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x348=IKsin(j6);
IkReal x349=IKcos(j6);
IkReal x350=((-1.0)*x349);
evalcond[0]=x348;
evalcond[1]=(new_r22*x348);
evalcond[2]=x350;
evalcond[3]=(new_r22*x350);
evalcond[4]=((((-1.0)*new_r10))+(((-1.0)*x348)));
evalcond[5]=((((-1.0)*new_r11))+(((-1.0)*x349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x351=IKPowWithIntegerCheck(new_r02,-1);
if(!x351.valid){
continue;
}
CheckValue<IkReal> x352=IKPowWithIntegerCheck(cj5,-1);
if(!x352.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*(x351.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00*(x352.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*(x351.value)))+IKsqr(((-1.0)*new_r00*(x352.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21*(x351.value)), ((-1.0)*new_r00*(x352.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x353=IKsin(j6);
IkReal x354=IKcos(j6);
CheckValue<IkReal> x359=IKPowWithIntegerCheck(new_r02,-1);
if(!x359.valid){
continue;
}
IkReal x355=x359.value;
IkReal x356=new_r22*new_r22;
IkReal x357=((1.0)*x354);
IkReal x358=(x355*x356);
evalcond[0]=(new_r21+((new_r02*x353)));
evalcond[1]=((((-1.0)*new_r02*x357))+new_r20);
evalcond[2]=((((-1.0)*x353))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x357))+(((-1.0)*new_r11)));
evalcond[4]=(((cj5*x353))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*new_r00))+(((-1.0)*cj5*x357)));
evalcond[6]=(((new_r21*x358))+x353+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*x357))+((new_r20*x358))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x360=IKPowWithIntegerCheck(new_r02,-1);
if(!x360.valid){
continue;
}
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r20*(x360.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr((new_r20*(x360.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r10), (new_r20*(x360.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x361=IKsin(j6);
IkReal x362=IKcos(j6);
CheckValue<IkReal> x367=IKPowWithIntegerCheck(new_r02,-1);
if(!x367.valid){
continue;
}
IkReal x363=x367.value;
IkReal x364=new_r22*new_r22;
IkReal x365=((1.0)*x362);
IkReal x366=(x363*x364);
evalcond[0]=(new_r21+((new_r02*x361)));
evalcond[1]=(new_r20+(((-1.0)*new_r02*x365)));
evalcond[2]=((((-1.0)*x361))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x365))+(((-1.0)*new_r11)));
evalcond[4]=(((cj5*x361))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*cj5*x365))+(((-1.0)*new_r00)));
evalcond[6]=(x361+((new_r21*x366))+((new_r02*new_r21)));
evalcond[7]=(((new_r20*x366))+(((-1.0)*x365))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x368 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x368.valid){
continue;
}
CheckValue<IkReal> x369=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x369.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x368.value)+(((1.5707963267949)*(x369.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x370=IKsin(j6);
IkReal x371=IKcos(j6);
CheckValue<IkReal> x376=IKPowWithIntegerCheck(new_r02,-1);
if(!x376.valid){
continue;
}
IkReal x372=x376.value;
IkReal x373=new_r22*new_r22;
IkReal x374=((1.0)*x371);
IkReal x375=(x372*x373);
evalcond[0]=(new_r21+((new_r02*x370)));
evalcond[1]=(new_r20+(((-1.0)*new_r02*x374)));
evalcond[2]=((((-1.0)*x370))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x374))+(((-1.0)*new_r11)));
evalcond[4]=(((cj5*x370))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*cj5*x374))+(((-1.0)*new_r00)));
evalcond[6]=(x370+((new_r21*x375))+((new_r02*new_r21)));
evalcond[7]=(((new_r20*x375))+(((-1.0)*x374))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j6eval[0]=1.0;
if( IKabs(j6eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j6]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j6array[2], cj6array[2], sj6array[2], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[2]={true,true};
_nj6 = 2;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x378=IKPowWithIntegerCheck(sj5,-1);
if(!x378.valid){
continue;
}
IkReal x377=x378.value;
CheckValue<IkReal> x379=IKPowWithIntegerCheck(cj4,-1);
if(!x379.valid){
continue;
}
CheckValue<IkReal> x380=IKPowWithIntegerCheck(cj5,-1);
if(!x380.valid){
continue;
}
if( IKabs((x377*(x379.value)*(x380.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x377)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x377*(x379.value)*(x380.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))))+IKsqr(((-1.0)*new_r20*x377))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x377*(x379.value)*(x380.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))), ((-1.0)*new_r20*x377));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x381=IKsin(j6);
IkReal x382=IKcos(j6);
IkReal x383=((1.0)*sj5);
IkReal x384=((1.0)*sj4);
IkReal x385=(cj5*sj4);
IkReal x386=(cj4*new_r01);
IkReal x387=(cj4*new_r00);
IkReal x388=((1.0)*x382);
IkReal x389=(cj5*x381);
IkReal x390=((1.0)*x381);
evalcond[0]=(((sj5*x382))+new_r20);
evalcond[1]=((((-1.0)*x381*x383))+new_r21);
evalcond[2]=(((new_r11*sj4))+x386+x389);
evalcond[3]=((((-1.0)*x390))+((cj4*new_r10))+(((-1.0)*new_r00*x384)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*new_r01*x384))+(((-1.0)*x388)));
evalcond[5]=(((sj4*x382))+new_r01+((cj4*x389)));
evalcond[6]=(((new_r10*sj4))+x387+(((-1.0)*cj5*x388)));
evalcond[7]=((((-1.0)*cj4*cj5*x388))+((sj4*x381))+new_r00);
evalcond[8]=((((-1.0)*cj4*x388))+new_r11+((x381*x385)));
evalcond[9]=((((-1.0)*cj4*x390))+(((-1.0)*cj5*x382*x384))+new_r10);
evalcond[10]=(x381+((new_r11*x385))+(((-1.0)*new_r21*x383))+((cj5*x386)));
evalcond[11]=((((-1.0)*new_r20*x383))+((new_r10*x385))+(((-1.0)*x388))+((cj5*x387)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x392=IKPowWithIntegerCheck(sj5,-1);
if(!x392.valid){
continue;
}
IkReal x391=x392.value;
CheckValue<IkReal> x393=IKPowWithIntegerCheck(sj4,-1);
if(!x393.valid){
continue;
}
if( IKabs((x391*(x393.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x391)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x391*(x393.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))))+IKsqr(((-1.0)*new_r20*x391))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x391*(x393.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))), ((-1.0)*new_r20*x391));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x394=IKsin(j6);
IkReal x395=IKcos(j6);
IkReal x396=((1.0)*sj5);
IkReal x397=((1.0)*sj4);
IkReal x398=(cj5*sj4);
IkReal x399=(cj4*new_r01);
IkReal x400=(cj4*new_r00);
IkReal x401=((1.0)*x395);
IkReal x402=(cj5*x394);
IkReal x403=((1.0)*x394);
evalcond[0]=(((sj5*x395))+new_r20);
evalcond[1]=((((-1.0)*x394*x396))+new_r21);
evalcond[2]=(((new_r11*sj4))+x399+x402);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x397))+(((-1.0)*x403)));
evalcond[4]=((((-1.0)*new_r01*x397))+((cj4*new_r11))+(((-1.0)*x401)));
evalcond[5]=(((cj4*x402))+new_r01+((sj4*x395)));
evalcond[6]=(((new_r10*sj4))+x400+(((-1.0)*cj5*x401)));
evalcond[7]=(new_r00+(((-1.0)*cj4*cj5*x401))+((sj4*x394)));
evalcond[8]=(((x394*x398))+new_r11+(((-1.0)*cj4*x401)));
evalcond[9]=(new_r10+(((-1.0)*cj4*x403))+(((-1.0)*cj5*x395*x397)));
evalcond[10]=(((new_r11*x398))+(((-1.0)*new_r21*x396))+((cj5*x399))+x394);
evalcond[11]=(((cj5*x400))+(((-1.0)*x401))+(((-1.0)*new_r20*x396))+((new_r10*x398)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x404=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x404.valid){
continue;
}
CheckValue<IkReal> x405 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x405.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x404.value)))+(x405.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x406=IKsin(j6);
IkReal x407=IKcos(j6);
IkReal x408=((1.0)*sj5);
IkReal x409=((1.0)*sj4);
IkReal x410=(cj5*sj4);
IkReal x411=(cj4*new_r01);
IkReal x412=(cj4*new_r00);
IkReal x413=((1.0)*x407);
IkReal x414=(cj5*x406);
IkReal x415=((1.0)*x406);
evalcond[0]=(((sj5*x407))+new_r20);
evalcond[1]=((((-1.0)*x406*x408))+new_r21);
evalcond[2]=(((new_r11*sj4))+x411+x414);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x409))+(((-1.0)*x415)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x413))+(((-1.0)*new_r01*x409)));
evalcond[5]=(((cj4*x414))+new_r01+((sj4*x407)));
evalcond[6]=(((new_r10*sj4))+x412+(((-1.0)*cj5*x413)));
evalcond[7]=((((-1.0)*cj4*cj5*x413))+new_r00+((sj4*x406)));
evalcond[8]=(((x406*x410))+(((-1.0)*cj4*x413))+new_r11);
evalcond[9]=((((-1.0)*cj5*x407*x409))+(((-1.0)*cj4*x415))+new_r10);
evalcond[10]=(((cj5*x411))+x406+(((-1.0)*new_r21*x408))+((new_r11*x410)));
evalcond[11]=((((-1.0)*new_r20*x408))+((cj5*x412))+((new_r10*x410))+(((-1.0)*x413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x416=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x416.valid){
continue;
}
CheckValue<IkReal> x417 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x417.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x416.value)))+(x417.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=(new_r20+((sj5*(IKcos(j6)))));
evalcond[1]=((((-1.0)*sj5*(IKsin(j6))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j4eval[0]=sj5;
j4eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j4eval[2]=IKsign(sj5);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj6;
j4eval[1]=sj5;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r00), new_r10);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[18];
IkReal x418=IKsin(j4);
IkReal x419=IKcos(j4);
IkReal x420=((1.0)*sj5);
IkReal x421=(new_r22*x418);
IkReal x422=(new_r11*x418);
IkReal x423=(new_r02*x419);
IkReal x424=(new_r22*x419);
IkReal x425=(new_r12*x418);
IkReal x426=(new_r10*x418);
IkReal x427=((1.0)*x418);
IkReal x428=(x419*x420);
evalcond[0]=(x418+new_r00);
evalcond[1]=(x424+new_r01);
evalcond[2]=(x421+new_r11);
evalcond[3]=(new_r10+(((-1.0)*x419)));
evalcond[4]=((((-1.0)*x428))+new_r02);
evalcond[5]=((((-1.0)*x418*x420))+new_r12);
evalcond[6]=(x426+((new_r00*x419)));
evalcond[7]=(((new_r12*x419))+(((-1.0)*new_r02*x427)));
evalcond[8]=(((new_r11*x419))+(((-1.0)*new_r01*x427)));
evalcond[9]=(x422+new_r22+((new_r01*x419)));
evalcond[10]=((-1.0)+(((-1.0)*new_r00*x427))+((new_r10*x419)));
evalcond[11]=(((new_r10*x421))+((new_r00*x424)));
evalcond[12]=((((-1.0)*x420))+x425+x423);
evalcond[13]=((((-1.0)*x420*x426))+(((-1.0)*new_r00*x428)));
evalcond[14]=(((new_r22*x423))+(((-1.0)*new_r22*x420))+((new_r12*x421)));
evalcond[15]=((((-1.0)*x420*x422))+(((-1.0)*cj5*new_r21))+(((-1.0)*new_r01*x428)));
evalcond[16]=((1.0)+(((-1.0)*sj5*x420))+((new_r11*x421))+((new_r01*x424)));
evalcond[17]=((1.0)+(((-1.0)*x420*x425))+(((-1.0)*x420*x423))+(((-1.0)*(new_r22*new_r22))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(new_r00, ((-1.0)*new_r10));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[18];
IkReal x429=IKcos(j4);
IkReal x430=IKsin(j4);
IkReal x431=(new_r22*sj5);
IkReal x432=((1.0)*sj5);
IkReal x433=((1.0)*x429);
IkReal x434=(new_r22*x430);
IkReal x435=(new_r11*x430);
IkReal x436=(new_r02*x429);
IkReal x437=(new_r01*x429);
IkReal x438=(new_r12*x430);
IkReal x439=((1.0)*x430);
IkReal x440=(new_r10*x430);
IkReal x441=(new_r00*x429);
evalcond[0]=(x429+new_r10);
evalcond[1]=((((-1.0)*x439))+new_r00);
evalcond[2]=((((-1.0)*x429*x432))+new_r02);
evalcond[3]=((((-1.0)*x430*x432))+new_r12);
evalcond[4]=(new_r01+(((-1.0)*new_r22*x433)));
evalcond[5]=((((-1.0)*x434))+new_r11);
evalcond[6]=(x441+x440);
evalcond[7]=(((new_r12*x429))+(((-1.0)*new_r02*x439)));
evalcond[8]=((((-1.0)*new_r01*x439))+((new_r11*x429)));
evalcond[9]=((1.0)+(((-1.0)*new_r00*x439))+((new_r10*x429)));
evalcond[10]=(((new_r22*x441))+((new_r10*x434)));
evalcond[11]=((((-1.0)*x432))+x438+x436);
evalcond[12]=(x435+x437+(((-1.0)*new_r22)));
evalcond[13]=((((-1.0)*x432*x440))+(((-1.0)*x432*x441)));
evalcond[14]=((((-1.0)*x431))+((new_r12*x434))+((new_r22*x436)));
evalcond[15]=((-1.0)+((new_r11*x434))+((new_r22*x437))+(sj5*sj5));
evalcond[16]=((((-1.0)*x432*x437))+(((-1.0)*x432*x435))+x431);
evalcond[17]=((1.0)+(((-1.0)*x432*x436))+(((-1.0)*x432*x438))+(((-1.0)*(new_r22*new_r22))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x442=((1.0)*sj6);
if( IKabs(((((-1.0)*new_r00*x442))+(((-1.0)*cj6*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x442))+((cj6*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x442))+(((-1.0)*cj6*new_r01))))+IKsqr(((((-1.0)*new_r01*x442))+((cj6*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*new_r00*x442))+(((-1.0)*cj6*new_r01))), ((((-1.0)*new_r01*x442))+((cj6*new_r00))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x443=IKcos(j4);
IkReal x444=IKsin(j4);
IkReal x445=((1.0)*cj6);
IkReal x446=(sj6*x444);
IkReal x447=(cj6*x444);
IkReal x448=(sj6*x443);
IkReal x449=((1.0)*x444);
IkReal x450=(x443*x445);
evalcond[0]=(((new_r01*x443))+sj6+((new_r11*x444)));
evalcond[1]=(x448+x447+new_r01);
evalcond[2]=((((-1.0)*x450))+x446+new_r00);
evalcond[3]=((((-1.0)*x450))+x446+new_r11);
evalcond[4]=(((new_r00*x443))+(((-1.0)*x445))+((new_r10*x444)));
evalcond[5]=((((-1.0)*x444*x445))+(((-1.0)*x448))+new_r10);
evalcond[6]=((((-1.0)*sj6))+(((-1.0)*new_r00*x449))+((new_r10*x443)));
evalcond[7]=((((-1.0)*x445))+(((-1.0)*new_r01*x449))+((new_r11*x443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x451=((1.0)*new_r00);
if( IKabs(((((-1.0)*cj6*new_r01))+(((-1.0)*sj6*x451)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj6))+(((-1.0)*cj6*x451)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*new_r01))+(((-1.0)*sj6*x451))))+IKsqr((((new_r01*sj6))+(((-1.0)*cj6*x451))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj6*new_r01))+(((-1.0)*sj6*x451))), (((new_r01*sj6))+(((-1.0)*cj6*x451))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x452=IKsin(j4);
IkReal x453=IKcos(j4);
IkReal x454=((1.0)*sj6);
IkReal x455=(cj6*x452);
IkReal x456=(cj6*x453);
IkReal x457=((1.0)*x452);
IkReal x458=(x453*x454);
evalcond[0]=(((new_r10*x452))+cj6+((new_r00*x453)));
evalcond[1]=(((sj6*x452))+x456+new_r00);
evalcond[2]=((((-1.0)*x458))+x455+new_r01);
evalcond[3]=((((-1.0)*x458))+x455+new_r10);
evalcond[4]=(((new_r11*x452))+((new_r01*x453))+(((-1.0)*x454)));
evalcond[5]=((((-1.0)*x456))+(((-1.0)*x452*x454))+new_r11);
evalcond[6]=(((new_r10*x453))+(((-1.0)*new_r00*x457))+(((-1.0)*x454)));
evalcond[7]=(((new_r11*x453))+(((-1.0)*new_r01*x457))+(((-1.0)*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j4eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j4eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j4eval[0]=((IKabs((new_r11*new_r22)))+(IKabs((new_r01*new_r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x460 = IKatan2WithCheck(IkReal((new_r01*new_r22)),IkReal((new_r11*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x460.valid){
continue;
}
IkReal x459=x460.value;
j4array[0]=((-1.0)*x459);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x459)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x461=IKcos(j4);
IkReal x462=IKsin(j4);
IkReal x463=(new_r00*x461);
IkReal x464=(new_r10*x462);
IkReal x465=((1.0)*x462);
evalcond[0]=(((new_r11*x462))+((new_r01*x461)));
evalcond[1]=(x463+x464);
evalcond[2]=(((new_r10*x461))+(((-1.0)*new_r00*x465)));
evalcond[3]=(((new_r11*x461))+(((-1.0)*new_r01*x465)));
evalcond[4]=(((new_r22*x464))+((new_r22*x463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x467 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x467.valid){
continue;
}
IkReal x466=x467.value;
j4array[0]=((-1.0)*x466);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x466)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x468=IKcos(j4);
IkReal x469=IKsin(j4);
IkReal x470=(new_r01*x468);
IkReal x471=(new_r11*x469);
IkReal x472=((1.0)*x469);
evalcond[0]=(x470+x471);
evalcond[1]=(((new_r10*x468))+(((-1.0)*new_r00*x472)));
evalcond[2]=(((new_r11*x468))+(((-1.0)*new_r01*x472)));
evalcond[3]=(((new_r22*x471))+((new_r22*x470)));
evalcond[4]=(((new_r00*new_r22*x468))+((new_r10*new_r22*x469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x474 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x474.valid){
continue;
}
IkReal x473=x474.value;
j4array[0]=((-1.0)*x473);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x473)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x475=IKcos(j4);
IkReal x476=IKsin(j4);
IkReal x477=(new_r00*x475);
IkReal x478=(new_r22*x476);
IkReal x479=((1.0)*x476);
evalcond[0]=(((new_r10*x476))+x477);
evalcond[1]=(((new_r10*x475))+(((-1.0)*new_r00*x479)));
evalcond[2]=(((new_r11*x475))+(((-1.0)*new_r01*x479)));
evalcond[3]=(((new_r11*x478))+((new_r01*new_r22*x475)));
evalcond[4]=(((new_r10*x478))+((new_r22*x477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x481=IKPowWithIntegerCheck(sj5,-1);
if(!x481.valid){
continue;
}
IkReal x480=x481.value;
CheckValue<IkReal> x482=IKPowWithIntegerCheck(cj6,-1);
if(!x482.valid){
continue;
}
if( IKabs((x480*(x482.value)*(((((-1.0)*new_r01*sj5))+(((-1.0)*cj5*new_r02*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x480)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x480*(x482.value)*(((((-1.0)*new_r01*sj5))+(((-1.0)*cj5*new_r02*sj6))))))+IKsqr((new_r02*x480))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x480*(x482.value)*(((((-1.0)*new_r01*sj5))+(((-1.0)*cj5*new_r02*sj6))))), (new_r02*x480));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[18];
IkReal x483=IKcos(j4);
IkReal x484=IKsin(j4);
IkReal x485=((1.0)*cj6);
IkReal x486=(cj5*sj6);
IkReal x487=((1.0)*cj5);
IkReal x488=((1.0)*sj5);
IkReal x489=((1.0)*x483);
IkReal x490=(cj5*x484);
IkReal x491=(new_r11*x484);
IkReal x492=(cj5*x483);
IkReal x493=(new_r12*x484);
IkReal x494=(new_r10*x484);
IkReal x495=((1.0)*x484);
evalcond[0]=((((-1.0)*x483*x488))+new_r02);
evalcond[1]=((((-1.0)*x484*x488))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x495))+((new_r12*x483)));
evalcond[3]=(((x483*x486))+new_r01+((cj6*x484)));
evalcond[4]=(((new_r02*x483))+(((-1.0)*x488))+x493);
evalcond[5]=(x486+x491+((new_r01*x483)));
evalcond[6]=(((sj6*x484))+(((-1.0)*x485*x492))+new_r00);
evalcond[7]=(((x484*x486))+(((-1.0)*x483*x485))+new_r11);
evalcond[8]=((((-1.0)*new_r00*x495))+(((-1.0)*sj6))+((new_r10*x483)));
evalcond[9]=((((-1.0)*new_r01*x495))+(((-1.0)*x485))+((new_r11*x483)));
evalcond[10]=(x494+((new_r00*x483))+(((-1.0)*cj5*x485)));
evalcond[11]=((((-1.0)*sj6*x489))+(((-1.0)*x485*x490))+new_r10);
evalcond[12]=(((new_r02*x492))+((new_r12*x490))+(((-1.0)*new_r22*x488)));
evalcond[13]=((((-1.0)*new_r21*x488))+sj6+((new_r11*x490))+((new_r01*x492)));
evalcond[14]=((((-1.0)*x488*x494))+(((-1.0)*new_r20*x487))+(((-1.0)*new_r00*x483*x488)));
evalcond[15]=((((-1.0)*x488*x491))+(((-1.0)*new_r21*x487))+(((-1.0)*new_r01*x483*x488)));
evalcond[16]=((1.0)+(((-1.0)*x488*x493))+(((-1.0)*new_r02*x483*x488))+(((-1.0)*new_r22*x487)));
evalcond[17]=((((-1.0)*x485))+(((-1.0)*new_r20*x488))+((new_r10*x490))+((new_r00*x492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x496=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x496.valid){
continue;
}
CheckValue<IkReal> x497 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x496.value)))+(x497.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[18];
IkReal x498=IKcos(j4);
IkReal x499=IKsin(j4);
IkReal x500=((1.0)*cj6);
IkReal x501=(cj5*sj6);
IkReal x502=((1.0)*cj5);
IkReal x503=((1.0)*sj5);
IkReal x504=((1.0)*x498);
IkReal x505=(cj5*x499);
IkReal x506=(new_r11*x499);
IkReal x507=(cj5*x498);
IkReal x508=(new_r12*x499);
IkReal x509=(new_r10*x499);
IkReal x510=((1.0)*x499);
evalcond[0]=(new_r02+(((-1.0)*x498*x503)));
evalcond[1]=((((-1.0)*x499*x503))+new_r12);
evalcond[2]=(((new_r12*x498))+(((-1.0)*new_r02*x510)));
evalcond[3]=(((cj6*x499))+((x498*x501))+new_r01);
evalcond[4]=(((new_r02*x498))+(((-1.0)*x503))+x508);
evalcond[5]=(x501+x506+((new_r01*x498)));
evalcond[6]=(new_r00+(((-1.0)*x500*x507))+((sj6*x499)));
evalcond[7]=(new_r11+((x499*x501))+(((-1.0)*x498*x500)));
evalcond[8]=((((-1.0)*sj6))+((new_r10*x498))+(((-1.0)*new_r00*x510)));
evalcond[9]=((((-1.0)*x500))+((new_r11*x498))+(((-1.0)*new_r01*x510)));
evalcond[10]=((((-1.0)*cj5*x500))+x509+((new_r00*x498)));
evalcond[11]=(new_r10+(((-1.0)*sj6*x504))+(((-1.0)*x500*x505)));
evalcond[12]=(((new_r02*x507))+((new_r12*x505))+(((-1.0)*new_r22*x503)));
evalcond[13]=((((-1.0)*new_r21*x503))+sj6+((new_r11*x505))+((new_r01*x507)));
evalcond[14]=((((-1.0)*new_r20*x502))+(((-1.0)*x503*x509))+(((-1.0)*new_r00*x498*x503)));
evalcond[15]=((((-1.0)*new_r21*x502))+(((-1.0)*x503*x506))+(((-1.0)*new_r01*x498*x503)));
evalcond[16]=((1.0)+(((-1.0)*x503*x508))+(((-1.0)*new_r02*x498*x503))+(((-1.0)*new_r22*x502)));
evalcond[17]=((((-1.0)*new_r20*x503))+(((-1.0)*x500))+((new_r10*x505))+((new_r00*x507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x511=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x511.valid){
continue;
}
CheckValue<IkReal> x512 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x512.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x511.value)))+(x512.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x513=IKcos(j4);
IkReal x514=IKsin(j4);
IkReal x515=((1.0)*sj5);
IkReal x516=((1.0)*cj5);
IkReal x517=(new_r12*x514);
IkReal x518=(new_r02*x513);
evalcond[0]=((((-1.0)*x513*x515))+new_r02);
evalcond[1]=((((-1.0)*x514*x515))+new_r12);
evalcond[2]=(((new_r12*x513))+(((-1.0)*new_r02*x514)));
evalcond[3]=(x518+x517+(((-1.0)*x515)));
evalcond[4]=(((cj5*x517))+((cj5*x518))+(((-1.0)*new_r22*x515)));
evalcond[5]=((((-1.0)*new_r10*x514*x515))+(((-1.0)*new_r00*x513*x515))+(((-1.0)*new_r20*x516)));
evalcond[6]=((((-1.0)*new_r11*x514*x515))+(((-1.0)*new_r21*x516))+(((-1.0)*new_r01*x513*x515)));
evalcond[7]=((1.0)+(((-1.0)*new_r22*x516))+(((-1.0)*x515*x517))+(((-1.0)*x515*x518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[3];
j6eval[0]=sj5;
j6eval[1]=((IKabs(new_r20))+(IKabs(new_r21)));
j6eval[2]=IKsign(sj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
j6eval[0]=sj4;
j6eval[1]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
j6eval[0]=cj4;
j6eval[1]=cj5;
j6eval[2]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j6eval[0]=new_r12;
j6eval[1]=IKsign(new_r12);
j6eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j6eval[0]=cj5;
j6eval[1]=IKsign(cj5);
j6eval[2]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j6eval[0]=new_r12;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x519=IKcos(j6);
IkReal x520=((1.0)*(IKsin(j6)));
evalcond[0]=(x519+new_r20);
evalcond[1]=((((-1.0)*x520))+new_r21);
evalcond[2]=((((-1.0)*x520))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x519))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x521=IKsin(j6);
IkReal x522=((1.0)*(IKcos(j6)));
evalcond[0]=(x521+new_r21);
evalcond[1]=((((-1.0)*x522))+new_r20);
evalcond[2]=((((-1.0)*x521))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x522))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r12);
evalcond[1]=new_r20;
evalcond[2]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
new_r12=0;
j6eval[0]=cj5;
j6eval[1]=IKsign(cj5);
j6eval[2]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
new_r12=0;
j6eval[0]=cj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r11;
evalcond[2]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x523=IKsin(j6);
IkReal x524=IKcos(j6);
evalcond[0]=x523;
evalcond[1]=((-1.0)*x524);
evalcond[2]=((((-1.0)*x523))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x524))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r11;
evalcond[2]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x525=IKsin(j6);
IkReal x526=IKcos(j6);
evalcond[0]=x525;
evalcond[1]=((-1.0)*x526);
evalcond[2]=((((-1.0)*x525))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x526))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x527=IKsin(j6);
IkReal x528=IKcos(j6);
IkReal x529=((-1.0)*x528);
evalcond[0]=x527;
evalcond[1]=(cj5*x527);
evalcond[2]=x529;
evalcond[3]=(cj5*x529);
evalcond[4]=((((-1.0)*x527))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x528))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x530=IKPowWithIntegerCheck(cj5,-1);
if(!x530.valid){
continue;
}
if( IKabs(((-1.0)*cj5*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r10*(x530.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj5*new_r11))+IKsqr((new_r10*(x530.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*cj5*new_r11), (new_r10*(x530.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x531=IKsin(j6);
IkReal x532=IKcos(j6);
IkReal x533=((1.0)*x532);
evalcond[0]=(((cj5*x531))+new_r11);
evalcond[1]=(((cj5*new_r11))+x531);
evalcond[2]=(new_r10+(((-1.0)*cj5*x533)));
evalcond[3]=((((-1.0)*x531))+(((-1.0)*new_r00)));
evalcond[4]=((((-1.0)*x533))+(((-1.0)*new_r01)));
evalcond[5]=(((cj5*new_r10))+(((-1.0)*x533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x534 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x534.valid){
continue;
}
CheckValue<IkReal> x535=IKPowWithIntegerCheck(IKsign(cj5),-1);
if(!x535.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x534.value)+(((1.5707963267949)*(x535.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x536=IKsin(j6);
IkReal x537=IKcos(j6);
IkReal x538=((1.0)*x537);
evalcond[0]=(((cj5*x536))+new_r11);
evalcond[1]=(((cj5*new_r11))+x536);
evalcond[2]=(new_r10+(((-1.0)*cj5*x538)));
evalcond[3]=((((-1.0)*x536))+(((-1.0)*new_r00)));
evalcond[4]=((((-1.0)*x538))+(((-1.0)*new_r01)));
evalcond[5]=(((cj5*new_r10))+(((-1.0)*x538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x539=IKsin(j6);
IkReal x540=IKcos(j6);
IkReal x541=((-1.0)*x540);
evalcond[0]=x539;
evalcond[1]=(new_r22*x539);
evalcond[2]=x541;
evalcond[3]=(new_r22*x541);
evalcond[4]=((((-1.0)*x539))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x540))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x542=IKPowWithIntegerCheck(new_r12,-1);
if(!x542.valid){
continue;
}
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x542.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r20*(x542.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r20*(x542.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x543=IKsin(j6);
IkReal x544=IKcos(j6);
IkReal x545=((1.0)*sj5);
IkReal x546=((1.0)*x544);
IkReal x547=((1.0)*x543);
evalcond[0]=(((new_r12*x544))+new_r20);
evalcond[1]=(((cj5*x543))+new_r11);
evalcond[2]=((((-1.0)*new_r12*x547))+new_r21);
evalcond[3]=(new_r10+(((-1.0)*cj5*x546)));
evalcond[4]=((((-1.0)*x547))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x546))+(((-1.0)*new_r01)));
evalcond[6]=(((cj5*new_r11))+(((-1.0)*new_r21*x545))+x543);
evalcond[7]=(((cj5*new_r10))+(((-1.0)*new_r20*x545))+(((-1.0)*x546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x548 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x548.valid){
continue;
}
CheckValue<IkReal> x549=IKPowWithIntegerCheck(IKsign(cj5),-1);
if(!x549.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x548.value)+(((1.5707963267949)*(x549.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x550=IKsin(j6);
IkReal x551=IKcos(j6);
IkReal x552=((1.0)*sj5);
IkReal x553=((1.0)*x551);
IkReal x554=((1.0)*x550);
evalcond[0]=(((new_r12*x551))+new_r20);
evalcond[1]=(((cj5*x550))+new_r11);
evalcond[2]=((((-1.0)*new_r12*x554))+new_r21);
evalcond[3]=((((-1.0)*cj5*x553))+new_r10);
evalcond[4]=((((-1.0)*x554))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x553))+(((-1.0)*new_r01)));
evalcond[6]=(((cj5*new_r11))+(((-1.0)*new_r21*x552))+x550);
evalcond[7]=(((cj5*new_r10))+(((-1.0)*x553))+(((-1.0)*new_r20*x552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x555 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x555.valid){
continue;
}
CheckValue<IkReal> x556=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x556.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x555.value)+(((1.5707963267949)*(x556.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x557=IKsin(j6);
IkReal x558=IKcos(j6);
IkReal x559=((1.0)*sj5);
IkReal x560=((1.0)*x558);
IkReal x561=((1.0)*x557);
evalcond[0]=(((new_r12*x558))+new_r20);
evalcond[1]=(((cj5*x557))+new_r11);
evalcond[2]=((((-1.0)*new_r12*x561))+new_r21);
evalcond[3]=((((-1.0)*cj5*x560))+new_r10);
evalcond[4]=((((-1.0)*new_r00))+(((-1.0)*x561)));
evalcond[5]=((((-1.0)*new_r01))+(((-1.0)*x560)));
evalcond[6]=(((cj5*new_r11))+(((-1.0)*new_r21*x559))+x557);
evalcond[7]=(((cj5*new_r10))+(((-1.0)*new_r20*x559))+(((-1.0)*x560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x562=IKsin(j6);
IkReal x563=IKcos(j6);
CheckValue<IkReal> x568=IKPowWithIntegerCheck(new_r12,-1);
if(!x568.valid){
continue;
}
IkReal x564=x568.value;
IkReal x565=new_r22*new_r22;
IkReal x566=((1.0)*x563);
IkReal x567=(x564*x565);
evalcond[0]=(new_r21+((new_r12*x562)));
evalcond[1]=((((-1.0)*x562))+new_r00);
evalcond[2]=(new_r01+(((-1.0)*x566)));
evalcond[3]=((((-1.0)*new_r12*x566))+new_r20);
evalcond[4]=((((-1.0)*new_r11))+((cj5*x562)));
evalcond[5]=((((-1.0)*cj5*x566))+(((-1.0)*new_r10)));
evalcond[6]=(((new_r12*new_r21))+((new_r21*x567))+x562);
evalcond[7]=(((new_r20*x567))+((new_r12*new_r20))+(((-1.0)*x566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x569=IKcos(j6);
IkReal x570=IKsin(j6);
IkReal x571=((1.0)*sj4);
IkReal x572=((1.0)*x570);
IkReal x573=((1.0)*x569);
evalcond[0]=(x569+new_r20);
evalcond[1]=((((-1.0)*x572))+new_r21);
evalcond[2]=(((sj4*x569))+new_r01);
evalcond[3]=(((sj4*x570))+new_r00);
evalcond[4]=((((-1.0)*cj4*x573))+new_r11);
evalcond[5]=((((-1.0)*cj4*x572))+new_r10);
evalcond[6]=(((cj4*new_r10))+(((-1.0)*x572))+(((-1.0)*new_r00*x571)));
evalcond[7]=(((cj4*new_r11))+(((-1.0)*x573))+(((-1.0)*new_r01*x571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x574=IKcos(j6);
IkReal x575=IKsin(j6);
IkReal x576=((1.0)*sj4);
IkReal x577=((1.0)*x574);
IkReal x578=((1.0)*x575);
evalcond[0]=(x575+new_r21);
evalcond[1]=((((-1.0)*x577))+new_r20);
evalcond[2]=(((sj4*x574))+new_r01);
evalcond[3]=(((sj4*x575))+new_r00);
evalcond[4]=((((-1.0)*cj4*x577))+new_r11);
evalcond[5]=((((-1.0)*cj4*x578))+new_r10);
evalcond[6]=(((cj4*new_r10))+(((-1.0)*x578))+(((-1.0)*new_r00*x576)));
evalcond[7]=(((cj4*new_r11))+(((-1.0)*x577))+(((-1.0)*new_r01*x576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x579=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj4*x579))+(((-1.0)*new_r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*new_r00))+(((-1.0)*sj4*x579)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x579))+(((-1.0)*new_r00*sj4))))+IKsqr((((cj4*new_r00))+(((-1.0)*sj4*x579))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj4*x579))+(((-1.0)*new_r00*sj4))), (((cj4*new_r00))+(((-1.0)*sj4*x579))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x580=IKsin(j6);
IkReal x581=IKcos(j6);
IkReal x582=((1.0)*sj4);
IkReal x583=((1.0)*x581);
IkReal x584=(sj4*x580);
IkReal x585=(sj4*x581);
IkReal x586=(cj4*x580);
IkReal x587=(cj4*x583);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x580);
evalcond[1]=(x585+x586+new_r01);
evalcond[2]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x583)));
evalcond[3]=((((-1.0)*x580))+((cj4*new_r10))+(((-1.0)*new_r00*x582)));
evalcond[4]=((((-1.0)*new_r01*x582))+((cj4*new_r11))+(((-1.0)*x583)));
evalcond[5]=(x584+new_r00+(((-1.0)*x587)));
evalcond[6]=(x584+new_r11+(((-1.0)*x587)));
evalcond[7]=((((-1.0)*x586))+new_r10+(((-1.0)*x581*x582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x588=((1.0)*new_r00);
if( IKabs(((((-1.0)*sj4*x588))+((cj4*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x588)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x588))+((cj4*new_r01))))+IKsqr(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x588))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*sj4*x588))+((cj4*new_r01))), ((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x588))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x589=IKcos(j6);
IkReal x590=IKsin(j6);
IkReal x591=((1.0)*sj4);
IkReal x592=((1.0)*x590);
IkReal x593=(sj4*x589);
IkReal x594=((1.0)*x589);
IkReal x595=(cj4*x592);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x589);
evalcond[1]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x592)));
evalcond[2]=(((sj4*x590))+((cj4*x589))+new_r00);
evalcond[3]=((((-1.0)*new_r00*x591))+((cj4*new_r10))+(((-1.0)*x592)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*new_r01*x591))+(((-1.0)*x594)));
evalcond[5]=((((-1.0)*x595))+x593+new_r01);
evalcond[6]=((((-1.0)*x595))+x593+new_r10);
evalcond[7]=((((-1.0)*cj4*x594))+(((-1.0)*x590*x591))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x596=IKcos(j6);
IkReal x597=IKsin(j6);
IkReal x598=((1.0)*sj5);
IkReal x599=((1.0)*x596);
IkReal x600=((1.0)*x597);
evalcond[0]=(((new_r02*x596))+new_r20);
evalcond[1]=((((-1.0)*x600))+new_r10);
evalcond[2]=((((-1.0)*x599))+new_r11);
evalcond[3]=(new_r01+((cj5*x597)));
evalcond[4]=((((-1.0)*new_r02*x600))+new_r21);
evalcond[5]=((((-1.0)*cj5*x599))+new_r00);
evalcond[6]=((((-1.0)*new_r21*x598))+((cj5*new_r01))+x597);
evalcond[7]=((((-1.0)*new_r20*x598))+((cj5*new_r00))+(((-1.0)*x599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j6eval[0]=new_r02;
j6eval[1]=IKsign(new_r02);
j6eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j6eval[0]=new_r02;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j6eval[0]=new_r02;
j6eval[1]=cj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x601=IKcos(j6);
IkReal x602=((1.0)*(IKsin(j6)));
evalcond[0]=(x601+new_r20);
evalcond[1]=((((-1.0)*x602))+new_r21);
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x602)));
evalcond[3]=((((-1.0)*x601))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x603=IKsin(j6);
IkReal x604=((1.0)*(IKcos(j6)));
evalcond[0]=(x603+new_r21);
evalcond[1]=((((-1.0)*x604))+new_r20);
evalcond[2]=((((-1.0)*x603))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x605=IKsin(j6);
IkReal x606=IKcos(j6);
IkReal x607=((-1.0)*x606);
evalcond[0]=x605;
evalcond[1]=(new_r22*x605);
evalcond[2]=x607;
evalcond[3]=(new_r22*x607);
evalcond[4]=((((-1.0)*x605))+(((-1.0)*new_r10)));
evalcond[5]=((((-1.0)*x606))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x608=IKPowWithIntegerCheck(new_r02,-1);
if(!x608.valid){
continue;
}
CheckValue<IkReal> x609=IKPowWithIntegerCheck(cj5,-1);
if(!x609.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*(x608.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00*(x609.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*(x608.value)))+IKsqr(((-1.0)*new_r00*(x609.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21*(x608.value)), ((-1.0)*new_r00*(x609.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x610=IKsin(j6);
IkReal x611=IKcos(j6);
CheckValue<IkReal> x616=IKPowWithIntegerCheck(new_r02,-1);
if(!x616.valid){
continue;
}
IkReal x612=x616.value;
IkReal x613=new_r22*new_r22;
IkReal x614=((1.0)*x611);
IkReal x615=(x612*x613);
evalcond[0]=(((new_r02*x610))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x614))+new_r20);
evalcond[2]=((((-1.0)*x610))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x614))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*new_r01))+((cj5*x610)));
evalcond[5]=((((-1.0)*cj5*x614))+(((-1.0)*new_r00)));
evalcond[6]=(((new_r21*x615))+x610+((new_r02*new_r21)));
evalcond[7]=(((new_r20*x615))+(((-1.0)*x614))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x617=IKPowWithIntegerCheck(new_r02,-1);
if(!x617.valid){
continue;
}
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r20*(x617.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr((new_r20*(x617.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r10), (new_r20*(x617.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x618=IKsin(j6);
IkReal x619=IKcos(j6);
CheckValue<IkReal> x624=IKPowWithIntegerCheck(new_r02,-1);
if(!x624.valid){
continue;
}
IkReal x620=x624.value;
IkReal x621=new_r22*new_r22;
IkReal x622=((1.0)*x619);
IkReal x623=(x620*x621);
evalcond[0]=(((new_r02*x618))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x622))+new_r20);
evalcond[2]=((((-1.0)*x618))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x622))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*new_r01))+((cj5*x618)));
evalcond[5]=((((-1.0)*cj5*x622))+(((-1.0)*new_r00)));
evalcond[6]=(x618+((new_r21*x623))+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*x622))+((new_r20*x623))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x625 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x625.valid){
continue;
}
CheckValue<IkReal> x626=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x626.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x625.value)+(((1.5707963267949)*(x626.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x627=IKsin(j6);
IkReal x628=IKcos(j6);
CheckValue<IkReal> x633=IKPowWithIntegerCheck(new_r02,-1);
if(!x633.valid){
continue;
}
IkReal x629=x633.value;
IkReal x630=new_r22*new_r22;
IkReal x631=((1.0)*x628);
IkReal x632=(x629*x630);
evalcond[0]=(((new_r02*x627))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x631))+new_r20);
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x627)));
evalcond[3]=((((-1.0)*x631))+(((-1.0)*new_r11)));
evalcond[4]=(((cj5*x627))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*cj5*x631))+(((-1.0)*new_r00)));
evalcond[6]=(((new_r21*x632))+x627+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*x631))+((new_r02*new_r20))+((new_r20*x632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j6eval[0]=1.0;
if( IKabs(j6eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j6]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j6array[2], cj6array[2], sj6array[2], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[2]={true,true};
_nj6 = 2;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x635=IKPowWithIntegerCheck(sj5,-1);
if(!x635.valid){
continue;
}
IkReal x634=x635.value;
CheckValue<IkReal> x636=IKPowWithIntegerCheck(cj4,-1);
if(!x636.valid){
continue;
}
CheckValue<IkReal> x637=IKPowWithIntegerCheck(cj5,-1);
if(!x637.valid){
continue;
}
if( IKabs((x634*(x636.value)*(x637.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x634)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x634*(x636.value)*(x637.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))))+IKsqr(((-1.0)*new_r20*x634))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x634*(x636.value)*(x637.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))), ((-1.0)*new_r20*x634));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x638=IKsin(j6);
IkReal x639=IKcos(j6);
IkReal x640=((1.0)*sj5);
IkReal x641=((1.0)*sj4);
IkReal x642=(cj5*sj4);
IkReal x643=(cj4*new_r01);
IkReal x644=(cj4*new_r00);
IkReal x645=((1.0)*x639);
IkReal x646=(cj5*x638);
IkReal x647=((1.0)*x638);
evalcond[0]=(((sj5*x639))+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x638*x640)));
evalcond[2]=(((new_r11*sj4))+x646+x643);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x647))+(((-1.0)*new_r00*x641)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x645))+(((-1.0)*new_r01*x641)));
evalcond[5]=(((sj4*x639))+((cj4*x646))+new_r01);
evalcond[6]=((((-1.0)*cj5*x645))+((new_r10*sj4))+x644);
evalcond[7]=(((sj4*x638))+(((-1.0)*cj4*cj5*x645))+new_r00);
evalcond[8]=(((x638*x642))+new_r11+(((-1.0)*cj4*x645)));
evalcond[9]=((((-1.0)*cj5*x639*x641))+new_r10+(((-1.0)*cj4*x647)));
evalcond[10]=(((cj5*x643))+((new_r11*x642))+(((-1.0)*new_r21*x640))+x638);
evalcond[11]=(((cj5*x644))+(((-1.0)*x645))+((new_r10*x642))+(((-1.0)*new_r20*x640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x649=IKPowWithIntegerCheck(sj5,-1);
if(!x649.valid){
continue;
}
IkReal x648=x649.value;
CheckValue<IkReal> x650=IKPowWithIntegerCheck(sj4,-1);
if(!x650.valid){
continue;
}
if( IKabs((x648*(x650.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x648)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x648*(x650.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))))+IKsqr(((-1.0)*new_r20*x648))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x648*(x650.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))), ((-1.0)*new_r20*x648));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x651=IKsin(j6);
IkReal x652=IKcos(j6);
IkReal x653=((1.0)*sj5);
IkReal x654=((1.0)*sj4);
IkReal x655=(cj5*sj4);
IkReal x656=(cj4*new_r01);
IkReal x657=(cj4*new_r00);
IkReal x658=((1.0)*x652);
IkReal x659=(cj5*x651);
IkReal x660=((1.0)*x651);
evalcond[0]=(((sj5*x652))+new_r20);
evalcond[1]=((((-1.0)*x651*x653))+new_r21);
evalcond[2]=(((new_r11*sj4))+x656+x659);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x654))+(((-1.0)*x660)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x658))+(((-1.0)*new_r01*x654)));
evalcond[5]=(((sj4*x652))+((cj4*x659))+new_r01);
evalcond[6]=(((new_r10*sj4))+x657+(((-1.0)*cj5*x658)));
evalcond[7]=(((sj4*x651))+(((-1.0)*cj4*cj5*x658))+new_r00);
evalcond[8]=(((x651*x655))+new_r11+(((-1.0)*cj4*x658)));
evalcond[9]=((((-1.0)*cj5*x652*x654))+(((-1.0)*cj4*x660))+new_r10);
evalcond[10]=(((cj5*x656))+x651+((new_r11*x655))+(((-1.0)*new_r21*x653)));
evalcond[11]=(((cj5*x657))+(((-1.0)*x658))+(((-1.0)*new_r20*x653))+((new_r10*x655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x661=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x661.valid){
continue;
}
CheckValue<IkReal> x662 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x662.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x661.value)))+(x662.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x663=IKsin(j6);
IkReal x664=IKcos(j6);
IkReal x665=((1.0)*sj5);
IkReal x666=((1.0)*sj4);
IkReal x667=(cj5*sj4);
IkReal x668=(cj4*new_r01);
IkReal x669=(cj4*new_r00);
IkReal x670=((1.0)*x664);
IkReal x671=(cj5*x663);
IkReal x672=((1.0)*x663);
evalcond[0]=(new_r20+((sj5*x664)));
evalcond[1]=((((-1.0)*x663*x665))+new_r21);
evalcond[2]=(((new_r11*sj4))+x668+x671);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x666))+(((-1.0)*x672)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*new_r01*x666))+(((-1.0)*x670)));
evalcond[5]=(((sj4*x664))+((cj4*x671))+new_r01);
evalcond[6]=(((new_r10*sj4))+(((-1.0)*cj5*x670))+x669);
evalcond[7]=((((-1.0)*cj4*cj5*x670))+((sj4*x663))+new_r00);
evalcond[8]=(((x663*x667))+(((-1.0)*cj4*x670))+new_r11);
evalcond[9]=((((-1.0)*cj4*x672))+(((-1.0)*cj5*x664*x666))+new_r10);
evalcond[10]=((((-1.0)*new_r21*x665))+((new_r11*x667))+x663+((cj5*x668)));
evalcond[11]=(((new_r10*x667))+((cj5*x669))+(((-1.0)*x670))+(((-1.0)*new_r20*x665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "50d8eb4fd8480fa3622915fb39b772c1"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
