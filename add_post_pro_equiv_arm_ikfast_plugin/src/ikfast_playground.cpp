/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2023-01-14 08:48:07.184544
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[0]);
x3=IKsin(j[1]);
x4=IKsin(j[4]);
x5=IKcos(j[4]);
x6=IKsin(j[2]);
x7=IKsin(j[3]);
x8=IKcos(j[2]);
x9=IKcos(j[3]);
x10=IKcos(j[6]);
x11=IKsin(j[6]);
x12=IKsin(j[5]);
x13=IKcos(j[5]);
x14=((1.0)*x12);
x15=((1.0)*x13);
x16=(x8*x9);
x17=(x0*x3);
x18=(x12*x5);
x19=(x7*x8);
x20=(x6*x9);
x21=(x6*x7);
x22=(x0*x1);
x23=(x1*x2);
x24=((1.0)*x2*x3);
x25=((1.0)*x16);
x26=((((-1.0)*x24))+x22);
x27=(x17+x23);
x28=((((-1.0)*x25))+x21);
x29=((((-1.0)*x22))+x24);
x30=((((-1.0)*x23))+(((-1.0)*x17)));
x31=(x26*x5);
x32=((((1.0)*x19))+(((1.0)*x20)));
x33=((-1.0)*x32);
x34=(x12*x28);
x35=((1.0)*x29);
x36=((1.0)*x30);
x37=(x33*x5);
x38=(x32*x4);
x39=(x13*x37);
x40=(((x19*x29))+((x20*x29)));
x41=(((x19*x30))+((x20*x30)));
x42=(((x5*((((x21*x30))+((x16*x27))))))+((x26*x4)));
x43=(((x30*x4))+((x5*((((x21*x29))+((x16*x26)))))));
x44=(((x30*x5))+((x4*(((((-1.0)*x21*x29))+(((-1.0)*x16*x26)))))));
eerot[0]=(((x11*x44))+((x10*((((x12*x40))+((x13*x43)))))));
eerot[1]=(((x10*x44))+((x11*(((((-1.0)*x15*x43))+(((-1.0)*x14*x40)))))));
IkReal x45=((1.0)*x35);
eerot[2]=(((x13*(((((-1.0)*x20*x45))+(((-1.0)*x19*x45))))))+((x12*x43)));
eetrans[0]=((((-0.075)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.075)*(IKcos(j[0]))*(IKcos(j[1]))))+(((((((-0.09)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.09)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))*(IKsin(j[3]))))+(((((((((((0.0916)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0916)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((((((-0.0916)*(((((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))+(((1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))*(IKsin(j[3]))))+(((-0.0916)*(((((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))*(IKcos(j[3]))))))*(IKsin(j[4]))))))*(IKcos(j[6]))))+(((((((((((0.0916)*(((((((((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))*(IKsin(j[3]))))+(((((((IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.0916)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((0.0916)*(((((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[3]))*(IKsin(j[2]))))+(((0.0916)*(((((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))*(IKsin(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((((((-0.365)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.365)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))))+(((((((-0.09)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.09)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))*(IKcos(j[3]))))+(((((((((((-0.0324522)*(((((((((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))*(IKsin(j[3]))))+(((((((IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.0324522)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((-0.0324522)*(((((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))*(IKsin(j[3]))))+(((-0.0324522)*(((((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[3]))*(IKsin(j[2]))))))*(IKsin(j[5]))))))*(IKcos(j[6]))))+(((((((((((0.0324522)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.0324522)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((((((-0.0324522)*(((((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))*(IKcos(j[3]))))+(((-0.0324522)*(((((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))+(((1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))*(IKsin(j[3]))))))*(IKsin(j[4]))))))*(IKsin(j[6]))))+(((-0.9)*(IKsin(j[0]))))+(((((((((((-0.1616366)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.1616366)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[4]))))+(((((((0.1616366)*(((((1.0)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-1.0)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[2]))*(IKsin(j[3]))))+(((0.1616366)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((-0.405)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.405)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))*(IKsin(j[3]))))+(((((((-0.405)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.405)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[3]))*(IKsin(j[2]))))+(((((((((((-0.1616366)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.1616366)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[3]))*(IKsin(j[2]))))+(((((((-0.1616366)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.1616366)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[2]))*(IKsin(j[3]))))))*(IKcos(j[5])))));
eerot[3]=(((x11*((((x4*(((((-1.0)*x25*x27))+(((-1.0)*x21*x36))))))+x31))))+((x10*((((x12*x41))+((x13*x42)))))));
eerot[4]=(((x11*(((((-1.0)*x15*x42))+(((-1.0)*x14*x41))))))+((x10*((x31+((x4*(((((-1.0)*x16*x27))+(((-1.0)*x21*x30)))))))))));
IkReal x46=((1.0)*x36);
eerot[5]=(((x13*(((((-1.0)*x20*x46))+(((-1.0)*x19*x46))))))+((x12*x42)));
eetrans[1]=((((((((0.405)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.405)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))*(IKsin(j[3]))))+(((((((((((-0.1616366)*(IKsin(j[0]))*(IKsin(j[1]))))+(((0.1616366)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKsin(j[4]))))+(((((((0.1616366)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))*(IKsin(j[3]))))+(((0.1616366)*(((((IKcos(j[0]))*(IKsin(j[1]))))+(((IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))*(IKcos(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((0.365)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.365)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))))+(((((((((((0.0916)*(((((((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))*(IKsin(j[3]))))+(((((((IKcos(j[0]))*(IKsin(j[1]))))+(((IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((0.0916)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((0.0916)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))*(IKsin(j[2]))))+(((0.0916)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))*(IKsin(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[6]))))+(((0.9)*(IKcos(j[0]))))+(((((((((((-0.0324522)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))*(IKcos(j[3]))))+(((-0.0324522)*(((((1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))*(IKsin(j[3]))))))*(IKsin(j[4]))))+(((((((0.0324522)*(IKsin(j[0]))*(IKsin(j[1]))))+(((-0.0324522)*(IKcos(j[0]))*(IKcos(j[1]))))))*(IKcos(j[4]))))))*(IKsin(j[6]))))+(((((((((((0.1616366)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.1616366)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))*(IKsin(j[3]))))+(((((((0.1616366)*(IKcos(j[1]))*(IKsin(j[0]))))+(((0.1616366)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))*(IKsin(j[2]))))))*(IKcos(j[5]))))+(((((((0.405)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.405)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[3]))*(IKsin(j[2]))))+(((0.075)*(IKcos(j[1]))*(IKsin(j[0]))))+(((((((((((-0.0916)*(((((1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))*(IKsin(j[3]))))+(((-0.0916)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))*(IKcos(j[3]))))))*(IKsin(j[4]))))+(((((((-0.0916)*(IKcos(j[0]))*(IKcos(j[1]))))+(((0.0916)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKcos(j[4]))))))*(IKcos(j[6]))))+(((((((0.09)*(IKcos(j[0]))*(IKsin(j[1]))))+(((0.09)*(IKcos(j[1]))*(IKsin(j[0]))))))*(IKsin(j[2]))*(IKsin(j[3]))))+(((((((-0.09)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-0.09)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))*(IKcos(j[3]))))+(((0.075)*(IKcos(j[0]))*(IKsin(j[1]))))+(((((((((((-0.0324522)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[2]))*(IKsin(j[3]))))+(((-0.0324522)*(((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKcos(j[3]))*(IKsin(j[2]))))))*(IKsin(j[5]))))+(((((((-0.0324522)*(((((((((-1.0)*(IKcos(j[1]))*(IKsin(j[0]))))+(((-1.0)*(IKcos(j[0]))*(IKsin(j[1]))))))*(IKsin(j[2]))*(IKsin(j[3]))))+(((((((IKcos(j[0]))*(IKsin(j[1]))))+(((IKcos(j[1]))*(IKsin(j[0]))))))*(IKcos(j[2]))*(IKcos(j[3]))))))*(IKcos(j[4]))))+(((-0.0324522)*(((((IKcos(j[0]))*(IKcos(j[1]))))+(((-1.0)*(IKsin(j[0]))*(IKsin(j[1]))))))*(IKsin(j[4]))))))*(IKcos(j[5]))))))*(IKcos(j[6])))));
eerot[6]=(((x11*x38))+((x10*((x39+x34)))));
eerot[7]=(((x10*x38))+((x11*(((((-1.0)*x14*x28))+(((-1.0)*x15*x37)))))));
eerot[8]=(((x13*(((((-1.0)*x21))+x25))))+((x18*x33)));
eetrans[2]=((0.335)+((x10*(((((-0.0324522)*x34))+(((-0.0324522)*x39))))))+((x13*(((((-0.1616366)*x21))+(((0.1616366)*x16))))))+((x11*x4*(((((-0.0324522)*x19))+(((-0.0324522)*x20))))))+((x10*x4*(((((-0.0916)*x19))+(((-0.0916)*x20))))))+(((-0.405)*x21))+(((0.365)*x8))+((x18*(((((-0.1616366)*x19))+(((-0.1616366)*x20))))))+(((0.405)*x16))+((x11*(((((0.0916)*x39))+(((0.0916)*x34))))))+(((0.09)*x20))+(((0.09)*x19)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {2}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,j6mul,j2,cj2,sj2,htj2,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij2[2], _nj2;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {

j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij2[0] = -1; _ij2[1] = -1; _nj2 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j2=pfree[0]; cj2=cos(pfree[0]); sj2=sin(pfree[0]), htj2=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=(px+(((-0.1616366)*r02))+(((0.0324522)*r00))+(((0.0916)*r01)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((0.0916)*r11))+py+(((0.0324522)*r10))+(((-0.1616366)*r12)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((((0.0324522)*r20))+(((0.0916)*r21))+pz+(((-0.1616366)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x47=((1.0)*px);
IkReal x48=((1.0)*pz);
IkReal x49=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x49))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x48)));
rxp0_2=((((-1.0)*r10*x47))+((py*r00)));
rxp1_0=((((-1.0)*r21*x49))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x48)));
rxp1_2=((((-1.0)*r11*x47))+((py*r01)));
rxp2_0=((((-1.0)*r22*x49))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x48))+((px*r22)));
rxp2_2=((((-1.0)*r12*x47))+((py*r02)));
{
IkReal j3eval[1];
j3eval[0]=((sj2*sj2)+(cj2*cj2));
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j3]

} else
{
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
IkReal x50=((((0.09)*cj2))+(((-0.405)*sj2)));
IkReal x51=((((0.09)*sj2))+(((0.405)*cj2)));
CheckValue<IkReal> x54 = IKatan2WithCheck(IkReal(x51),IkReal(x50),IKFAST_ATAN2_MAGTHRESH);
if(!x54.valid){
continue;
}
IkReal x52=((1.0)*(x54.value));
if((((x50*x50)+(x51*x51))) < -0.00001)
continue;
CheckValue<IkReal> x55=IKPowWithIntegerCheck(IKabs(IKsqrt(((x50*x50)+(x51*x51)))),-1);
if(!x55.valid){
continue;
}
if( (((x55.value)*(((0.335)+(((0.365)*cj2))+(((-1.0)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x55.value)*(((0.335)+(((0.365)*cj2))+(((-1.0)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x53=IKasin(((x55.value)*(((0.335)+(((0.365)*cj2))+(((-1.0)*pz))))));
j3array[0]=((((-1.0)*x52))+(((-1.0)*x53)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((3.14159265358979)+x53+(((-1.0)*x52)));
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal j0eval[2];
j0eval[0]=(pp+(((-1.0)*(pz*pz))));
j0eval[1]=((px*px)+(py*py));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[5];
IkReal x56=sj2*sj2;
j0eval[0]=3.24;
j0eval[1]=py;
j0eval[2]=sj2;
j0eval[3]=(pp+(((-1.0)*(pz*pz))));
j0eval[4]=(((x56*(px*px)*(py*py)))+((x56*(py*py*py*py))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  || IKabs(j0eval[4]) < 0.0000010000000000  )
{
{
IkReal j0eval[5];
IkReal x57=sj2*sj2;
j0eval[0]=3.24;
j0eval[1]=px;
j0eval[2]=sj2;
j0eval[3]=(pp+(((-1.0)*(pz*pz))));
j0eval[4]=(((x57*(px*px*px*px)))+((x57*(px*px)*(py*py))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  || IKabs(j0eval[4]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=((px*px)+(py*py));
j0eval[1]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[4];
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=3.24;
j0eval[1]=px;
j0eval[2]=(pp+(((-1.0)*(pz*pz))));
j0eval[3]=((((px*px)*(py*py)))+(px*px*px*px));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  )
{
{
IkReal j0eval[4];
sj2=0;
cj2=1.0;
j2=0;
j0eval[0]=((py*py*py*py)+(((px*px)*(py*py))));
j0eval[1]=3.24;
j0eval[2]=py;
j0eval[3]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x58=py*py;
CheckValue<IkReal> x61 = IKatan2WithCheck(IkReal(((1.8)*x58)),IkReal(((-1.8)*px*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x61.valid){
continue;
}
IkReal x59=((1.0)*(x61.value));
if((((((3.24)*x58*(px*px)))+(((3.24)*(x58*x58))))) < -0.00001)
continue;
CheckValue<IkReal> x62=IKPowWithIntegerCheck(IKabs(IKsqrt(((((3.24)*x58*(px*px)))+(((3.24)*(x58*x58)))))),-1);
if(!x62.valid){
continue;
}
if( (((x62.value)*(((((-1.0)*pp*py))+(((-1.09891666666667)*py))+(((0.06375)*py*sj3))+(((1.36666666666667)*py*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x62.value)*(((((-1.0)*pp*py))+(((-1.09891666666667)*py))+(((0.06375)*py*sj3))+(((1.36666666666667)*py*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x60=IKasin(((x62.value)*(((((-1.0)*pp*py))+(((-1.09891666666667)*py))+(((0.06375)*py*sj3))+(((1.36666666666667)*py*pz))))));
j0array[0]=((((-1.0)*x59))+(((-1.0)*x60)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+x60+(((-1.0)*x59)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x63=IKsin(j0);
IkReal x64=IKcos(j0);
IkReal x65=((0.06375)*sj3);
IkReal x66=((1.36666666666667)*pz);
IkReal x67=((1.8)*x63);
IkReal x68=((1.8)*py*x64);
evalcond[0]=((-1.09891666666667)+(((-1.0)*px*x67))+(((-1.0)*pp))+x65+x66+x68);
evalcond[1]=((((-1.0)*px*x68))+(((-1.0)*px*x66))+(((-1.0)*px*x65))+((x67*(px*px)))+(((1.09891666666667)*px))+((pp*px)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=((1.0375)+(((1.9125)*sj3))+(((-1.0)*pz)));
j1eval[1]=((IKabs((((cj0*px))+((py*sj0)))))+(IKabs(((-0.9)+(((-1.0)*px*sj0))+((cj0*py))))));
j1eval[2]=IKsign(((0.230555555555556)+(((-0.222222222222222)*pz))+(((0.425)*sj3))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x69=(py*sj0);
IkReal x70=((1.9125)*sj3);
IkReal x71=((1.0)*pz);
IkReal x72=(cj0*px);
j1eval[0]=((((1.0375)*x72))+((x69*x70))+(((1.0375)*x69))+(((-1.0)*x71*x72))+((x70*x72))+(((-1.0)*x69*x71)));
j1eval[1]=((1.0375)+(((-1.0)*x71))+x70);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x73=((1.9125)*sj3);
IkReal x74=((1.0)*pz);
IkReal x75=(px*sj0);
IkReal x76=((2.125)*sj3);
IkReal x77=((1.11111111111111)*pz);
IkReal x78=(cj0*py);
IkReal x79=((1.0375)+x73);
j1eval[0]=((((-1.0)*x74))+x79);
j1eval[1]=((((1.15277777777778)*x75))+(((-1.0)*x74))+((x75*x76))+x79+(((-1.15277777777778)*x78))+(((-1.0)*x76*x78))+((x77*x78))+(((-1.0)*x75*x77)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal gconst3=((-0.542483660130719)+(((0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.542483660130719)+sj3+(((-0.522875816993464)*pz)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp))))+IKsqr(((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp))), ((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x80=IKsin(j1);
IkReal x81=IKcos(j1);
IkReal x82=((0.15)*py);
IkReal x83=(px*sj0);
IkReal x84=(py*sj0);
IkReal x85=((1.0)*py);
IkReal x86=((1.0)*px);
IkReal x87=(sj0*x81);
IkReal x88=(cj0*x80);
IkReal x89=(cj0*x81);
evalcond[0]=((0.270277777782407)+(((0.777777777777778)*pz))+(((-0.555555555555556)*pp))+(((5.55555555555556e-11)*x80)));
evalcond[1]=((((-1.0)*cj0*x86))+(((5.55555555555556e-11)*x81))+(((-1.0)*x84)));
evalcond[2]=((((0.9)*x81))+((x81*x83))+((px*x88))+((x80*x84))+(((-1.0)*x85*x89)));
evalcond[3]=((5.55555555555556e-11)+(((0.9)*x80))+(((-1.0)*x81*x84))+(((-1.0)*x86*x89))+((x80*x83))+(((-1.0)*x85*x88)));
evalcond[4]=((-1.1335)+(((0.15)*px*x89))+(((-0.135)*x80))+(((1.8)*cj0*py))+((x82*x87))+((x82*x88))+(((-1.8)*x83))+(((-1.0)*pp))+(((-0.15)*x80*x83))+(((1.4)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst3=((-0.542483660130719)+(((0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.542483660130719)+sj3+(((-0.522875816993464)*pz)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp))))+IKsqr(((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp))), ((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x665=IKsin(j1);
IkReal x666=IKcos(j1);
IkReal x667=((0.15)*py);
IkReal x668=(px*sj0);
IkReal x669=(py*sj0);
IkReal x670=((1.0)*py);
IkReal x671=((1.0)*px);
IkReal x672=(sj0*x666);
IkReal x673=(cj0*x665);
IkReal x674=(cj0*x666);
evalcond[0]=((0.270277777782407)+(((0.777777777777778)*pz))+(((-0.555555555555556)*pp))+(((5.55555555555556e-11)*x665)));
evalcond[1]=((((-1.0)*cj0*x671))+(((5.55555555555556e-11)*x666))+(((-1.0)*x669)));
evalcond[2]=(((x666*x668))+((x665*x669))+(((0.9)*x666))+(((-1.0)*x670*x674))+((px*x673)));
evalcond[3]=((5.55555555555556e-11)+((x665*x668))+(((0.9)*x665))+(((-1.0)*x666*x669))+(((-1.0)*x670*x673))+(((-1.0)*x671*x674)));
evalcond[4]=((-1.1335)+(((1.8)*cj0*py))+(((-0.15)*x665*x668))+(((-1.0)*pp))+((x667*x673))+((x667*x672))+(((-1.8)*x668))+(((0.15)*px*x674))+(((1.4)*pz))+(((-0.135)*x665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x675=(cj0*sj0);
IkReal x676=((0.425)*sj3);
IkReal x677=(px*sj0);
IkReal x678=(px*py);
IkReal x679=(cj0*py);
IkReal x680=((0.222222222222222)*pz);
CheckValue<IkReal> x681=IKPowWithIntegerCheck(((0.230555555555556)+(((-1.0)*x680))+x676),-1);
if(!x681.valid){
continue;
}
CheckValue<IkReal> x682=IKPowWithIntegerCheck(((0.2075)+(((-0.2)*pz))+((x676*x677))+((x679*x680))+(((0.230555555555556)*x677))+(((-0.230555555555556)*x679))+(((-1.0)*x676*x679))+(((-1.0)*x677*x680))+(((0.3825)*sj3))),-1);
if(!x682.valid){
continue;
}
if( IKabs(((x681.value)*(((-0.9)+x679+(((-1.0)*x677)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x682.value)*((((x675*(px*px)))+(((-1.0)*x675*(py*py)))+(((0.9)*py*sj0))+x678+(((-2.0)*x678*(cj0*cj0)))+(((0.9)*cj0*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x681.value)*(((-0.9)+x679+(((-1.0)*x677))))))+IKsqr(((x682.value)*((((x675*(px*px)))+(((-1.0)*x675*(py*py)))+(((0.9)*py*sj0))+x678+(((-2.0)*x678*(cj0*cj0)))+(((0.9)*cj0*px))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x681.value)*(((-0.9)+x679+(((-1.0)*x677))))), ((x682.value)*((((x675*(px*px)))+(((-1.0)*x675*(py*py)))+(((0.9)*py*sj0))+x678+(((-2.0)*x678*(cj0*cj0)))+(((0.9)*cj0*px))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x683=IKcos(j1);
IkReal x684=IKsin(j1);
IkReal x685=((0.15)*py);
IkReal x686=(px*sj0);
IkReal x687=((0.425)*sj3);
IkReal x688=((0.222222222222222)*pz);
IkReal x689=(py*sj0);
IkReal x690=((1.0)*py);
IkReal x691=(sj0*x683);
IkReal x692=(cj0*x684);
IkReal x693=(cj0*px*x683);
evalcond[0]=((((0.230555555555556)*x683))+((x683*x687))+(((-1.0)*x683*x688))+(((-1.0)*x689))+(((-1.0)*cj0*px)));
evalcond[1]=((0.9)+(((0.230555555555556)*x684))+(((-1.0)*x684*x688))+x686+(((-1.0)*cj0*x690))+((x684*x687)));
evalcond[2]=((((0.9)*x683))+((x683*x686))+((px*x692))+((x684*x689))+(((-1.0)*cj0*x683*x690)));
evalcond[3]=((0.230555555555556)+(((-1.0)*x683*x689))+(((0.9)*x684))+(((-1.0)*x688))+x687+(((-1.0)*x690*x692))+((x684*x686))+(((-1.0)*x693)));
evalcond[4]=((-1.1335)+(((1.8)*cj0*py))+(((-1.8)*x686))+(((-0.135)*x684))+(((-0.15)*x684*x686))+(((-1.0)*pp))+(((0.15)*x693))+(((1.4)*pz))+((x685*x692))+((x685*x691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x694=(py*sj0);
IkReal x695=((0.425)*sj3);
IkReal x696=(cj0*px);
IkReal x697=((0.222222222222222)*pz);
IkReal x698=(cj0*sj0);
IkReal x699=(px*py);
CheckValue<IkReal> x700=IKPowWithIntegerCheck((((x695*x696))+(((-1.0)*x696*x697))+((x694*x695))+(((-1.0)*x694*x697))+(((0.230555555555556)*x694))+(((0.230555555555556)*x696))),-1);
if(!x700.valid){
continue;
}
CheckValue<IkReal> x701=IKPowWithIntegerCheck(((0.230555555555556)+x695+(((-1.0)*x697))),-1);
if(!x701.valid){
continue;
}
if( IKabs(((x700.value)*((((cj0*py*x694))+(((-0.9)*x696))+(((-0.9)*x694))+(((-1.0)*px*sj0*x696))+(((2.0)*cj0*py*x696))+(((-1.0)*x699)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x701.value)*((x694+x696)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x700.value)*((((cj0*py*x694))+(((-0.9)*x696))+(((-0.9)*x694))+(((-1.0)*px*sj0*x696))+(((2.0)*cj0*py*x696))+(((-1.0)*x699))))))+IKsqr(((x701.value)*((x694+x696))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x700.value)*((((cj0*py*x694))+(((-0.9)*x696))+(((-0.9)*x694))+(((-1.0)*px*sj0*x696))+(((2.0)*cj0*py*x696))+(((-1.0)*x699))))), ((x701.value)*((x694+x696))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x702=IKcos(j1);
IkReal x703=IKsin(j1);
IkReal x704=((0.15)*py);
IkReal x705=(px*sj0);
IkReal x706=((0.425)*sj3);
IkReal x707=((0.222222222222222)*pz);
IkReal x708=(py*sj0);
IkReal x709=((1.0)*py);
IkReal x710=(sj0*x702);
IkReal x711=(cj0*x703);
IkReal x712=(cj0*px*x702);
evalcond[0]=(((x702*x706))+(((-1.0)*x702*x707))+(((-1.0)*x708))+(((0.230555555555556)*x702))+(((-1.0)*cj0*px)));
evalcond[1]=((0.9)+(((-1.0)*cj0*x709))+((x703*x706))+(((-1.0)*x703*x707))+(((0.230555555555556)*x703))+x705);
evalcond[2]=(((x702*x705))+(((-1.0)*cj0*x702*x709))+((x703*x708))+((px*x711))+(((0.9)*x702)));
evalcond[3]=((0.230555555555556)+(((-1.0)*x702*x708))+((x703*x705))+(((-1.0)*x709*x711))+(((-1.0)*x712))+(((-1.0)*x707))+x706+(((0.9)*x703)));
evalcond[4]=((-1.1335)+(((-0.15)*x703*x705))+(((1.8)*cj0*py))+(((-1.0)*pp))+(((0.15)*x712))+(((-1.8)*x705))+((x704*x711))+((x704*x710))+(((-0.135)*x703))+(((1.4)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x713=IKPowWithIntegerCheck(IKsign(((0.230555555555556)+(((-0.222222222222222)*pz))+(((0.425)*sj3)))),-1);
if(!x713.valid){
continue;
}
CheckValue<IkReal> x714 = IKatan2WithCheck(IkReal(((-0.9)+(((-1.0)*px*sj0))+((cj0*py)))),IkReal((((cj0*px))+((py*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x714.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x713.value)))+(x714.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x715=IKcos(j1);
IkReal x716=IKsin(j1);
IkReal x717=((0.15)*py);
IkReal x718=(px*sj0);
IkReal x719=((0.425)*sj3);
IkReal x720=((0.222222222222222)*pz);
IkReal x721=(py*sj0);
IkReal x722=((1.0)*py);
IkReal x723=(sj0*x715);
IkReal x724=(cj0*x716);
IkReal x725=(cj0*px*x715);
evalcond[0]=(((x715*x719))+(((-1.0)*x721))+(((0.230555555555556)*x715))+(((-1.0)*x715*x720))+(((-1.0)*cj0*px)));
evalcond[1]=((0.9)+(((-1.0)*cj0*x722))+(((-1.0)*x716*x720))+(((0.230555555555556)*x716))+((x716*x719))+x718);
evalcond[2]=(((x715*x718))+(((-1.0)*cj0*x715*x722))+((px*x724))+((x716*x721))+(((0.9)*x715)));
evalcond[3]=((0.230555555555556)+(((-1.0)*x722*x724))+(((-1.0)*x720))+(((-1.0)*x725))+(((-1.0)*x715*x721))+((x716*x718))+x719+(((0.9)*x716)));
evalcond[4]=((-1.1335)+(((1.8)*cj0*py))+((x717*x723))+((x717*x724))+(((-1.0)*pp))+(((-0.15)*x716*x718))+(((-1.8)*x718))+(((-0.135)*x716))+(((0.15)*x725))+(((1.4)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x726=px*px;
CheckValue<IkReal> x729 = IKatan2WithCheck(IkReal(((-1.8)*px*py)),IkReal(((1.8)*x726)),IKFAST_ATAN2_MAGTHRESH);
if(!x729.valid){
continue;
}
IkReal x727=((1.0)*(x729.value));
if((((((3.24)*(x726*x726)))+(((3.24)*x726*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x730=IKPowWithIntegerCheck(IKabs(IKsqrt(((((3.24)*(x726*x726)))+(((3.24)*x726*(py*py)))))),-1);
if(!x730.valid){
continue;
}
if( (((x730.value)*(((((-1.36666666666667)*px*pz))+(((1.09891666666667)*px))+(((-0.06375)*px*sj3))+((pp*px)))))) < -1-IKFAST_SINCOS_THRESH || (((x730.value)*(((((-1.36666666666667)*px*pz))+(((1.09891666666667)*px))+(((-0.06375)*px*sj3))+((pp*px)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x728=IKasin(((x730.value)*(((((-1.36666666666667)*px*pz))+(((1.09891666666667)*px))+(((-0.06375)*px*sj3))+((pp*px))))));
j0array[0]=((((-1.0)*x727))+(((-1.0)*x728)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x727))+x728);
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x731=IKcos(j0);
IkReal x732=IKsin(j0);
IkReal x733=((1.36666666666667)*pz);
IkReal x734=((0.06375)*sj3);
IkReal x735=((1.0)*pp);
IkReal x736=((1.8)*x731);
IkReal x737=((1.8)*px*x732);
evalcond[0]=((-1.09891666666667)+(((-1.0)*x735))+(((-1.0)*x737))+((py*x736))+x734+x733);
evalcond[1]=(((x736*(py*py)))+((py*x733))+((py*x734))+(((-1.09891666666667)*py))+(((-1.0)*py*x737))+(((-1.0)*py*x735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=((1.0375)+(((1.9125)*sj3))+(((-1.0)*pz)));
j1eval[1]=((IKabs((((cj0*px))+((py*sj0)))))+(IKabs(((-0.9)+(((-1.0)*px*sj0))+((cj0*py))))));
j1eval[2]=IKsign(((0.230555555555556)+(((-0.222222222222222)*pz))+(((0.425)*sj3))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x738=(py*sj0);
IkReal x739=((1.9125)*sj3);
IkReal x740=((1.0)*pz);
IkReal x741=(cj0*px);
j1eval[0]=((((1.0375)*x741))+((x739*x741))+(((1.0375)*x738))+(((-1.0)*x738*x740))+(((-1.0)*x740*x741))+((x738*x739)));
j1eval[1]=((1.0375)+x739+(((-1.0)*x740)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x742=((1.9125)*sj3);
IkReal x743=((1.0)*pz);
IkReal x744=(px*sj0);
IkReal x745=((2.125)*sj3);
IkReal x746=((1.11111111111111)*pz);
IkReal x747=(cj0*py);
IkReal x748=((1.0375)+x742);
j1eval[0]=(x748+(((-1.0)*x743)));
j1eval[1]=((((-1.0)*x745*x747))+((x744*x745))+((x746*x747))+(((-1.0)*x744*x746))+x748+(((-1.0)*x743))+(((1.15277777777778)*x744))+(((-1.15277777777778)*x747)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal gconst3=((-0.542483660130719)+(((0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.542483660130719)+sj3+(((-0.522875816993464)*pz)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp))))+IKsqr(((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp))), ((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x749=IKsin(j1);
IkReal x750=IKcos(j1);
IkReal x751=((0.15)*py);
IkReal x752=(px*sj0);
IkReal x753=(py*sj0);
IkReal x754=((1.0)*py);
IkReal x755=((1.0)*px);
IkReal x756=(sj0*x750);
IkReal x757=(cj0*x749);
IkReal x758=(cj0*x750);
evalcond[0]=((0.270277777782407)+(((0.777777777777778)*pz))+(((-0.555555555555556)*pp))+(((5.55555555555556e-11)*x749)));
evalcond[1]=((((5.55555555555556e-11)*x750))+(((-1.0)*cj0*x755))+(((-1.0)*x753)));
evalcond[2]=((((0.9)*x750))+(((-1.0)*x754*x758))+((px*x757))+((x749*x753))+((x750*x752)));
evalcond[3]=((5.55555555555556e-11)+(((-1.0)*x750*x753))+(((0.9)*x749))+(((-1.0)*x754*x757))+(((-1.0)*x755*x758))+((x749*x752)));
evalcond[4]=((-1.1335)+(((-0.15)*x749*x752))+(((1.8)*cj0*py))+(((0.15)*px*x758))+((x751*x757))+((x751*x756))+(((-0.135)*x749))+(((-1.0)*pp))+(((1.4)*pz))+(((-1.8)*x752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst3=((-0.542483660130719)+(((0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.542483660130719)+sj3+(((-0.522875816993464)*pz)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp))))+IKsqr(((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp))), ((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x759=IKsin(j1);
IkReal x760=IKcos(j1);
IkReal x761=((0.15)*py);
IkReal x762=(px*sj0);
IkReal x763=(py*sj0);
IkReal x764=((1.0)*py);
IkReal x765=((1.0)*px);
IkReal x766=(sj0*x760);
IkReal x767=(cj0*x759);
IkReal x768=(cj0*x760);
evalcond[0]=((0.270277777782407)+(((0.777777777777778)*pz))+(((-0.555555555555556)*pp))+(((5.55555555555556e-11)*x759)));
evalcond[1]=((((-1.0)*x763))+(((-1.0)*cj0*x765))+(((5.55555555555556e-11)*x760)));
evalcond[2]=(((px*x767))+((x760*x762))+((x759*x763))+(((-1.0)*x764*x768))+(((0.9)*x760)));
evalcond[3]=((5.55555555555556e-11)+(((-1.0)*x765*x768))+(((0.9)*x759))+((x759*x762))+(((-1.0)*x764*x767))+(((-1.0)*x760*x763)));
evalcond[4]=((-1.1335)+(((1.8)*cj0*py))+((x761*x766))+((x761*x767))+(((-1.0)*pp))+(((-0.135)*x759))+(((1.4)*pz))+(((-1.8)*x762))+(((-0.15)*x759*x762))+(((0.15)*px*x768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x769=(cj0*sj0);
IkReal x770=((0.425)*sj3);
IkReal x771=(px*sj0);
IkReal x772=(px*py);
IkReal x773=(cj0*py);
IkReal x774=((0.222222222222222)*pz);
CheckValue<IkReal> x775=IKPowWithIntegerCheck(((0.230555555555556)+x770+(((-1.0)*x774))),-1);
if(!x775.valid){
continue;
}
CheckValue<IkReal> x776=IKPowWithIntegerCheck(((0.2075)+((x770*x771))+(((-0.230555555555556)*x773))+(((-0.2)*pz))+(((0.230555555555556)*x771))+((x773*x774))+(((-1.0)*x771*x774))+(((0.3825)*sj3))+(((-1.0)*x770*x773))),-1);
if(!x776.valid){
continue;
}
if( IKabs(((x775.value)*(((-0.9)+x773+(((-1.0)*x771)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x776.value)*((((x769*(px*px)))+(((0.9)*py*sj0))+(((-2.0)*x772*(cj0*cj0)))+x772+(((0.9)*cj0*px))+(((-1.0)*x769*(py*py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x775.value)*(((-0.9)+x773+(((-1.0)*x771))))))+IKsqr(((x776.value)*((((x769*(px*px)))+(((0.9)*py*sj0))+(((-2.0)*x772*(cj0*cj0)))+x772+(((0.9)*cj0*px))+(((-1.0)*x769*(py*py)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x775.value)*(((-0.9)+x773+(((-1.0)*x771))))), ((x776.value)*((((x769*(px*px)))+(((0.9)*py*sj0))+(((-2.0)*x772*(cj0*cj0)))+x772+(((0.9)*cj0*px))+(((-1.0)*x769*(py*py)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x777=IKcos(j1);
IkReal x778=IKsin(j1);
IkReal x779=((0.15)*py);
IkReal x780=(px*sj0);
IkReal x781=((0.425)*sj3);
IkReal x782=((0.222222222222222)*pz);
IkReal x783=(py*sj0);
IkReal x784=((1.0)*py);
IkReal x785=(sj0*x777);
IkReal x786=(cj0*x778);
IkReal x787=(cj0*px*x777);
evalcond[0]=((((0.230555555555556)*x777))+(((-1.0)*x777*x782))+(((-1.0)*x783))+((x777*x781))+(((-1.0)*cj0*px)));
evalcond[1]=((0.9)+(((-1.0)*cj0*x784))+(((0.230555555555556)*x778))+((x778*x781))+x780+(((-1.0)*x778*x782)));
evalcond[2]=((((-1.0)*cj0*x777*x784))+((px*x786))+(((0.9)*x777))+((x778*x783))+((x777*x780)));
evalcond[3]=((0.230555555555556)+(((-1.0)*x782))+(((0.9)*x778))+((x778*x780))+(((-1.0)*x777*x783))+(((-1.0)*x784*x786))+x781+(((-1.0)*x787)));
evalcond[4]=((-1.1335)+(((0.15)*x787))+(((1.8)*cj0*py))+(((-0.135)*x778))+(((-0.15)*x778*x780))+((x779*x786))+((x779*x785))+(((-1.0)*pp))+(((-1.8)*x780))+(((1.4)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x788=(py*sj0);
IkReal x789=((0.425)*sj3);
IkReal x790=(cj0*px);
IkReal x791=((0.222222222222222)*pz);
IkReal x792=(cj0*sj0);
IkReal x793=(px*py);
CheckValue<IkReal> x794=IKPowWithIntegerCheck(((((-1.0)*x788*x791))+((x788*x789))+(((-1.0)*x790*x791))+((x789*x790))+(((0.230555555555556)*x788))+(((0.230555555555556)*x790))),-1);
if(!x794.valid){
continue;
}
CheckValue<IkReal> x795=IKPowWithIntegerCheck(((0.230555555555556)+(((-1.0)*x791))+x789),-1);
if(!x795.valid){
continue;
}
if( IKabs(((x794.value)*(((((2.0)*cj0*py*x790))+((cj0*py*x788))+(((-1.0)*x793))+(((-0.9)*x790))+(((-1.0)*px*sj0*x790))+(((-0.9)*x788)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x795.value)*((x790+x788)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x794.value)*(((((2.0)*cj0*py*x790))+((cj0*py*x788))+(((-1.0)*x793))+(((-0.9)*x790))+(((-1.0)*px*sj0*x790))+(((-0.9)*x788))))))+IKsqr(((x795.value)*((x790+x788))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x794.value)*(((((2.0)*cj0*py*x790))+((cj0*py*x788))+(((-1.0)*x793))+(((-0.9)*x790))+(((-1.0)*px*sj0*x790))+(((-0.9)*x788))))), ((x795.value)*((x790+x788))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x796=IKcos(j1);
IkReal x797=IKsin(j1);
IkReal x798=((0.15)*py);
IkReal x799=(px*sj0);
IkReal x800=((0.425)*sj3);
IkReal x801=((0.222222222222222)*pz);
IkReal x802=(py*sj0);
IkReal x803=((1.0)*py);
IkReal x804=(sj0*x796);
IkReal x805=(cj0*x797);
IkReal x806=(cj0*px*x796);
evalcond[0]=((((-1.0)*x802))+(((-1.0)*x796*x801))+(((-1.0)*cj0*px))+((x796*x800))+(((0.230555555555556)*x796)));
evalcond[1]=((0.9)+(((-1.0)*x797*x801))+((x797*x800))+(((-1.0)*cj0*x803))+x799+(((0.230555555555556)*x797)));
evalcond[2]=(((x796*x799))+((x797*x802))+(((-1.0)*cj0*x796*x803))+((px*x805))+(((0.9)*x796)));
evalcond[3]=((0.230555555555556)+(((-1.0)*x806))+(((-1.0)*x796*x802))+(((-1.0)*x803*x805))+(((0.9)*x797))+x800+(((-1.0)*x801))+((x797*x799)));
evalcond[4]=((-1.1335)+(((-0.15)*x797*x799))+(((1.8)*cj0*py))+(((0.15)*x806))+(((-1.0)*pp))+((x798*x805))+((x798*x804))+(((-0.135)*x797))+(((1.4)*pz))+(((-1.8)*x799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x807=IKPowWithIntegerCheck(IKsign(((0.230555555555556)+(((-0.222222222222222)*pz))+(((0.425)*sj3)))),-1);
if(!x807.valid){
continue;
}
CheckValue<IkReal> x808 = IKatan2WithCheck(IkReal(((-0.9)+(((-1.0)*px*sj0))+((cj0*py)))),IkReal((((cj0*px))+((py*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x808.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x807.value)))+(x808.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x809=IKcos(j1);
IkReal x810=IKsin(j1);
IkReal x811=((0.15)*py);
IkReal x812=(px*sj0);
IkReal x813=((0.425)*sj3);
IkReal x814=((0.222222222222222)*pz);
IkReal x815=(py*sj0);
IkReal x816=((1.0)*py);
IkReal x817=(sj0*x809);
IkReal x818=(cj0*x810);
IkReal x819=(cj0*px*x809);
evalcond[0]=(((x809*x813))+(((-1.0)*x809*x814))+(((-1.0)*x815))+(((0.230555555555556)*x809))+(((-1.0)*cj0*px)));
evalcond[1]=((0.9)+(((-1.0)*cj0*x816))+((x810*x813))+(((-1.0)*x810*x814))+x812+(((0.230555555555556)*x810)));
evalcond[2]=(((x809*x812))+(((-1.0)*cj0*x809*x816))+((px*x818))+((x810*x815))+(((0.9)*x809)));
evalcond[3]=((0.230555555555556)+(((0.9)*x810))+(((-1.0)*x816*x818))+((x810*x812))+(((-1.0)*x814))+(((-1.0)*x819))+(((-1.0)*x809*x815))+x813);
evalcond[4]=((-1.1335)+(((1.8)*cj0*py))+(((-1.0)*pp))+((x811*x818))+((x811*x817))+(((-0.135)*x810))+(((-1.8)*x812))+(((1.4)*pz))+(((-0.15)*x810*x812))+(((0.15)*x819)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x822 = IKatan2WithCheck(IkReal(((1.8)*py)),IkReal(((-1.8)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x822.valid){
continue;
}
IkReal x820=((1.0)*(x822.value));
if((((((3.24)*(px*px)))+(((3.24)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x823=IKPowWithIntegerCheck(IKabs(IKsqrt(((((3.24)*(px*px)))+(((3.24)*(py*py)))))),-1);
if(!x823.valid){
continue;
}
if( (((x823.value)*(((-1.09891666666667)+(((0.06375)*sj3))+(((-1.0)*pp))+(((1.36666666666667)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((x823.value)*(((-1.09891666666667)+(((0.06375)*sj3))+(((-1.0)*pp))+(((1.36666666666667)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x821=IKasin(((x823.value)*(((-1.09891666666667)+(((0.06375)*sj3))+(((-1.0)*pp))+(((1.36666666666667)*pz))))));
j0array[0]=((((-1.0)*x820))+(((-1.0)*x821)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x820))+x821);
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j1eval[3];
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=((1.0375)+(((1.9125)*sj3))+(((-1.0)*pz)));
j1eval[1]=((IKabs((((cj0*px))+((py*sj0)))))+(IKabs(((-0.9)+(((-1.0)*px*sj0))+((cj0*py))))));
j1eval[2]=IKsign(((0.230555555555556)+(((-0.222222222222222)*pz))+(((0.425)*sj3))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x824=(py*sj0);
IkReal x825=((1.9125)*sj3);
IkReal x826=((1.0)*pz);
IkReal x827=(cj0*px);
j1eval[0]=(((x824*x825))+(((1.0375)*x824))+(((1.0375)*x827))+((x825*x827))+(((-1.0)*x824*x826))+(((-1.0)*x826*x827)));
j1eval[1]=((1.0375)+(((-1.0)*x826))+x825);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x828=((1.9125)*sj3);
IkReal x829=((1.0)*pz);
IkReal x830=(px*sj0);
IkReal x831=((2.125)*sj3);
IkReal x832=((1.11111111111111)*pz);
IkReal x833=(cj0*py);
IkReal x834=((1.0375)+x828);
j1eval[0]=((((-1.0)*x829))+x834);
j1eval[1]=(((x832*x833))+(((-1.0)*x829))+(((-1.15277777777778)*x833))+(((-1.0)*x830*x832))+((x830*x831))+x834+(((1.15277777777778)*x830))+(((-1.0)*x831*x833)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal gconst3=((-0.542483660130719)+(((0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.542483660130719)+sj3+(((-0.522875816993464)*pz)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp))))+IKsqr(((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp))), ((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x835=IKsin(j1);
IkReal x836=IKcos(j1);
IkReal x837=((0.15)*py);
IkReal x838=(px*sj0);
IkReal x839=(py*sj0);
IkReal x840=((1.0)*py);
IkReal x841=((1.0)*px);
IkReal x842=(sj0*x836);
IkReal x843=(cj0*x835);
IkReal x844=(cj0*x836);
evalcond[0]=((0.270277777782407)+(((0.777777777777778)*pz))+(((5.55555555555556e-11)*x835))+(((-0.555555555555556)*pp)));
evalcond[1]=((((5.55555555555556e-11)*x836))+(((-1.0)*cj0*x841))+(((-1.0)*x839)));
evalcond[2]=((((0.9)*x836))+(((-1.0)*x840*x844))+((x835*x839))+((x836*x838))+((px*x843)));
evalcond[3]=((5.55555555555556e-11)+(((-1.0)*x841*x844))+(((0.9)*x835))+(((-1.0)*x840*x843))+((x835*x838))+(((-1.0)*x836*x839)));
evalcond[4]=((-1.1335)+(((-0.15)*x835*x838))+(((-1.8)*x838))+(((1.8)*cj0*py))+((x837*x842))+((x837*x843))+(((-0.135)*x835))+(((-1.0)*pp))+(((1.4)*pz))+(((0.15)*px*x844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst3=((-0.542483660130719)+(((0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.542483660130719)+sj3+(((-0.522875816993464)*pz)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp))))+IKsqr(((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp))), ((((18000000000.0)*cj0*px))+(((18000000000.0)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x845=IKsin(j1);
IkReal x846=IKcos(j1);
IkReal x847=((0.15)*py);
IkReal x848=(px*sj0);
IkReal x849=(py*sj0);
IkReal x850=((1.0)*py);
IkReal x851=((1.0)*px);
IkReal x852=(sj0*x846);
IkReal x853=(cj0*x845);
IkReal x854=(cj0*x846);
evalcond[0]=((0.270277777782407)+(((0.777777777777778)*pz))+(((-0.555555555555556)*pp))+(((5.55555555555556e-11)*x845)));
evalcond[1]=((((5.55555555555556e-11)*x846))+(((-1.0)*x849))+(((-1.0)*cj0*x851)));
evalcond[2]=(((x846*x848))+(((-1.0)*x850*x854))+(((0.9)*x846))+((px*x853))+((x845*x849)));
evalcond[3]=((5.55555555555556e-11)+(((-1.0)*x850*x853))+(((-1.0)*x846*x849))+(((0.9)*x845))+((x845*x848))+(((-1.0)*x851*x854)));
evalcond[4]=((-1.1335)+(((1.8)*cj0*py))+(((-0.135)*x845))+((x847*x852))+((x847*x853))+(((-1.0)*pp))+(((-0.15)*x845*x848))+(((0.15)*px*x854))+(((1.4)*pz))+(((-1.8)*x848)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x855=(cj0*sj0);
IkReal x856=((0.425)*sj3);
IkReal x857=(px*sj0);
IkReal x858=(px*py);
IkReal x859=(cj0*py);
IkReal x860=((0.222222222222222)*pz);
CheckValue<IkReal> x861=IKPowWithIntegerCheck(((0.230555555555556)+(((-1.0)*x860))+x856),-1);
if(!x861.valid){
continue;
}
CheckValue<IkReal> x862=IKPowWithIntegerCheck(((0.2075)+(((0.230555555555556)*x857))+(((-0.2)*pz))+((x856*x857))+((x859*x860))+(((-1.0)*x856*x859))+(((-0.230555555555556)*x859))+(((0.3825)*sj3))+(((-1.0)*x857*x860))),-1);
if(!x862.valid){
continue;
}
if( IKabs(((x861.value)*(((-0.9)+(((-1.0)*x857))+x859)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x862.value)*(((((-2.0)*x858*(cj0*cj0)))+(((0.9)*py*sj0))+((x855*(px*px)))+x858+(((0.9)*cj0*px))+(((-1.0)*x855*(py*py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x861.value)*(((-0.9)+(((-1.0)*x857))+x859))))+IKsqr(((x862.value)*(((((-2.0)*x858*(cj0*cj0)))+(((0.9)*py*sj0))+((x855*(px*px)))+x858+(((0.9)*cj0*px))+(((-1.0)*x855*(py*py)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x861.value)*(((-0.9)+(((-1.0)*x857))+x859))), ((x862.value)*(((((-2.0)*x858*(cj0*cj0)))+(((0.9)*py*sj0))+((x855*(px*px)))+x858+(((0.9)*cj0*px))+(((-1.0)*x855*(py*py)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x863=IKcos(j1);
IkReal x864=IKsin(j1);
IkReal x865=((0.15)*py);
IkReal x866=(px*sj0);
IkReal x867=((0.425)*sj3);
IkReal x868=((0.222222222222222)*pz);
IkReal x869=(py*sj0);
IkReal x870=((1.0)*py);
IkReal x871=(sj0*x863);
IkReal x872=(cj0*x864);
IkReal x873=(cj0*px*x863);
evalcond[0]=((((0.230555555555556)*x863))+((x863*x867))+(((-1.0)*x869))+(((-1.0)*cj0*px))+(((-1.0)*x863*x868)));
evalcond[1]=((0.9)+(((-1.0)*cj0*x870))+(((0.230555555555556)*x864))+(((-1.0)*x864*x868))+x866+((x864*x867)));
evalcond[2]=(((x863*x866))+((px*x872))+(((-1.0)*cj0*x863*x870))+((x864*x869))+(((0.9)*x863)));
evalcond[3]=((0.230555555555556)+(((-1.0)*x868))+(((-1.0)*x873))+(((-1.0)*x870*x872))+x867+(((-1.0)*x863*x869))+((x864*x866))+(((0.9)*x864)));
evalcond[4]=((-1.1335)+(((1.8)*cj0*py))+(((-1.8)*x866))+(((-1.0)*pp))+(((-0.15)*x864*x866))+(((0.15)*x873))+(((1.4)*pz))+((x865*x872))+((x865*x871))+(((-0.135)*x864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x874=(py*sj0);
IkReal x875=((0.425)*sj3);
IkReal x876=(cj0*px);
IkReal x877=((0.222222222222222)*pz);
IkReal x878=(cj0*sj0);
IkReal x879=(px*py);
CheckValue<IkReal> x880=IKPowWithIntegerCheck(((((0.230555555555556)*x874))+(((0.230555555555556)*x876))+(((-1.0)*x876*x877))+((x874*x875))+((x875*x876))+(((-1.0)*x874*x877))),-1);
if(!x880.valid){
continue;
}
CheckValue<IkReal> x881=IKPowWithIntegerCheck(((0.230555555555556)+x875+(((-1.0)*x877))),-1);
if(!x881.valid){
continue;
}
if( IKabs(((x880.value)*((((cj0*py*x874))+(((-1.0)*px*sj0*x876))+(((2.0)*cj0*py*x876))+(((-1.0)*x879))+(((-0.9)*x876))+(((-0.9)*x874)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x881.value)*((x874+x876)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x880.value)*((((cj0*py*x874))+(((-1.0)*px*sj0*x876))+(((2.0)*cj0*py*x876))+(((-1.0)*x879))+(((-0.9)*x876))+(((-0.9)*x874))))))+IKsqr(((x881.value)*((x874+x876))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x880.value)*((((cj0*py*x874))+(((-1.0)*px*sj0*x876))+(((2.0)*cj0*py*x876))+(((-1.0)*x879))+(((-0.9)*x876))+(((-0.9)*x874))))), ((x881.value)*((x874+x876))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x882=IKcos(j1);
IkReal x883=IKsin(j1);
IkReal x884=((0.15)*py);
IkReal x885=(px*sj0);
IkReal x886=((0.425)*sj3);
IkReal x887=((0.222222222222222)*pz);
IkReal x888=(py*sj0);
IkReal x889=((1.0)*py);
IkReal x890=(sj0*x882);
IkReal x891=(cj0*x883);
IkReal x892=(cj0*px*x882);
evalcond[0]=((((0.230555555555556)*x882))+(((-1.0)*x882*x887))+((x882*x886))+(((-1.0)*x888))+(((-1.0)*cj0*px)));
evalcond[1]=((0.9)+(((0.230555555555556)*x883))+(((-1.0)*x883*x887))+(((-1.0)*cj0*x889))+((x883*x886))+x885);
evalcond[2]=((((0.9)*x882))+((px*x891))+((x883*x888))+((x882*x885))+(((-1.0)*cj0*x882*x889)));
evalcond[3]=((0.230555555555556)+(((0.9)*x883))+(((-1.0)*x882*x888))+((x883*x885))+(((-1.0)*x887))+(((-1.0)*x892))+(((-1.0)*x889*x891))+x886);
evalcond[4]=((-1.1335)+((x884*x890))+((x884*x891))+(((1.8)*cj0*py))+(((-0.15)*x883*x885))+(((-1.0)*pp))+(((-0.135)*x883))+(((1.4)*pz))+(((0.15)*x892))+(((-1.8)*x885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x893=IKPowWithIntegerCheck(IKsign(((0.230555555555556)+(((-0.222222222222222)*pz))+(((0.425)*sj3)))),-1);
if(!x893.valid){
continue;
}
CheckValue<IkReal> x894 = IKatan2WithCheck(IkReal(((-0.9)+(((-1.0)*px*sj0))+((cj0*py)))),IkReal((((cj0*px))+((py*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x894.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x893.value)))+(x894.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x895=IKcos(j1);
IkReal x896=IKsin(j1);
IkReal x897=((0.15)*py);
IkReal x898=(px*sj0);
IkReal x899=((0.425)*sj3);
IkReal x900=((0.222222222222222)*pz);
IkReal x901=(py*sj0);
IkReal x902=((1.0)*py);
IkReal x903=(sj0*x895);
IkReal x904=(cj0*x896);
IkReal x905=(cj0*px*x895);
evalcond[0]=((((-1.0)*x895*x900))+((x895*x899))+(((-1.0)*x901))+(((-1.0)*cj0*px))+(((0.230555555555556)*x895)));
evalcond[1]=((0.9)+(((-1.0)*x896*x900))+((x896*x899))+(((-1.0)*cj0*x902))+x898+(((0.230555555555556)*x896)));
evalcond[2]=((((-1.0)*cj0*x895*x902))+(((0.9)*x895))+((x895*x898))+((px*x904))+((x896*x901)));
evalcond[3]=((0.230555555555556)+(((0.9)*x896))+(((-1.0)*x895*x901))+(((-1.0)*x902*x904))+((x896*x898))+(((-1.0)*x900))+(((-1.0)*x905))+x899);
evalcond[4]=((-1.1335)+(((0.15)*x905))+(((1.8)*cj0*py))+((x897*x904))+((x897*x903))+(((-1.0)*pp))+(((-0.15)*x896*x898))+(((-0.135)*x896))+(((-1.8)*x898))+(((1.4)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=((px*px)+(py*py));
j0eval[1]=(pp+(((-1.0)*(pz*pz))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[4];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=3.24;
j0eval[1]=py;
j0eval[2]=(pp+(((-1.0)*(pz*pz))));
j0eval[3]=((py*py*py*py)+(((px*px)*(py*py))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  )
{
{
IkReal j0eval[4];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j0eval[0]=3.24;
j0eval[1]=px;
j0eval[2]=(pp+(((-1.0)*(pz*pz))));
j0eval[3]=((((px*px)*(py*py)))+(px*px*px*px));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  || IKabs(j0eval[3]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x906=px*px;
CheckValue<IkReal> x909 = IKatan2WithCheck(IkReal(((1.8)*px*py)),IkReal(((-1.8)*x906)),IKFAST_ATAN2_MAGTHRESH);
if(!x909.valid){
continue;
}
IkReal x907=((1.0)*(x909.value));
if((((((3.24)*(x906*x906)))+(((3.24)*x906*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x910=IKPowWithIntegerCheck(IKabs(IKsqrt(((((3.24)*(x906*x906)))+(((3.24)*x906*(py*py)))))),-1);
if(!x910.valid){
continue;
}
if( (((-1.0)*(x910.value)*(((((-1.0)*pp*px))+(((-0.0933333333333333)*px*pz))+(((-0.63415)*px))+(((-0.06375)*px*sj3)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x910.value)*(((((-1.0)*pp*px))+(((-0.0933333333333333)*px*pz))+(((-0.63415)*px))+(((-0.06375)*px*sj3)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x908=((-1.0)*(IKasin(((-1.0)*(x910.value)*(((((-1.0)*pp*px))+(((-0.0933333333333333)*px*pz))+(((-0.63415)*px))+(((-0.06375)*px*sj3))))))));
j0array[0]=((((-1.0)*x907))+(((-1.0)*x908)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x907))+(((1.0)*x908)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x911=IKsin(j0);
IkReal x912=IKcos(j0);
IkReal x913=((0.0933333333333333)*pz);
IkReal x914=((0.06375)*sj3);
IkReal x915=((1.8)*x912);
IkReal x916=((1.8)*px*x911);
evalcond[0]=((-0.63415)+(((-1.0)*x916))+(((-1.0)*x913))+(((-1.0)*x914))+(((-1.0)*pp))+((py*x915)));
evalcond[1]=((((-1.0)*x915*(py*py)))+(((0.63415)*py))+((py*x916))+((py*x913))+((py*x914))+((pp*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=((1.0)+(((-3.2520325203252)*pz))+(((-6.21951219512195)*sj3)));
j1eval[1]=IKsign(((0.0683333333333333)+(((-0.222222222222222)*pz))+(((-0.425)*sj3))));
j1eval[2]=((IKabs((((cj0*px))+((py*sj0)))))+(IKabs(((-0.9)+(((-1.0)*px*sj0))+((cj0*py))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x917=(cj0*px);
IkReal x918=((3.2520325203252)*pz);
IkReal x919=(py*sj0);
IkReal x920=((6.21951219512195)*sj3);
j1eval[0]=((((-1.0)*x918*x919))+(((-1.0)*x919*x920))+x919+x917+(((-1.0)*x917*x920))+(((-1.0)*x917*x918)));
j1eval[1]=((1.0)+(((-1.0)*x920))+(((-1.0)*x918)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x921=((6.21951219512195)*sj3);
IkReal x922=((3.2520325203252)*pz);
IkReal x923=((6.91056910569106)*sj3);
IkReal x924=(px*sj0);
IkReal x925=(cj0*py);
IkReal x926=((3.613369467028)*pz);
IkReal x927=(x922+x921);
j1eval[0]=((1.0)+(((-1.0)*x927)));
j1eval[1]=((1.0)+(((-1.0)*x927))+(((-1.0)*x924*x926))+(((-1.11111111111111)*x925))+((x923*x925))+((x925*x926))+(((1.11111111111111)*x924))+(((-1.0)*x923*x924)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal gconst7=((0.16078431372549)+(((-0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.16078431372549)+sj3+(((0.522875816993464)*pz)))))+(IKabs(((-1.0)+(IKsign(cj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp))))+IKsqr(((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp))), ((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x928=IKsin(j1);
IkReal x929=IKcos(j1);
IkReal x930=((0.15)*py);
IkReal x931=(px*sj0);
IkReal x932=(py*sj0);
IkReal x933=((1.0)*cj0);
IkReal x934=(sj0*x929);
IkReal x935=(cj0*x928);
IkReal x936=(cj0*px*x929);
evalcond[0]=((0.542000000004466)+(((-0.555555555555556)*pp))+(((-0.0333333333333333)*pz))+(((5.3594771199795e-11)*x928)));
evalcond[1]=((((-1.0)*px*x933))+(((-1.0)*x932))+(((5.3594771199795e-11)*x929)));
evalcond[2]=(((x928*x932))+((px*x935))+(((-1.0)*py*x929*x933))+(((0.9)*x929))+((x929*x931)));
evalcond[3]=((-5.3594771199795e-11)+(((-0.9)*x928))+((py*x935))+x936+((x929*x932))+(((-1.0)*x928*x931)));
evalcond[4]=((-0.6444)+(((1.8)*cj0*py))+(((-1.8)*x931))+(((-0.15)*x928*x931))+(((-0.135)*x928))+(((-1.0)*pp))+((x930*x934))+((x930*x935))+(((-0.06)*pz))+(((0.15)*x936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst7=((0.16078431372549)+(((-0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.16078431372549)+sj3+(((0.522875816993464)*pz)))))+(IKabs(((1.0)+(IKsign(cj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp))))+IKsqr(((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp))), ((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x937=IKsin(j1);
IkReal x938=IKcos(j1);
IkReal x939=((0.15)*py);
IkReal x940=(px*sj0);
IkReal x941=(py*sj0);
IkReal x942=((1.0)*cj0);
IkReal x943=(sj0*x938);
IkReal x944=(cj0*x937);
IkReal x945=(cj0*px*x938);
evalcond[0]=((0.542000000004466)+(((-0.555555555555556)*pp))+(((-0.0333333333333333)*pz))+(((5.3594771199795e-11)*x937)));
evalcond[1]=((((-1.0)*x941))+(((5.3594771199795e-11)*x938))+(((-1.0)*px*x942)));
evalcond[2]=(((x938*x940))+((x937*x941))+(((-1.0)*py*x938*x942))+((px*x944))+(((0.9)*x938)));
evalcond[3]=((-5.3594771199795e-11)+(((-0.9)*x937))+((x938*x941))+(((-1.0)*x937*x940))+x945+((py*x944)));
evalcond[4]=((-0.6444)+(((-0.15)*x937*x940))+(((1.8)*cj0*py))+(((-1.8)*x940))+((x939*x943))+((x939*x944))+(((-0.135)*x937))+(((-1.0)*pp))+(((-0.06)*pz))+(((0.15)*x945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x946=(cj0*sj0);
IkReal x947=(px*sj0);
IkReal x948=((0.425)*sj3);
IkReal x949=(px*py);
IkReal x950=((0.222222222222222)*pz);
IkReal x951=(cj0*py);
CheckValue<IkReal> x952=IKPowWithIntegerCheck(((0.0683333333333333)+(((-1.0)*x948))+(((-1.0)*x950))),-1);
if(!x952.valid){
continue;
}
CheckValue<IkReal> x953=IKPowWithIntegerCheck(((0.0615)+(((-0.2)*pz))+(((0.0683333333333333)*x947))+(((-1.0)*x947*x948))+((x948*x951))+(((-1.0)*x947*x950))+(((-0.3825)*sj3))+(((-0.0683333333333333)*x951))+((x950*x951))),-1);
if(!x953.valid){
continue;
}
if( IKabs(((x952.value)*(((-0.9)+(((-1.0)*x947))+x951)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x953.value)*((((x946*(px*px)))+(((0.9)*py*sj0))+(((-1.0)*x946*(py*py)))+(((-2.0)*x949*(cj0*cj0)))+x949+(((0.9)*cj0*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x952.value)*(((-0.9)+(((-1.0)*x947))+x951))))+IKsqr(((x953.value)*((((x946*(px*px)))+(((0.9)*py*sj0))+(((-1.0)*x946*(py*py)))+(((-2.0)*x949*(cj0*cj0)))+x949+(((0.9)*cj0*px))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x952.value)*(((-0.9)+(((-1.0)*x947))+x951))), ((x953.value)*((((x946*(px*px)))+(((0.9)*py*sj0))+(((-1.0)*x946*(py*py)))+(((-2.0)*x949*(cj0*cj0)))+x949+(((0.9)*cj0*px))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x954=IKcos(j1);
IkReal x955=IKsin(j1);
IkReal x956=((0.15)*py);
IkReal x957=(px*sj0);
IkReal x958=((0.425)*sj3);
IkReal x959=((0.222222222222222)*pz);
IkReal x960=(py*sj0);
IkReal x961=((1.0)*cj0);
IkReal x962=(sj0*x954);
IkReal x963=(cj0*x955);
IkReal x964=(cj0*px*x954);
evalcond[0]=((((-1.0)*x960))+(((-1.0)*x954*x959))+(((-1.0)*x954*x958))+(((-1.0)*px*x961))+(((0.0683333333333333)*x954)));
evalcond[1]=((0.9)+(((-1.0)*py*x961))+(((-1.0)*x955*x959))+(((-1.0)*x955*x958))+x957+(((0.0683333333333333)*x955)));
evalcond[2]=(((px*x963))+(((0.9)*x954))+(((-1.0)*py*x954*x961))+((x955*x960))+((x954*x957)));
evalcond[3]=((-0.0683333333333333)+((x954*x960))+((py*x963))+(((-0.9)*x955))+(((-1.0)*x955*x957))+x964+x959+x958);
evalcond[4]=((-0.6444)+(((1.8)*cj0*py))+(((-1.0)*pp))+(((-0.06)*pz))+((x956*x962))+((x956*x963))+(((0.15)*x964))+(((-0.135)*x955))+(((-0.15)*x955*x957))+(((-1.8)*x957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x965=(cj0*px);
IkReal x966=((0.222222222222222)*pz);
IkReal x967=((0.425)*sj3);
IkReal x968=(py*sj0);
IkReal x969=(cj0*sj0);
IkReal x970=(px*py);
CheckValue<IkReal> x971=IKPowWithIntegerCheck(((((-1.0)*x965*x966))+(((-1.0)*x965*x967))+(((-1.0)*x967*x968))+(((-1.0)*x966*x968))+(((0.0683333333333333)*x965))+(((0.0683333333333333)*x968))),-1);
if(!x971.valid){
continue;
}
CheckValue<IkReal> x972=IKPowWithIntegerCheck(((0.0683333333333333)+(((-1.0)*x967))+(((-1.0)*x966))),-1);
if(!x972.valid){
continue;
}
if( IKabs(((x971.value)*(((((-1.0)*x970))+(((-1.0)*px*sj0*x965))+((cj0*py*x968))+(((-0.9)*x968))+(((-0.9)*x965))+(((2.0)*cj0*py*x965)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x972.value)*((x965+x968)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x971.value)*(((((-1.0)*x970))+(((-1.0)*px*sj0*x965))+((cj0*py*x968))+(((-0.9)*x968))+(((-0.9)*x965))+(((2.0)*cj0*py*x965))))))+IKsqr(((x972.value)*((x965+x968))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x971.value)*(((((-1.0)*x970))+(((-1.0)*px*sj0*x965))+((cj0*py*x968))+(((-0.9)*x968))+(((-0.9)*x965))+(((2.0)*cj0*py*x965))))), ((x972.value)*((x965+x968))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x973=IKcos(j1);
IkReal x974=IKsin(j1);
IkReal x975=((0.15)*py);
IkReal x976=(px*sj0);
IkReal x977=((0.425)*sj3);
IkReal x978=((0.222222222222222)*pz);
IkReal x979=(py*sj0);
IkReal x980=((1.0)*cj0);
IkReal x981=(sj0*x973);
IkReal x982=(cj0*x974);
IkReal x983=(cj0*px*x973);
evalcond[0]=((((-1.0)*px*x980))+(((0.0683333333333333)*x973))+(((-1.0)*x979))+(((-1.0)*x973*x977))+(((-1.0)*x973*x978)));
evalcond[1]=((0.9)+(((0.0683333333333333)*x974))+(((-1.0)*py*x980))+(((-1.0)*x974*x977))+(((-1.0)*x974*x978))+x976);
evalcond[2]=(((x973*x976))+(((0.9)*x973))+((x974*x979))+(((-1.0)*py*x973*x980))+((px*x982)));
evalcond[3]=((-0.0683333333333333)+((x973*x979))+(((-1.0)*x974*x976))+((py*x982))+(((-0.9)*x974))+x983+x977+x978);
evalcond[4]=((-0.6444)+(((-1.8)*x976))+(((1.8)*cj0*py))+((x975*x982))+((x975*x981))+(((-1.0)*pp))+(((-0.06)*pz))+(((0.15)*x983))+(((-0.15)*x974*x976))+(((-0.135)*x974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x984=IKPowWithIntegerCheck(IKsign(((0.0683333333333333)+(((-0.222222222222222)*pz))+(((-0.425)*sj3)))),-1);
if(!x984.valid){
continue;
}
CheckValue<IkReal> x985 = IKatan2WithCheck(IkReal(((-0.9)+(((-1.0)*px*sj0))+((cj0*py)))),IkReal((((cj0*px))+((py*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x985.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x984.value)))+(x985.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x986=IKcos(j1);
IkReal x987=IKsin(j1);
IkReal x988=((0.15)*py);
IkReal x989=(px*sj0);
IkReal x990=((0.425)*sj3);
IkReal x991=((0.222222222222222)*pz);
IkReal x992=(py*sj0);
IkReal x993=((1.0)*cj0);
IkReal x994=(sj0*x986);
IkReal x995=(cj0*x987);
IkReal x996=(cj0*px*x986);
evalcond[0]=((((-1.0)*x992))+(((-1.0)*px*x993))+(((-1.0)*x986*x991))+(((-1.0)*x986*x990))+(((0.0683333333333333)*x986)));
evalcond[1]=((0.9)+(((-1.0)*py*x993))+x989+(((-1.0)*x987*x991))+(((-1.0)*x987*x990))+(((0.0683333333333333)*x987)));
evalcond[2]=(((x986*x989))+(((-1.0)*py*x986*x993))+((px*x995))+(((0.9)*x986))+((x987*x992)));
evalcond[3]=((-0.0683333333333333)+((x986*x992))+((py*x995))+(((-1.0)*x987*x989))+(((-0.9)*x987))+x991+x990+x996);
evalcond[4]=((-0.6444)+(((-0.135)*x987))+(((-1.8)*x989))+(((1.8)*cj0*py))+((x988*x995))+((x988*x994))+(((0.15)*x996))+(((-1.0)*pp))+(((-0.06)*pz))+(((-0.15)*x987*x989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x997=py*py;
CheckValue<IkReal> x1000 = IKatan2WithCheck(IkReal(((-1.8)*x997)),IkReal(((1.8)*px*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x1000.valid){
continue;
}
IkReal x998=((1.0)*(x1000.value));
if((((((3.24)*x997*(px*px)))+(((3.24)*(x997*x997))))) < -0.00001)
continue;
CheckValue<IkReal> x1001=IKPowWithIntegerCheck(IKabs(IKsqrt(((((3.24)*x997*(px*px)))+(((3.24)*(x997*x997)))))),-1);
if(!x1001.valid){
continue;
}
if( (((x1001.value)*(((((0.63415)*py))+(((0.06375)*py*sj3))+(((0.0933333333333333)*py*pz))+((pp*py)))))) < -1-IKFAST_SINCOS_THRESH || (((x1001.value)*(((((0.63415)*py))+(((0.06375)*py*sj3))+(((0.0933333333333333)*py*pz))+((pp*py)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x999=IKasin(((x1001.value)*(((((0.63415)*py))+(((0.06375)*py*sj3))+(((0.0933333333333333)*py*pz))+((pp*py))))));
j0array[0]=((((-1.0)*x999))+(((-1.0)*x998)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x998))+x999);
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1002=IKcos(j0);
IkReal x1003=IKsin(j0);
IkReal x1004=((1.0)*pp);
IkReal x1005=((0.0933333333333333)*pz);
IkReal x1006=((0.06375)*sj3);
IkReal x1007=((1.8)*x1003);
IkReal x1008=((1.8)*py*x1002);
evalcond[0]=((-0.63415)+x1008+(((-1.0)*x1004))+(((-1.0)*x1005))+(((-1.0)*x1006))+(((-1.0)*px*x1007)));
evalcond[1]=(((px*x1008))+(((-0.63415)*px))+(((-1.0)*x1007*(px*px)))+(((-1.0)*px*x1006))+(((-1.0)*px*x1004))+(((-1.0)*px*x1005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=((1.0)+(((-3.2520325203252)*pz))+(((-6.21951219512195)*sj3)));
j1eval[1]=IKsign(((0.0683333333333333)+(((-0.222222222222222)*pz))+(((-0.425)*sj3))));
j1eval[2]=((IKabs((((cj0*px))+((py*sj0)))))+(IKabs(((-0.9)+(((-1.0)*px*sj0))+((cj0*py))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1009=(cj0*px);
IkReal x1010=((3.2520325203252)*pz);
IkReal x1011=(py*sj0);
IkReal x1012=((6.21951219512195)*sj3);
j1eval[0]=((((-1.0)*x1011*x1012))+(((-1.0)*x1010*x1011))+x1011+x1009+(((-1.0)*x1009*x1012))+(((-1.0)*x1009*x1010)));
j1eval[1]=((1.0)+(((-1.0)*x1010))+(((-1.0)*x1012)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1013=((6.21951219512195)*sj3);
IkReal x1014=((3.2520325203252)*pz);
IkReal x1015=((6.91056910569106)*sj3);
IkReal x1016=(px*sj0);
IkReal x1017=(cj0*py);
IkReal x1018=((3.613369467028)*pz);
IkReal x1019=(x1014+x1013);
j1eval[0]=((1.0)+(((-1.0)*x1019)));
j1eval[1]=((1.0)+((x1017*x1018))+(((-1.0)*x1019))+(((1.11111111111111)*x1016))+(((-1.0)*x1015*x1016))+(((-1.0)*x1016*x1018))+((x1015*x1017))+(((-1.11111111111111)*x1017)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal gconst7=((0.16078431372549)+(((-0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.16078431372549)+sj3+(((0.522875816993464)*pz)))))+(IKabs(((-1.0)+(IKsign(cj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp))))+IKsqr(((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp))), ((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1020=IKsin(j1);
IkReal x1021=IKcos(j1);
IkReal x1022=((0.15)*py);
IkReal x1023=(px*sj0);
IkReal x1024=(py*sj0);
IkReal x1025=((1.0)*cj0);
IkReal x1026=(sj0*x1021);
IkReal x1027=(cj0*x1020);
IkReal x1028=(cj0*px*x1021);
evalcond[0]=((0.542000000004466)+(((-0.555555555555556)*pp))+(((-0.0333333333333333)*pz))+(((5.3594771199795e-11)*x1020)));
evalcond[1]=((((-1.0)*x1024))+(((5.3594771199795e-11)*x1021))+(((-1.0)*px*x1025)));
evalcond[2]=((((-1.0)*py*x1021*x1025))+(((0.9)*x1021))+((x1021*x1023))+((px*x1027))+((x1020*x1024)));
evalcond[3]=((-5.3594771199795e-11)+((py*x1027))+x1028+((x1021*x1024))+(((-0.9)*x1020))+(((-1.0)*x1020*x1023)));
evalcond[4]=((-0.6444)+(((-0.135)*x1020))+(((-0.15)*x1020*x1023))+(((1.8)*cj0*py))+(((0.15)*x1028))+(((-1.0)*pp))+(((-0.06)*pz))+((x1022*x1027))+((x1022*x1026))+(((-1.8)*x1023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst7=((0.16078431372549)+(((-0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.16078431372549)+sj3+(((0.522875816993464)*pz)))))+(IKabs(((1.0)+(IKsign(cj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp))))+IKsqr(((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp))), ((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1029=IKsin(j1);
IkReal x1030=IKcos(j1);
IkReal x1031=((0.15)*py);
IkReal x1032=(px*sj0);
IkReal x1033=(py*sj0);
IkReal x1034=((1.0)*cj0);
IkReal x1035=(sj0*x1030);
IkReal x1036=(cj0*x1029);
IkReal x1037=(cj0*px*x1030);
evalcond[0]=((0.542000000004466)+(((-0.555555555555556)*pp))+(((-0.0333333333333333)*pz))+(((5.3594771199795e-11)*x1029)));
evalcond[1]=((((-1.0)*x1033))+(((5.3594771199795e-11)*x1030))+(((-1.0)*px*x1034)));
evalcond[2]=(((x1030*x1032))+((px*x1036))+(((0.9)*x1030))+((x1029*x1033))+(((-1.0)*py*x1030*x1034)));
evalcond[3]=((-5.3594771199795e-11)+(((-1.0)*x1029*x1032))+((x1030*x1033))+x1037+((py*x1036))+(((-0.9)*x1029)));
evalcond[4]=((-0.6444)+(((-0.135)*x1029))+((x1031*x1035))+((x1031*x1036))+(((1.8)*cj0*py))+(((0.15)*x1037))+(((-0.15)*x1029*x1032))+(((-1.0)*pp))+(((-1.8)*x1032))+(((-0.06)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1038=(cj0*sj0);
IkReal x1039=(px*sj0);
IkReal x1040=((0.425)*sj3);
IkReal x1041=(px*py);
IkReal x1042=((0.222222222222222)*pz);
IkReal x1043=(cj0*py);
CheckValue<IkReal> x1044=IKPowWithIntegerCheck(((0.0683333333333333)+(((-1.0)*x1040))+(((-1.0)*x1042))),-1);
if(!x1044.valid){
continue;
}
CheckValue<IkReal> x1045=IKPowWithIntegerCheck(((0.0615)+((x1042*x1043))+(((-0.2)*pz))+((x1040*x1043))+(((-0.0683333333333333)*x1043))+(((-1.0)*x1039*x1042))+(((-1.0)*x1039*x1040))+(((0.0683333333333333)*x1039))+(((-0.3825)*sj3))),-1);
if(!x1045.valid){
continue;
}
if( IKabs(((x1044.value)*(((-0.9)+x1043+(((-1.0)*x1039)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1045.value)*((x1041+(((0.9)*py*sj0))+(((-1.0)*x1038*(py*py)))+((x1038*(px*px)))+(((0.9)*cj0*px))+(((-2.0)*x1041*(cj0*cj0))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1044.value)*(((-0.9)+x1043+(((-1.0)*x1039))))))+IKsqr(((x1045.value)*((x1041+(((0.9)*py*sj0))+(((-1.0)*x1038*(py*py)))+((x1038*(px*px)))+(((0.9)*cj0*px))+(((-2.0)*x1041*(cj0*cj0)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1044.value)*(((-0.9)+x1043+(((-1.0)*x1039))))), ((x1045.value)*((x1041+(((0.9)*py*sj0))+(((-1.0)*x1038*(py*py)))+((x1038*(px*px)))+(((0.9)*cj0*px))+(((-2.0)*x1041*(cj0*cj0)))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1046=IKcos(j1);
IkReal x1047=IKsin(j1);
IkReal x1048=((0.15)*py);
IkReal x1049=(px*sj0);
IkReal x1050=((0.425)*sj3);
IkReal x1051=((0.222222222222222)*pz);
IkReal x1052=(py*sj0);
IkReal x1053=((1.0)*cj0);
IkReal x1054=(sj0*x1046);
IkReal x1055=(cj0*x1047);
IkReal x1056=(cj0*px*x1046);
evalcond[0]=((((-1.0)*x1046*x1050))+(((-1.0)*x1046*x1051))+(((0.0683333333333333)*x1046))+(((-1.0)*px*x1053))+(((-1.0)*x1052)));
evalcond[1]=((0.9)+x1049+(((0.0683333333333333)*x1047))+(((-1.0)*py*x1053))+(((-1.0)*x1047*x1050))+(((-1.0)*x1047*x1051)));
evalcond[2]=(((px*x1055))+(((-1.0)*py*x1046*x1053))+(((0.9)*x1046))+((x1047*x1052))+((x1046*x1049)));
evalcond[3]=((-0.0683333333333333)+x1050+x1051+x1056+(((-0.9)*x1047))+((py*x1055))+(((-1.0)*x1047*x1049))+((x1046*x1052)));
evalcond[4]=((-0.6444)+(((1.8)*cj0*py))+(((-1.8)*x1049))+((x1048*x1055))+((x1048*x1054))+(((-0.135)*x1047))+(((-1.0)*pp))+(((-0.06)*pz))+(((-0.15)*x1047*x1049))+(((0.15)*x1056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1057=(cj0*px);
IkReal x1058=((0.222222222222222)*pz);
IkReal x1059=((0.425)*sj3);
IkReal x1060=(py*sj0);
IkReal x1061=(cj0*sj0);
IkReal x1062=(px*py);
CheckValue<IkReal> x1063=IKPowWithIntegerCheck(((((0.0683333333333333)*x1060))+(((-1.0)*x1059*x1060))+(((0.0683333333333333)*x1057))+(((-1.0)*x1058*x1060))+(((-1.0)*x1057*x1059))+(((-1.0)*x1057*x1058))),-1);
if(!x1063.valid){
continue;
}
CheckValue<IkReal> x1064=IKPowWithIntegerCheck(((0.0683333333333333)+(((-1.0)*x1059))+(((-1.0)*x1058))),-1);
if(!x1064.valid){
continue;
}
if( IKabs(((x1063.value)*(((((2.0)*cj0*py*x1057))+(((-0.9)*x1060))+(((-0.9)*x1057))+(((-1.0)*px*sj0*x1057))+((cj0*py*x1060))+(((-1.0)*x1062)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1064.value)*((x1057+x1060)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1063.value)*(((((2.0)*cj0*py*x1057))+(((-0.9)*x1060))+(((-0.9)*x1057))+(((-1.0)*px*sj0*x1057))+((cj0*py*x1060))+(((-1.0)*x1062))))))+IKsqr(((x1064.value)*((x1057+x1060))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1063.value)*(((((2.0)*cj0*py*x1057))+(((-0.9)*x1060))+(((-0.9)*x1057))+(((-1.0)*px*sj0*x1057))+((cj0*py*x1060))+(((-1.0)*x1062))))), ((x1064.value)*((x1057+x1060))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1065=IKcos(j1);
IkReal x1066=IKsin(j1);
IkReal x1067=((0.15)*py);
IkReal x1068=(px*sj0);
IkReal x1069=((0.425)*sj3);
IkReal x1070=((0.222222222222222)*pz);
IkReal x1071=(py*sj0);
IkReal x1072=((1.0)*cj0);
IkReal x1073=(sj0*x1065);
IkReal x1074=(cj0*x1066);
IkReal x1075=(cj0*px*x1065);
evalcond[0]=((((0.0683333333333333)*x1065))+(((-1.0)*px*x1072))+(((-1.0)*x1071))+(((-1.0)*x1065*x1070))+(((-1.0)*x1065*x1069)));
evalcond[1]=((0.9)+x1068+(((0.0683333333333333)*x1066))+(((-1.0)*py*x1072))+(((-1.0)*x1066*x1069))+(((-1.0)*x1066*x1070)));
evalcond[2]=((((-1.0)*py*x1065*x1072))+((px*x1074))+((x1066*x1071))+(((0.9)*x1065))+((x1065*x1068)));
evalcond[3]=((-0.0683333333333333)+x1075+x1070+x1069+(((-0.9)*x1066))+(((-1.0)*x1066*x1068))+((py*x1074))+((x1065*x1071)));
evalcond[4]=((-0.6444)+(((1.8)*cj0*py))+(((-1.8)*x1068))+((x1067*x1073))+((x1067*x1074))+(((-0.135)*x1066))+(((-0.15)*x1066*x1068))+(((-1.0)*pp))+(((-0.06)*pz))+(((0.15)*x1075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1076=IKPowWithIntegerCheck(IKsign(((0.0683333333333333)+(((-0.222222222222222)*pz))+(((-0.425)*sj3)))),-1);
if(!x1076.valid){
continue;
}
CheckValue<IkReal> x1077 = IKatan2WithCheck(IkReal(((-0.9)+(((-1.0)*px*sj0))+((cj0*py)))),IkReal((((cj0*px))+((py*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1077.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1076.value)))+(x1077.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1078=IKcos(j1);
IkReal x1079=IKsin(j1);
IkReal x1080=((0.15)*py);
IkReal x1081=(px*sj0);
IkReal x1082=((0.425)*sj3);
IkReal x1083=((0.222222222222222)*pz);
IkReal x1084=(py*sj0);
IkReal x1085=((1.0)*cj0);
IkReal x1086=(sj0*x1078);
IkReal x1087=(cj0*x1079);
IkReal x1088=(cj0*px*x1078);
evalcond[0]=((((0.0683333333333333)*x1078))+(((-1.0)*x1078*x1083))+(((-1.0)*x1078*x1082))+(((-1.0)*x1084))+(((-1.0)*px*x1085)));
evalcond[1]=((0.9)+(((-1.0)*py*x1085))+x1081+(((0.0683333333333333)*x1079))+(((-1.0)*x1079*x1082))+(((-1.0)*x1079*x1083)));
evalcond[2]=(((x1079*x1084))+((x1078*x1081))+((px*x1087))+(((-1.0)*py*x1078*x1085))+(((0.9)*x1078)));
evalcond[3]=((-0.0683333333333333)+(((-0.9)*x1079))+x1083+x1082+x1088+((py*x1087))+(((-1.0)*x1079*x1081))+((x1078*x1084)));
evalcond[4]=((-0.6444)+(((-0.15)*x1079*x1081))+(((-1.8)*x1081))+(((1.8)*cj0*py))+(((-0.135)*x1079))+(((-1.0)*pp))+(((-0.06)*pz))+(((0.15)*x1088))+((x1080*x1086))+((x1080*x1087)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x1091 = IKatan2WithCheck(IkReal(((1.8)*py)),IkReal(((-1.8)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x1091.valid){
continue;
}
IkReal x1089=((1.0)*(x1091.value));
if((((((3.24)*(px*px)))+(((3.24)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x1092=IKPowWithIntegerCheck(IKabs(IKsqrt(((((3.24)*(px*px)))+(((3.24)*(py*py)))))),-1);
if(!x1092.valid){
continue;
}
if( (((-1.0)*(x1092.value)*(((-0.63415)+(((-0.06375)*sj3))+(((-1.0)*pp))+(((-0.0933333333333333)*pz)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1092.value)*(((-0.63415)+(((-0.06375)*sj3))+(((-1.0)*pp))+(((-0.0933333333333333)*pz)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1090=((-1.0)*(IKasin(((-1.0)*(x1092.value)*(((-0.63415)+(((-0.06375)*sj3))+(((-1.0)*pp))+(((-0.0933333333333333)*pz))))))));
j0array[0]=((((-1.0)*x1090))+(((-1.0)*x1089)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((1.0)*x1090))+(((-1.0)*x1089)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j1eval[3];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=((1.0)+(((-3.2520325203252)*pz))+(((-6.21951219512195)*sj3)));
j1eval[1]=IKsign(((0.0683333333333333)+(((-0.222222222222222)*pz))+(((-0.425)*sj3))));
j1eval[2]=((IKabs((((cj0*px))+((py*sj0)))))+(IKabs(((-0.9)+(((-1.0)*px*sj0))+((cj0*py))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1093=(cj0*px);
IkReal x1094=((3.2520325203252)*pz);
IkReal x1095=(py*sj0);
IkReal x1096=((6.21951219512195)*sj3);
j1eval[0]=(x1095+x1093+(((-1.0)*x1095*x1096))+(((-1.0)*x1094*x1095))+(((-1.0)*x1093*x1094))+(((-1.0)*x1093*x1096)));
j1eval[1]=((1.0)+(((-1.0)*x1096))+(((-1.0)*x1094)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1097=((6.21951219512195)*sj3);
IkReal x1098=((3.2520325203252)*pz);
IkReal x1099=((6.91056910569106)*sj3);
IkReal x1100=(px*sj0);
IkReal x1101=(cj0*py);
IkReal x1102=((3.613369467028)*pz);
IkReal x1103=(x1097+x1098);
j1eval[0]=((1.0)+(((-1.0)*x1103)));
j1eval[1]=((1.0)+(((1.11111111111111)*x1100))+((x1101*x1102))+((x1099*x1101))+(((-1.0)*x1099*x1100))+(((-1.0)*x1100*x1102))+(((-1.0)*x1103))+(((-1.11111111111111)*x1101)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal gconst7=((0.16078431372549)+(((-0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.16078431372549)+sj3+(((0.522875816993464)*pz)))))+(IKabs(((-1.0)+(IKsign(cj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp))))+IKsqr(((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp))), ((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1104=IKsin(j1);
IkReal x1105=IKcos(j1);
IkReal x1106=((0.15)*py);
IkReal x1107=(px*sj0);
IkReal x1108=(py*sj0);
IkReal x1109=((1.0)*cj0);
IkReal x1110=(sj0*x1105);
IkReal x1111=(cj0*x1104);
IkReal x1112=(cj0*px*x1105);
evalcond[0]=((0.542000000004466)+(((-0.555555555555556)*pp))+(((-0.0333333333333333)*pz))+(((5.3594771199795e-11)*x1104)));
evalcond[1]=((((-1.0)*px*x1109))+(((5.3594771199795e-11)*x1105))+(((-1.0)*x1108)));
evalcond[2]=((((-1.0)*py*x1105*x1109))+((x1105*x1107))+((x1104*x1108))+((px*x1111))+(((0.9)*x1105)));
evalcond[3]=((-5.3594771199795e-11)+x1112+((x1105*x1108))+(((-1.0)*x1104*x1107))+(((-0.9)*x1104))+((py*x1111)));
evalcond[4]=((-0.6444)+(((1.8)*cj0*py))+(((-0.15)*x1104*x1107))+(((0.15)*x1112))+(((-1.8)*x1107))+(((-1.0)*pp))+(((-0.06)*pz))+(((-0.135)*x1104))+((x1106*x1111))+((x1106*x1110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst7=((0.16078431372549)+(((-0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.16078431372549)+sj3+(((0.522875816993464)*pz)))))+(IKabs(((1.0)+(IKsign(cj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp))))+IKsqr(((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp))), ((((18658536600.0)*py*sj0))+(((18658536600.0)*cj0*px))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1113=IKsin(j1);
IkReal x1114=IKcos(j1);
IkReal x1115=((0.15)*py);
IkReal x1116=(px*sj0);
IkReal x1117=(py*sj0);
IkReal x1118=((1.0)*cj0);
IkReal x1119=(sj0*x1114);
IkReal x1120=(cj0*x1113);
IkReal x1121=(cj0*px*x1114);
evalcond[0]=((0.542000000004466)+(((-0.555555555555556)*pp))+(((-0.0333333333333333)*pz))+(((5.3594771199795e-11)*x1113)));
evalcond[1]=((((-1.0)*px*x1118))+(((5.3594771199795e-11)*x1114))+(((-1.0)*x1117)));
evalcond[2]=(((x1114*x1116))+((x1113*x1117))+(((-1.0)*py*x1114*x1118))+((px*x1120))+(((0.9)*x1114)));
evalcond[3]=((-5.3594771199795e-11)+((x1114*x1117))+x1121+(((-1.0)*x1113*x1116))+(((-0.9)*x1113))+((py*x1120)));
evalcond[4]=((-0.6444)+(((1.8)*cj0*py))+(((-1.8)*x1116))+(((-0.15)*x1113*x1116))+(((-1.0)*pp))+(((-0.06)*pz))+(((0.15)*x1121))+((x1115*x1119))+(((-0.135)*x1113))+((x1115*x1120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1122=(cj0*sj0);
IkReal x1123=(px*sj0);
IkReal x1124=((0.425)*sj3);
IkReal x1125=(px*py);
IkReal x1126=((0.222222222222222)*pz);
IkReal x1127=(cj0*py);
CheckValue<IkReal> x1128=IKPowWithIntegerCheck(((0.0683333333333333)+(((-1.0)*x1126))+(((-1.0)*x1124))),-1);
if(!x1128.valid){
continue;
}
CheckValue<IkReal> x1129=IKPowWithIntegerCheck(((0.0615)+(((-0.0683333333333333)*x1127))+(((-0.2)*pz))+(((0.0683333333333333)*x1123))+(((-1.0)*x1123*x1126))+(((-1.0)*x1123*x1124))+((x1124*x1127))+(((-0.3825)*sj3))+((x1126*x1127))),-1);
if(!x1129.valid){
continue;
}
if( IKabs(((x1128.value)*(((-0.9)+x1127+(((-1.0)*x1123)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1129.value)*((x1125+((x1122*(px*px)))+(((-2.0)*x1125*(cj0*cj0)))+(((0.9)*py*sj0))+(((-1.0)*x1122*(py*py)))+(((0.9)*cj0*px)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1128.value)*(((-0.9)+x1127+(((-1.0)*x1123))))))+IKsqr(((x1129.value)*((x1125+((x1122*(px*px)))+(((-2.0)*x1125*(cj0*cj0)))+(((0.9)*py*sj0))+(((-1.0)*x1122*(py*py)))+(((0.9)*cj0*px))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1128.value)*(((-0.9)+x1127+(((-1.0)*x1123))))), ((x1129.value)*((x1125+((x1122*(px*px)))+(((-2.0)*x1125*(cj0*cj0)))+(((0.9)*py*sj0))+(((-1.0)*x1122*(py*py)))+(((0.9)*cj0*px))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1130=IKcos(j1);
IkReal x1131=IKsin(j1);
IkReal x1132=((0.15)*py);
IkReal x1133=(px*sj0);
IkReal x1134=((0.425)*sj3);
IkReal x1135=((0.222222222222222)*pz);
IkReal x1136=(py*sj0);
IkReal x1137=((1.0)*cj0);
IkReal x1138=(sj0*x1130);
IkReal x1139=(cj0*x1131);
IkReal x1140=(cj0*px*x1130);
evalcond[0]=((((-1.0)*x1130*x1135))+(((-1.0)*x1130*x1134))+(((0.0683333333333333)*x1130))+(((-1.0)*x1136))+(((-1.0)*px*x1137)));
evalcond[1]=((0.9)+x1133+(((-1.0)*x1131*x1135))+(((-1.0)*x1131*x1134))+(((0.0683333333333333)*x1131))+(((-1.0)*py*x1137)));
evalcond[2]=((((-1.0)*py*x1130*x1137))+((x1130*x1133))+((x1131*x1136))+((px*x1139))+(((0.9)*x1130)));
evalcond[3]=((-0.0683333333333333)+(((-0.9)*x1131))+x1140+x1135+x1134+((x1130*x1136))+(((-1.0)*x1131*x1133))+((py*x1139)));
evalcond[4]=((-0.6444)+(((1.8)*cj0*py))+(((-1.0)*pp))+(((-0.06)*pz))+(((0.15)*x1140))+(((-1.8)*x1133))+(((-0.15)*x1131*x1133))+(((-0.135)*x1131))+((x1132*x1139))+((x1132*x1138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1141=(cj0*px);
IkReal x1142=((0.222222222222222)*pz);
IkReal x1143=((0.425)*sj3);
IkReal x1144=(py*sj0);
IkReal x1145=(cj0*sj0);
IkReal x1146=(px*py);
CheckValue<IkReal> x1147=IKPowWithIntegerCheck(((((0.0683333333333333)*x1144))+(((0.0683333333333333)*x1141))+(((-1.0)*x1143*x1144))+(((-1.0)*x1141*x1143))+(((-1.0)*x1141*x1142))+(((-1.0)*x1142*x1144))),-1);
if(!x1147.valid){
continue;
}
CheckValue<IkReal> x1148=IKPowWithIntegerCheck(((0.0683333333333333)+(((-1.0)*x1142))+(((-1.0)*x1143))),-1);
if(!x1148.valid){
continue;
}
if( IKabs(((x1147.value)*((((cj0*py*x1144))+(((-0.9)*x1144))+(((-0.9)*x1141))+(((2.0)*cj0*py*x1141))+(((-1.0)*x1146))+(((-1.0)*px*sj0*x1141)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1148.value)*((x1141+x1144)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1147.value)*((((cj0*py*x1144))+(((-0.9)*x1144))+(((-0.9)*x1141))+(((2.0)*cj0*py*x1141))+(((-1.0)*x1146))+(((-1.0)*px*sj0*x1141))))))+IKsqr(((x1148.value)*((x1141+x1144))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1147.value)*((((cj0*py*x1144))+(((-0.9)*x1144))+(((-0.9)*x1141))+(((2.0)*cj0*py*x1141))+(((-1.0)*x1146))+(((-1.0)*px*sj0*x1141))))), ((x1148.value)*((x1141+x1144))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1149=IKcos(j1);
IkReal x1150=IKsin(j1);
IkReal x1151=((0.15)*py);
IkReal x1152=(px*sj0);
IkReal x1153=((0.425)*sj3);
IkReal x1154=((0.222222222222222)*pz);
IkReal x1155=(py*sj0);
IkReal x1156=((1.0)*cj0);
IkReal x1157=(sj0*x1149);
IkReal x1158=(cj0*x1150);
IkReal x1159=(cj0*px*x1149);
evalcond[0]=((((0.0683333333333333)*x1149))+(((-1.0)*px*x1156))+(((-1.0)*x1149*x1153))+(((-1.0)*x1149*x1154))+(((-1.0)*x1155)));
evalcond[1]=((0.9)+x1152+(((-1.0)*py*x1156))+(((-1.0)*x1150*x1154))+(((-1.0)*x1150*x1153))+(((0.0683333333333333)*x1150)));
evalcond[2]=(((x1149*x1152))+(((0.9)*x1149))+((x1150*x1155))+(((-1.0)*py*x1149*x1156))+((px*x1158)));
evalcond[3]=((-0.0683333333333333)+x1159+x1154+x1153+((x1149*x1155))+(((-0.9)*x1150))+(((-1.0)*x1150*x1152))+((py*x1158)));
evalcond[4]=((-0.6444)+(((1.8)*cj0*py))+(((-1.8)*x1152))+(((-1.0)*pp))+(((-0.06)*pz))+(((0.15)*x1159))+((x1151*x1157))+((x1151*x1158))+(((-0.15)*x1150*x1152))+(((-0.135)*x1150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1160=IKPowWithIntegerCheck(IKsign(((0.0683333333333333)+(((-0.222222222222222)*pz))+(((-0.425)*sj3)))),-1);
if(!x1160.valid){
continue;
}
CheckValue<IkReal> x1161 = IKatan2WithCheck(IkReal(((-0.9)+(((-1.0)*px*sj0))+((cj0*py)))),IkReal((((cj0*px))+((py*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1161.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1160.value)))+(x1161.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1162=IKcos(j1);
IkReal x1163=IKsin(j1);
IkReal x1164=((0.15)*py);
IkReal x1165=(px*sj0);
IkReal x1166=((0.425)*sj3);
IkReal x1167=((0.222222222222222)*pz);
IkReal x1168=(py*sj0);
IkReal x1169=((1.0)*cj0);
IkReal x1170=(sj0*x1162);
IkReal x1171=(cj0*x1163);
IkReal x1172=(cj0*px*x1162);
evalcond[0]=((((-1.0)*x1162*x1166))+(((-1.0)*x1162*x1167))+(((0.0683333333333333)*x1162))+(((-1.0)*px*x1169))+(((-1.0)*x1168)));
evalcond[1]=((0.9)+x1165+(((-1.0)*x1163*x1167))+(((-1.0)*x1163*x1166))+(((-1.0)*py*x1169))+(((0.0683333333333333)*x1163)));
evalcond[2]=(((x1163*x1168))+((px*x1171))+((x1162*x1165))+(((-1.0)*py*x1162*x1169))+(((0.9)*x1162)));
evalcond[3]=((-0.0683333333333333)+x1166+x1167+x1172+(((-1.0)*x1163*x1165))+((x1162*x1168))+(((-0.9)*x1163))+((py*x1171)));
evalcond[4]=((-0.6444)+((x1164*x1171))+((x1164*x1170))+(((0.15)*x1172))+(((1.8)*cj0*py))+(((-1.0)*pp))+(((-0.06)*pz))+(((-0.135)*x1163))+(((-1.8)*x1165))+(((-0.15)*x1163*x1165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1173=sj2*sj2;
IkReal x1174=px*px;
IkReal x1175=(px*sj2);
IkReal x1176=(cj2*px);
IkReal x1177=((3.24)*x1173);
CheckValue<IkReal> x1180 = IKatan2WithCheck(IkReal(((1.8)*py*x1175)),IkReal(((-1.8)*sj2*x1174)),IKFAST_ATAN2_MAGTHRESH);
if(!x1180.valid){
continue;
}
IkReal x1178=((1.0)*(x1180.value));
if(((((x1177*(x1174*x1174)))+((x1174*x1177*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x1181=IKPowWithIntegerCheck(IKabs(IKsqrt((((x1177*(x1174*x1174)))+((x1174*x1177*(py*py)))))),-1);
if(!x1181.valid){
continue;
}
if( (((x1181.value)*(((((0.0135)*px*sj3))+(((0.29565)*cj3*x1175))+(((0.67)*pz*x1175))+(((-0.15)*pz*x1176))+(((0.05475)*px))+(((0.05025)*x1176))+(((0.06075)*cj3*px))+(((0.0657)*sj3*x1175))+(((-0.61125)*x1175))+(((-1.0)*pp*x1175)))))) < -1-IKFAST_SINCOS_THRESH || (((x1181.value)*(((((0.0135)*px*sj3))+(((0.29565)*cj3*x1175))+(((0.67)*pz*x1175))+(((-0.15)*pz*x1176))+(((0.05475)*px))+(((0.05025)*x1176))+(((0.06075)*cj3*px))+(((0.0657)*sj3*x1175))+(((-0.61125)*x1175))+(((-1.0)*pp*x1175)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1179=IKasin(((x1181.value)*(((((0.0135)*px*sj3))+(((0.29565)*cj3*x1175))+(((0.67)*pz*x1175))+(((-0.15)*pz*x1176))+(((0.05475)*px))+(((0.05025)*x1176))+(((0.06075)*cj3*px))+(((0.0657)*sj3*x1175))+(((-0.61125)*x1175))+(((-1.0)*pp*x1175))))));
j0array[0]=((((-1.0)*x1178))+(((-1.0)*x1179)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+x1179+(((-1.0)*x1178)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1182=IKsin(j0);
IkReal x1183=IKcos(j0);
IkReal x1184=py*py;
IkReal x1185=cj2*cj2;
IkReal x1186=sj2*sj2;
IkReal x1187=(sj2*sj3);
IkReal x1188=((0.29565)*py);
IkReal x1189=((0.0135)*cj3);
IkReal x1190=((0.8777)*cj2);
IkReal x1191=(px*sj2);
IkReal x1192=((0.0657)*cj3);
IkReal x1193=(cj2*pz);
IkReal x1194=((0.15)*py);
IkReal x1195=((0.06075)*sj3);
IkReal x1196=(pz*sj2);
IkReal x1197=((0.67)*py);
IkReal x1198=((0.73)*pz);
IkReal x1199=(cj3*sj2);
IkReal x1200=((1.0)*pp);
IkReal x1201=(cj2*py);
IkReal x1202=(py*sj2);
IkReal x1203=((0.24455)*x1186);
IkReal x1204=((1.8)*x1183);
IkReal x1205=((0.24455)*x1185);
IkReal x1206=(px*x1201);
IkReal x1207=((1.8)*x1182);
evalcond[0]=((-0.3868)+(((0.29565)*cj3))+(((0.12105)*cj2*sj3))+(((0.25785)*cj2*cj3))+(((-0.25785)*x1187))+(((0.05475)*sj2))+(((0.0657)*sj3))+(((0.12105)*x1199))+((py*x1204))+(((-1.0)*px*x1207))+(((0.24455)*cj2))+(((-1.0)*x1200)));
evalcond[1]=(((pp*x1202))+(((-0.0657)*py*x1187))+(((-0.05025)*x1201))+(((-1.0)*x1188*x1199))+(((-0.05475)*py))+(((-0.06075)*cj3*py))+(((0.61125)*x1202))+(((-0.0135)*py*sj3))+(((-1.0)*x1196*x1197))+(((-1.0)*sj2*x1184*x1204))+((x1193*x1194))+((py*x1191*x1207)));
evalcond[2]=(((py*x1186*x1198))+((x1187*x1188))+((py*x1185*x1198))+((x1194*x1196))+((py*x1195))+(((-0.05025)*x1202))+(((-1.0)*py*x1190))+(((-1.0)*py*x1189))+(((-1.0)*x1200*x1201))+((x1193*x1197))+((cj2*x1184*x1204))+(((-1.0)*x1206*x1207))+(((-1.0)*x1192*x1202))+(((-1.0)*py*x1203))+(((-1.0)*py*x1205)));
evalcond[3]=((((-1.0)*x1204*x1206))+(((0.05025)*x1191))+((cj2*pp*px))+(((-0.67)*px*x1193))+(((-1.0)*px*x1185*x1198))+((px*x1205))+((px*x1203))+(((-1.0)*px*x1186*x1198))+(((-0.15)*pz*x1191))+(((-0.29565)*px*x1187))+((px*x1189))+((px*x1190))+(((-1.0)*px*x1195))+((cj2*x1207*(px*px)))+((x1191*x1192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
IkReal x1208=(cj3*sj2);
IkReal x1209=(cj2*cj3);
IkReal x1210=(sj2*sj3);
IkReal x1211=(cj2*sj3);
j1eval[0]=((1.0)+(((-1.2)*x1209))+(((1.2)*x1210))+(((4.86666666666667)*sj2))+(((5.4)*x1211))+(((5.4)*x1208)));
j1eval[1]=((IKabs((((cj0*px))+((py*sj0)))))+(IKabs(((-0.9)+(((-1.0)*px*sj0))+((cj0*py))))));
j1eval[2]=IKsign(((0.075)+(((0.405)*x1211))+(((0.09)*x1210))+(((0.405)*x1208))+(((0.365)*sj2))+(((-0.09)*x1209))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1212=pz*pz;
IkReal x1213=(pp*sj2);
IkReal x1214=((2.22222222222222)*sj2);
IkReal x1215=(cj0*py);
IkReal x1216=(px*sj0);
IkReal x1217=((1.8)*sj2);
IkReal x1218=(sj2*x1212);
j1eval[0]=(((x1214*x1216))+(((-1.23456790123457)*x1218))+sj2+(((-1.0)*x1214*x1215))+(((1.23456790123457)*x1213)));
j1eval[1]=IKsign((x1213+(((-1.0)*x1215*x1217))+(((0.81)*sj2))+((x1216*x1217))+(((-1.0)*x1218))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1219=(cj0*px);
IkReal x1220=(py*sj0);
IkReal x1221=((4.86666666666667)*sj2);
IkReal x1222=((5.4)*cj2*sj3);
IkReal x1223=((5.4)*cj3*sj2);
IkReal x1224=((1.2)*cj2*cj3);
IkReal x1225=((1.2)*sj2*sj3);
j1eval[0]=(x1220+x1219+((x1219*x1221))+((x1219*x1222))+((x1219*x1225))+((x1219*x1223))+(((-1.0)*x1220*x1224))+((x1220*x1221))+((x1220*x1222))+((x1220*x1225))+((x1220*x1223))+(((-1.0)*x1219*x1224)));
j1eval[1]=((1.0)+x1225+x1223+x1222+x1221+(((-1.0)*x1224)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=((1.0375)+(((1.9125)*sj3))+(((-1.0)*pz)));
j1eval[1]=((1.0)+(((-1.2)*cj3))+(((5.4)*sj3)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x1226=(cj0*px);
IkReal x1227=((1.2)*cj3);
IkReal x1228=(py*sj0);
IkReal x1229=((5.4)*sj3);
j1eval[0]=(x1226+x1228+(((-1.0)*x1226*x1227))+(((-1.0)*x1227*x1228))+((x1226*x1229))+((x1228*x1229)));
j1eval[1]=((1.0)+x1229+(((-1.0)*x1227)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x1230=((5.4)*sj3);
IkReal x1231=((1.2)*cj3);
IkReal x1232=((6.0)*sj3);
IkReal x1233=(cj0*py);
IkReal x1234=(px*sj0);
IkReal x1235=((1.33333333333333)*cj3);
IkReal x1236=((1.0)+x1230);
j1eval[0]=(x1236+(((-1.0)*x1231))+(((1.11111111111111)*x1234))+((x1233*x1235))+(((-1.0)*x1234*x1235))+((x1232*x1234))+(((-1.0)*x1232*x1233))+(((-1.11111111111111)*x1233)));
j1eval[1]=(x1236+(((-1.0)*x1231)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.0368941812728069)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((2473775995.32335)+(((-1213967228.64635)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2473775995.32335)+(((-1213967228.64635)*pp))))+IKsqr(((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((2473775995.32335)+(((-1213967228.64635)*pp))), ((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1237=IKsin(j1);
IkReal x1238=IKcos(j1);
CheckValue<IkReal> x1247=IKPowWithIntegerCheck(py,-1);
if(!x1247.valid){
continue;
}
IkReal x1239=x1247.value;
IkReal x1240=(py*sj0);
IkReal x1241=((0.0833333333333333)*pp);
IkReal x1242=(cj0*px);
IkReal x1243=(cj0*py);
IkReal x1244=((0.15)*x1238);
IkReal x1245=((1.0)*x1238);
IkReal x1246=(px*x1238);
evalcond[0]=((1.13208986616081)+(((-0.555555555555556)*pp))+(((-4.57636369784904e-10)*x1237)));
evalcond[1]=((((-1.0)*x1240))+(((-1.0)*x1242))+(((-4.57636369784904e-10)*x1238)));
evalcond[2]=((((0.9)*x1238))+(((-1.0)*x1243*x1245))+((sj0*x1246))+((x1237*x1240))+((x1237*x1242)));
evalcond[3]=((-4.57636369784904e-10)+(((0.9)*x1237))+(((-1.0)*x1242*x1245))+(((-1.0)*x1240*x1245))+(((-1.0)*x1237*x1243))+((px*sj0*x1237)));
evalcond[4]=((6.86454554677356e-11)+((sj0*x1239*x1244*(px*px)))+((x1239*x1241*x1246))+((x1240*x1244))+(((-0.034813479924122)*x1239*x1246))+(((-0.169813479924122)*x1237))+((x1237*x1241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.54203636406487)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((1366263721.92856)+(((-1526145402.02498)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1366263721.92856)+(((-1526145402.02498)*pp))))+IKsqr(((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1366263721.92856)+(((-1526145402.02498)*pp))), ((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1248=IKsin(j1);
IkReal x1249=IKcos(j1);
CheckValue<IkReal> x1258=IKPowWithIntegerCheck(py,-1);
if(!x1258.valid){
continue;
}
IkReal x1250=x1258.value;
IkReal x1251=(py*sj0);
IkReal x1252=((0.0833333333333333)*pp);
IkReal x1253=(cj0*px);
IkReal x1254=(cj0*py);
IkReal x1255=((0.15)*x1249);
IkReal x1256=((1.0)*x1249);
IkReal x1257=(px*x1249);
evalcond[0]=((0.497354577135498)+(((-0.555555555555556)*pp))+(((-3.64025311623919e-10)*x1248)));
evalcond[1]=((((-3.64025311623919e-10)*x1249))+(((-1.0)*x1251))+(((-1.0)*x1253)));
evalcond[2]=(((sj0*x1257))+(((0.9)*x1249))+(((-1.0)*x1254*x1256))+((x1248*x1251))+((x1248*x1253)));
evalcond[3]=((-3.64025311623919e-10)+(((-1.0)*x1253*x1256))+(((0.9)*x1248))+(((-1.0)*x1248*x1254))+(((-1.0)*x1251*x1256))+((px*sj0*x1248)));
evalcond[4]=((5.46037967435879e-11)+((sj0*x1250*x1255*(px*px)))+((x1250*x1252*x1257))+((x1251*x1255))+(((0.0603968134296753)*x1250*x1257))+((x1248*x1252))+(((-0.0746031865703247)*x1248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst0=((-0.542483660130719)+(((0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.542483660130719)+sj3+(((-0.522875816993464)*pz)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1259=((0.522875816993464)*pz);
IkReal x1260=((-0.54248366)+x1259);
sj2=0;
cj2=1.0;
j2=0;
sj3=x1260;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
if( (((0.54248366)+(((-1.0)*x1259)))) < -1-IKFAST_SINCOS_THRESH || (((0.54248366)+(((-1.0)*x1259)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((-1.0)*(IKasin(((0.54248366)+(((-1.0)*x1259))))));
IkReal gconst0=((-0.542483660130719)+x1259);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
j1eval[0]=((-1.60784313666667)+(((-1.0)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((2.35294117647059)*pz)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1261=((0.522875816993464)*pz);
IkReal x1262=((-0.54248366)+x1261);
sj2=0;
cj2=1.0;
j2=0;
sj3=x1262;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
if( (((0.54248366)+(((-1.0)*x1261)))) < -1-IKFAST_SINCOS_THRESH || (((0.54248366)+(((-1.0)*x1261)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((-1.0)*(IKasin(((0.54248366)+(((-1.0)*x1261))))));
IkReal gconst0=((-0.542483660130719)+x1261);
j1eval[0]=((1.0)+(((-1.11111111111111)*cj0*py))+(((1.11111111111111)*px*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1263=((0.522875816993464)*pz);
IkReal x1264=((-0.54248366)+x1263);
sj2=0;
cj2=1.0;
j2=0;
sj3=x1264;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
if( (x1264) < -1-IKFAST_SINCOS_THRESH || (x1264) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=IKasin(x1264);
IkReal gconst0=((-0.542483660130719)+x1263);
j1eval[0]=((((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1265=IKsin(j1);
IkReal x1266=IKcos(j1);
IkReal x1267=((0.211764705882353)*pz);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1268=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1269=((0.09)*x1268);
evalcond[0]=((0.9)*x1266);
evalcond[1]=((-0.1447058823)+x1267+(((0.9)*x1265))+(((-1.0)*x1269)));
evalcond[2]=((-0.889941176495)+(((-0.135)*x1265))+(((1.30235294117647)*pz))+(((-0.5535)*x1268)));
evalcond[3]=((((-1.0)*x1266*x1269))+((x1266*x1267))+(((-0.1447058823)*x1266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*(py*py)))+(((10000000000.0)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1270=IKcos(j1);
IkReal x1271=IKsin(j1);
IkReal x1272=((0.211764705882353)*pz);
IkReal x1273=(py*x1271);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1274=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1275=((0.09)*x1274);
evalcond[0]=((((-1.0)*py*x1270))+(((0.9)*x1270)));
evalcond[1]=((((-1.0)*x1270*x1275))+((x1270*x1272))+(((-0.1447058823)*x1270)));
evalcond[2]=((-0.1447058823)+x1272+(((-1.0)*x1275))+(((-1.0)*x1273))+(((0.9)*x1271)));
evalcond[3]=((-0.889941176495)+(((-0.135)*x1271))+(((-0.5535)*x1274))+(((1.30235294117647)*pz))+(((0.15)*x1273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*(py*py)))+(((10000000000.0)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1276=IKcos(j1);
IkReal x1277=IKsin(j1);
IkReal x1278=((0.211764705882353)*pz);
IkReal x1279=(py*x1277);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1280=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1281=((0.09)*x1280);
evalcond[0]=(((py*x1276))+(((0.9)*x1276)));
evalcond[1]=(((x1276*x1278))+(((-1.0)*x1276*x1281))+(((-0.1447058823)*x1276)));
evalcond[2]=((-0.1447058823)+x1278+x1279+(((-1.0)*x1281))+(((0.9)*x1277)));
evalcond[3]=((-0.889941176495)+(((-0.5535)*x1280))+(((-0.135)*x1277))+(((1.30235294117647)*pz))+(((-0.15)*x1279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*(pz*pz)))+(((10000000000.0)*(px*px))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1282=IKcos(j1);
IkReal x1283=IKsin(j1);
IkReal x1284=((0.211764705882353)*pz);
IkReal x1285=(px*x1283);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1286=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1287=((0.09)*x1286);
evalcond[0]=(((px*x1282))+(((0.9)*x1282)));
evalcond[1]=((((-0.1447058823)*x1282))+((x1282*x1284))+(((-1.0)*x1282*x1287)));
evalcond[2]=((-0.1447058823)+x1285+x1284+(((0.9)*x1283))+(((-1.0)*x1287)));
evalcond[3]=((-0.889941176495)+(((-0.15)*x1285))+(((-0.135)*x1283))+(((-0.5535)*x1286))+(((1.30235294117647)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*(pz*pz)))+(((10000000000.0)*(px*px))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1288=IKcos(j1);
IkReal x1289=IKsin(j1);
IkReal x1290=((0.211764705882353)*pz);
IkReal x1291=(px*x1289);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1292=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1293=((0.09)*x1292);
evalcond[0]=((((0.9)*x1288))+(((-1.0)*px*x1288)));
evalcond[1]=((((-1.0)*x1288*x1293))+(((-0.1447058823)*x1288))+((x1288*x1290)));
evalcond[2]=((-0.1447058823)+x1290+(((-1.0)*x1293))+(((0.9)*x1289))+(((-1.0)*x1291)));
evalcond[3]=((-0.889941176495)+(((-0.135)*x1289))+(((1.30235294117647)*pz))+(((0.15)*x1291))+(((-0.5535)*x1292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1294=((10000000000.0)*pp);
IkReal x1295=(cj0*py);
IkReal x1296=(px*sj0);
IkReal x1297=((14000000000.0)*pz);
CheckValue<IkReal> x1298=IKPowWithIntegerCheck(((((-1.0)*py*sj0))+(((-1.0)*cj0*px))),-1);
if(!x1298.valid){
continue;
}
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
if( IKabs(((-4865000000.08333)+x1294+(((-1.0)*x1297)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1298.value)*(((4378500000.21971)+((x1296*x1297))+((x1294*x1295))+(((0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((12599999999.7882)*pz))+(((-1.0)*x1295*x1297))+(((4865000000.08333)*x1296))+(((-4865000000.08333)*x1295))+(((-1.0)*x1294*x1296))+(((-9000000000.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4865000000.08333)+x1294+(((-1.0)*x1297))))+IKsqr(((x1298.value)*(((4378500000.21971)+((x1296*x1297))+((x1294*x1295))+(((0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((12599999999.7882)*pz))+(((-1.0)*x1295*x1297))+(((4865000000.08333)*x1296))+(((-4865000000.08333)*x1295))+(((-1.0)*x1294*x1296))+(((-9000000000.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-4865000000.08333)+x1294+(((-1.0)*x1297))), ((x1298.value)*(((4378500000.21971)+((x1296*x1297))+((x1294*x1295))+(((0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((12599999999.7882)*pz))+(((-1.0)*x1295*x1297))+(((4865000000.08333)*x1296))+(((-4865000000.08333)*x1295))+(((-1.0)*x1294*x1296))+(((-9000000000.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1299=IKsin(j1);
IkReal x1300=IKcos(j1);
IkReal x1301=((0.15)*py);
IkReal x1302=((0.211764705882353)*pz);
IkReal x1303=((1.0)*py);
IkReal x1304=(sj0*x1300);
IkReal x1305=(cj0*x1299);
IkReal x1306=(sj0*x1299);
IkReal x1307=(cj0*px*x1300);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1308=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1309=((0.09)*x1308);
evalcond[0]=((0.270277777782407)+(((0.777777777777778)*pz))+(((-0.555555555555556)*pp))+(((5.55555555555556e-11)*x1299)));
evalcond[1]=(((px*x1304))+((px*x1305))+((py*x1306))+(((0.9)*x1300))+(((-1.0)*cj0*x1300*x1303)));
evalcond[2]=((((-1.0)*sj0*x1303))+((x1300*x1302))+(((-1.0)*x1300*x1309))+(((-0.1447058823)*x1300))+(((-1.0)*cj0*px)));
evalcond[3]=((-0.1447058823)+x1302+((px*x1306))+(((-1.0)*x1307))+(((-1.0)*x1309))+(((-1.0)*x1303*x1304))+(((-1.0)*x1303*x1305))+(((0.9)*x1299)));
evalcond[4]=((-0.889941176495)+(((-0.15)*px*x1306))+(((-0.5535)*x1308))+(((0.15)*x1307))+(((1.30235294117647)*pz))+(((-0.135)*x1299))+((x1301*x1305))+((x1301*x1304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1310=(cj0*px);
IkReal x1311=((10000000000.0)*pp);
IkReal x1312=(py*sj0);
IkReal x1313=((14000000000.0)*pz);
CheckValue<IkReal> x1314=IKPowWithIntegerCheck(((0.9)+((px*sj0))+(((-1.0)*cj0*py))),-1);
if(!x1314.valid){
continue;
}
if( IKabs(((-4865000000.08333)+x1311+(((-1.0)*x1313)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1314.value)*(((((-1.0)*x1311*x1312))+((x1310*x1313))+(((4865000000.08333)*x1310))+(((4865000000.08333)*x1312))+(((-1.0)*x1310*x1311))+((x1312*x1313)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4865000000.08333)+x1311+(((-1.0)*x1313))))+IKsqr(((x1314.value)*(((((-1.0)*x1311*x1312))+((x1310*x1313))+(((4865000000.08333)*x1310))+(((4865000000.08333)*x1312))+(((-1.0)*x1310*x1311))+((x1312*x1313))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-4865000000.08333)+x1311+(((-1.0)*x1313))), ((x1314.value)*(((((-1.0)*x1311*x1312))+((x1310*x1313))+(((4865000000.08333)*x1310))+(((4865000000.08333)*x1312))+(((-1.0)*x1310*x1311))+((x1312*x1313))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1315=IKsin(j1);
IkReal x1316=IKcos(j1);
IkReal x1317=((0.15)*py);
IkReal x1318=((0.211764705882353)*pz);
IkReal x1319=((1.0)*py);
IkReal x1320=(sj0*x1316);
IkReal x1321=(cj0*x1315);
IkReal x1322=(sj0*x1315);
IkReal x1323=(cj0*px*x1316);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1324=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1325=((0.09)*x1324);
evalcond[0]=((0.270277777782407)+(((0.777777777777778)*pz))+(((-0.555555555555556)*pp))+(((5.55555555555556e-11)*x1315)));
evalcond[1]=((((-1.0)*cj0*x1316*x1319))+((py*x1322))+((px*x1320))+((px*x1321))+(((0.9)*x1316)));
evalcond[2]=(((x1316*x1318))+(((-1.0)*sj0*x1319))+(((-0.1447058823)*x1316))+(((-1.0)*x1316*x1325))+(((-1.0)*cj0*px)));
evalcond[3]=((-0.1447058823)+x1318+(((-1.0)*x1319*x1321))+(((-1.0)*x1319*x1320))+(((-1.0)*x1325))+((px*x1322))+(((-1.0)*x1323))+(((0.9)*x1315)));
evalcond[4]=((-0.889941176495)+(((-0.15)*px*x1322))+(((-0.135)*x1315))+(((-0.5535)*x1324))+(((1.30235294117647)*pz))+(((0.15)*x1323))+((x1317*x1320))+((x1317*x1321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x1326=IKPowWithIntegerCheck(((-0.1447058823)+(((-0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((0.211764705882353)*pz))),-1);
if(!x1326.valid){
continue;
}
if( IKabs(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1326.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp))))+IKsqr(((x1326.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp))), ((x1326.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1327=IKsin(j1);
IkReal x1328=IKcos(j1);
IkReal x1329=((0.15)*py);
IkReal x1330=((0.211764705882353)*pz);
IkReal x1331=((1.0)*py);
IkReal x1332=(sj0*x1328);
IkReal x1333=(cj0*x1327);
IkReal x1334=(sj0*x1327);
IkReal x1335=(cj0*px*x1328);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1336=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1337=((0.09)*x1336);
evalcond[0]=((0.270277777782407)+(((0.777777777777778)*pz))+(((-0.555555555555556)*pp))+(((5.55555555555556e-11)*x1327)));
evalcond[1]=(((px*x1332))+((px*x1333))+((py*x1334))+(((0.9)*x1328))+(((-1.0)*cj0*x1328*x1331)));
evalcond[2]=((((-1.0)*x1328*x1337))+(((-0.1447058823)*x1328))+((x1328*x1330))+(((-1.0)*sj0*x1331))+(((-1.0)*cj0*px)));
evalcond[3]=((-0.1447058823)+x1330+((px*x1334))+(((-1.0)*x1335))+(((0.9)*x1327))+(((-1.0)*x1331*x1332))+(((-1.0)*x1331*x1333))+(((-1.0)*x1337)));
evalcond[4]=((-0.889941176495)+((x1329*x1332))+((x1329*x1333))+(((-0.5535)*x1336))+(((-0.135)*x1327))+(((0.15)*x1335))+(((1.30235294117647)*pz))+(((-0.15)*px*x1334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst0=((-0.542483660130719)+(((0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.542483660130719)+sj3+(((-0.522875816993464)*pz)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1338=((0.522875816993464)*pz);
IkReal x1339=((-0.54248366)+x1338);
sj2=0;
cj2=1.0;
j2=0;
sj3=x1339;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))))));
if( (x1339) < -1-IKFAST_SINCOS_THRESH || (x1339) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(((-1.0)*(IKasin(x1339)))));
IkReal gconst0=((-0.542483660130719)+x1338);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
j1eval[0]=((-1.60784313666667)+(((2.35294117647059)*pz))+(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1340=((0.522875816993464)*pz);
IkReal x1341=((-0.54248366)+x1340);
sj2=0;
cj2=1.0;
j2=0;
sj3=x1341;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))))));
if( (x1341) < -1-IKFAST_SINCOS_THRESH || (x1341) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(((-1.0)*(IKasin(x1341)))));
IkReal gconst0=((-0.542483660130719)+x1340);
j1eval[0]=((1.0)+(((-1.11111111111111)*cj0*py))+(((1.11111111111111)*px*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1342=((0.522875816993464)*pz);
IkReal x1343=((-0.54248366)+x1342);
sj2=0;
cj2=1.0;
j2=0;
sj3=x1343;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))))));
if( (x1343) < -1-IKFAST_SINCOS_THRESH || (x1343) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(((-1.0)*(IKasin(x1343)))));
IkReal gconst0=((-0.542483660130719)+x1342);
j1eval[0]=((((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1344=IKsin(j1);
IkReal x1345=IKcos(j1);
IkReal x1346=((0.211764705882353)*pz);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1347=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1348=((0.09)*x1347);
evalcond[0]=((0.9)*x1345);
evalcond[1]=((-0.1447058823)+x1348+x1346+(((0.9)*x1344)));
evalcond[2]=((-0.889941176495)+(((0.5535)*x1347))+(((1.30235294117647)*pz))+(((-0.135)*x1344)));
evalcond[3]=(((x1345*x1346))+((x1345*x1348))+(((-0.1447058823)*x1345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*(py*py)))+(((10000000000.0)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1349=IKcos(j1);
IkReal x1350=IKsin(j1);
IkReal x1351=((0.211764705882353)*pz);
IkReal x1352=(py*x1350);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1353=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1354=((0.09)*x1353);
evalcond[0]=((((-1.0)*py*x1349))+(((0.9)*x1349)));
evalcond[1]=((((-0.1447058823)*x1349))+((x1349*x1354))+((x1349*x1351)));
evalcond[2]=((-0.1447058823)+x1351+x1354+(((-1.0)*x1352))+(((0.9)*x1350)));
evalcond[3]=((-0.889941176495)+(((0.5535)*x1353))+(((0.15)*x1352))+(((-0.135)*x1350))+(((1.30235294117647)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*(py*py)))+(((10000000000.0)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1355=IKcos(j1);
IkReal x1356=IKsin(j1);
IkReal x1357=((0.211764705882353)*pz);
IkReal x1358=(py*x1356);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1359=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1360=((0.09)*x1359);
evalcond[0]=((((0.9)*x1355))+((py*x1355)));
evalcond[1]=(((x1355*x1360))+((x1355*x1357))+(((-0.1447058823)*x1355)));
evalcond[2]=((-0.1447058823)+x1358+x1357+x1360+(((0.9)*x1356)));
evalcond[3]=((-0.889941176495)+(((-0.15)*x1358))+(((0.5535)*x1359))+(((-0.135)*x1356))+(((1.30235294117647)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*(pz*pz)))+(((10000000000.0)*(px*px))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1361=IKcos(j1);
IkReal x1362=IKsin(j1);
IkReal x1363=((0.211764705882353)*pz);
IkReal x1364=(px*x1362);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1365=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1366=((0.09)*x1365);
evalcond[0]=((((0.9)*x1361))+((px*x1361)));
evalcond[1]=(((x1361*x1363))+((x1361*x1366))+(((-0.1447058823)*x1361)));
evalcond[2]=((-0.1447058823)+x1366+x1364+x1363+(((0.9)*x1362)));
evalcond[3]=((-0.889941176495)+(((0.5535)*x1365))+(((-0.135)*x1362))+(((1.30235294117647)*pz))+(((-0.15)*x1364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*(pz*pz)))+(((10000000000.0)*(px*px))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1367=IKcos(j1);
IkReal x1368=IKsin(j1);
IkReal x1369=((0.211764705882353)*pz);
IkReal x1370=(px*x1368);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1371=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1372=((0.09)*x1371);
evalcond[0]=((((0.9)*x1367))+(((-1.0)*px*x1367)));
evalcond[1]=(((x1367*x1369))+(((-0.1447058823)*x1367))+((x1367*x1372)));
evalcond[2]=((-0.1447058823)+x1369+x1372+(((0.9)*x1368))+(((-1.0)*x1370)));
evalcond[3]=((-0.889941176495)+(((0.5535)*x1371))+(((-0.135)*x1368))+(((0.15)*x1370))+(((1.30235294117647)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1373=((10000000000.0)*pp);
IkReal x1374=(cj0*py);
IkReal x1375=(px*sj0);
IkReal x1376=((14000000000.0)*pz);
CheckValue<IkReal> x1377=IKPowWithIntegerCheck(((((-1.0)*py*sj0))+(((-1.0)*cj0*px))),-1);
if(!x1377.valid){
continue;
}
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
if( IKabs(((-4865000000.08333)+x1373+(((-1.0)*x1376)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1377.value)*(((4378500000.21971)+(((-4865000000.08333)*x1374))+((x1375*x1376))+(((4865000000.08333)*x1375))+(((12599999999.7882)*pz))+(((-1.0)*x1374*x1376))+(((-0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((-1.0)*x1373*x1375))+(((-9000000000.0)*pp))+((x1373*x1374)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4865000000.08333)+x1373+(((-1.0)*x1376))))+IKsqr(((x1377.value)*(((4378500000.21971)+(((-4865000000.08333)*x1374))+((x1375*x1376))+(((4865000000.08333)*x1375))+(((12599999999.7882)*pz))+(((-1.0)*x1374*x1376))+(((-0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((-1.0)*x1373*x1375))+(((-9000000000.0)*pp))+((x1373*x1374))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-4865000000.08333)+x1373+(((-1.0)*x1376))), ((x1377.value)*(((4378500000.21971)+(((-4865000000.08333)*x1374))+((x1375*x1376))+(((4865000000.08333)*x1375))+(((12599999999.7882)*pz))+(((-1.0)*x1374*x1376))+(((-0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((-1.0)*x1373*x1375))+(((-9000000000.0)*pp))+((x1373*x1374))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1378=IKsin(j1);
IkReal x1379=IKcos(j1);
IkReal x1380=((0.15)*py);
IkReal x1381=((0.211764705882353)*pz);
IkReal x1382=((1.0)*py);
IkReal x1383=(sj0*x1379);
IkReal x1384=(cj0*x1378);
IkReal x1385=(sj0*x1378);
IkReal x1386=(cj0*px*x1379);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1387=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1388=((0.09)*x1387);
evalcond[0]=((0.270277777782407)+(((0.777777777777778)*pz))+(((-0.555555555555556)*pp))+(((5.55555555555556e-11)*x1378)));
evalcond[1]=((((0.9)*x1379))+(((-1.0)*cj0*x1379*x1382))+((py*x1385))+((px*x1384))+((px*x1383)));
evalcond[2]=((((-0.1447058823)*x1379))+((x1379*x1381))+((x1379*x1388))+(((-1.0)*sj0*x1382))+(((-1.0)*cj0*px)));
evalcond[3]=((-0.1447058823)+x1388+x1381+(((0.9)*x1378))+(((-1.0)*x1382*x1383))+(((-1.0)*x1382*x1384))+(((-1.0)*x1386))+((px*x1385)));
evalcond[4]=((-0.889941176495)+(((0.5535)*x1387))+((x1380*x1384))+((x1380*x1383))+(((-0.135)*x1378))+(((-0.15)*px*x1385))+(((1.30235294117647)*pz))+(((0.15)*x1386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1389=(cj0*px);
IkReal x1390=((10000000000.0)*pp);
IkReal x1391=(py*sj0);
IkReal x1392=((14000000000.0)*pz);
CheckValue<IkReal> x1393=IKPowWithIntegerCheck(((0.9)+((px*sj0))+(((-1.0)*cj0*py))),-1);
if(!x1393.valid){
continue;
}
if( IKabs(((-4865000000.08333)+x1390+(((-1.0)*x1392)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1393.value)*(((((-1.0)*x1389*x1390))+(((4865000000.08333)*x1391))+(((-1.0)*x1390*x1391))+(((4865000000.08333)*x1389))+((x1389*x1392))+((x1391*x1392)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4865000000.08333)+x1390+(((-1.0)*x1392))))+IKsqr(((x1393.value)*(((((-1.0)*x1389*x1390))+(((4865000000.08333)*x1391))+(((-1.0)*x1390*x1391))+(((4865000000.08333)*x1389))+((x1389*x1392))+((x1391*x1392))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-4865000000.08333)+x1390+(((-1.0)*x1392))), ((x1393.value)*(((((-1.0)*x1389*x1390))+(((4865000000.08333)*x1391))+(((-1.0)*x1390*x1391))+(((4865000000.08333)*x1389))+((x1389*x1392))+((x1391*x1392))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1394=IKsin(j1);
IkReal x1395=IKcos(j1);
IkReal x1396=((0.15)*py);
IkReal x1397=((0.211764705882353)*pz);
IkReal x1398=((1.0)*py);
IkReal x1399=(sj0*x1395);
IkReal x1400=(cj0*x1394);
IkReal x1401=(sj0*x1394);
IkReal x1402=(cj0*px*x1395);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1403=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1404=((0.09)*x1403);
evalcond[0]=((0.270277777782407)+(((0.777777777777778)*pz))+(((-0.555555555555556)*pp))+(((5.55555555555556e-11)*x1394)));
evalcond[1]=((((-1.0)*cj0*x1395*x1398))+((px*x1399))+(((0.9)*x1395))+((px*x1400))+((py*x1401)));
evalcond[2]=((((-0.1447058823)*x1395))+((x1395*x1404))+((x1395*x1397))+(((-1.0)*sj0*x1398))+(((-1.0)*cj0*px)));
evalcond[3]=((-0.1447058823)+x1397+(((-1.0)*x1402))+(((0.9)*x1394))+((px*x1401))+(((-1.0)*x1398*x1400))+x1404+(((-1.0)*x1398*x1399)));
evalcond[4]=((-0.889941176495)+((x1396*x1400))+(((-0.15)*px*x1401))+((x1396*x1399))+(((1.30235294117647)*pz))+(((-0.135)*x1394))+(((0.15)*x1402))+(((0.5535)*x1403)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x1405=IKPowWithIntegerCheck(((-0.1447058823)+(((0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((0.211764705882353)*pz))),-1);
if(!x1405.valid){
continue;
}
if( IKabs(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1405.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp))))+IKsqr(((x1405.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp))), ((x1405.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1406=IKsin(j1);
IkReal x1407=IKcos(j1);
IkReal x1408=((0.15)*py);
IkReal x1409=((0.211764705882353)*pz);
IkReal x1410=((1.0)*py);
IkReal x1411=(sj0*x1407);
IkReal x1412=(cj0*x1406);
IkReal x1413=(sj0*x1406);
IkReal x1414=(cj0*px*x1407);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1415=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1416=((0.09)*x1415);
evalcond[0]=((0.270277777782407)+(((0.777777777777778)*pz))+(((-0.555555555555556)*pp))+(((5.55555555555556e-11)*x1406)));
evalcond[1]=(((py*x1413))+(((-1.0)*cj0*x1407*x1410))+((px*x1411))+((px*x1412))+(((0.9)*x1407)));
evalcond[2]=(((x1407*x1416))+(((-1.0)*sj0*x1410))+(((-1.0)*cj0*px))+(((-0.1447058823)*x1407))+((x1407*x1409)));
evalcond[3]=((-0.1447058823)+((px*x1413))+(((-1.0)*x1410*x1411))+(((-1.0)*x1410*x1412))+x1416+x1409+(((0.9)*x1406))+(((-1.0)*x1414)));
evalcond[4]=((-0.889941176495)+(((1.30235294117647)*pz))+(((-0.15)*px*x1413))+(((0.15)*x1414))+(((-0.135)*x1406))+(((0.5535)*x1415))+((x1408*x1411))+((x1408*x1412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1417=cj0*cj0;
IkReal x1418=py*py;
IkReal x1419=(cj0*px);
IkReal x1420=(px*sj0);
IkReal x1421=((0.09)*cj3);
IkReal x1422=(cj0*py);
IkReal x1423=(py*sj0);
IkReal x1424=((0.405)*sj3);
CheckValue<IkReal> x1425=IKPowWithIntegerCheck(((0.0675)+((x1420*x1424))+(((0.3645)*sj3))+(((-1.0)*x1420*x1421))+(((0.075)*x1420))+(((-0.081)*cj3))+(((-0.075)*x1422))+(((-1.0)*x1422*x1424))+((x1421*x1422))),-1);
if(!x1425.valid){
continue;
}
CheckValue<IkReal> x1426=IKPowWithIntegerCheck(((0.075)+x1424+(((-1.0)*x1421))),-1);
if(!x1426.valid){
continue;
}
if( IKabs(((x1425.value)*(((-0.16965)+(((0.155925)*(cj3*cj3)))+(((2.0)*x1419*x1423))+x1418+(((0.0135)*cj3))+(((-0.06075)*sj3))+((x1417*(px*px)))+(((-1.0)*x1417*x1418))+(((0.0729)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1426.value)*((x1423+x1419)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1425.value)*(((-0.16965)+(((0.155925)*(cj3*cj3)))+(((2.0)*x1419*x1423))+x1418+(((0.0135)*cj3))+(((-0.06075)*sj3))+((x1417*(px*px)))+(((-1.0)*x1417*x1418))+(((0.0729)*cj3*sj3))))))+IKsqr(((x1426.value)*((x1423+x1419))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1425.value)*(((-0.16965)+(((0.155925)*(cj3*cj3)))+(((2.0)*x1419*x1423))+x1418+(((0.0135)*cj3))+(((-0.06075)*sj3))+((x1417*(px*px)))+(((-1.0)*x1417*x1418))+(((0.0729)*cj3*sj3))))), ((x1426.value)*((x1423+x1419))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1427=IKcos(j1);
IkReal x1428=IKsin(j1);
IkReal x1429=((0.15)*py);
IkReal x1430=((0.09)*cj3);
IkReal x1431=(px*sj0);
IkReal x1432=(py*sj0);
IkReal x1433=((1.0)*py);
IkReal x1434=((0.405)*sj3);
IkReal x1435=(sj0*x1427);
IkReal x1436=(cj0*x1428);
IkReal x1437=(cj0*px*x1427);
evalcond[0]=((((-1.0)*x1432))+((x1427*x1434))+(((0.075)*x1427))+(((-1.0)*x1427*x1430))+(((-1.0)*cj0*px)));
evalcond[1]=((0.289490740740741)+(((-0.555555555555556)*pp))+(((0.0354166666666667)*sj3))+(((0.230555555555556)*x1428))+(((-0.222222222222222)*pz*x1428))+(((0.759259259259259)*pz))+(((0.425)*sj3*x1428)));
evalcond[2]=(((x1428*x1432))+((px*x1436))+(((-1.0)*cj0*x1427*x1433))+((x1427*x1431))+(((0.9)*x1427)));
evalcond[3]=((0.075)+((x1428*x1431))+(((-1.0)*x1437))+(((-1.0)*x1430))+(((0.9)*x1428))+x1434+(((-1.0)*x1427*x1432))+(((-1.0)*x1433*x1436)));
evalcond[4]=((-1.1335)+((x1429*x1436))+((x1429*x1435))+(((1.8)*cj0*py))+(((-0.135)*x1428))+(((-1.8)*x1431))+(((-0.15)*x1428*x1431))+(((-1.0)*pp))+(((0.15)*x1437))+(((1.4)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1438=(cj0*px);
IkReal x1439=(py*sj0);
IkReal x1440=((0.09)*cj3);
IkReal x1441=(cj0*sj0);
IkReal x1442=((0.405)*sj3);
IkReal x1443=(px*py);
CheckValue<IkReal> x1444=IKPowWithIntegerCheck(((((0.075)*x1439))+(((0.075)*x1438))+((x1438*x1442))+((x1439*x1442))+(((-1.0)*x1438*x1440))+(((-1.0)*x1439*x1440))),-1);
if(!x1444.valid){
continue;
}
CheckValue<IkReal> x1445=IKPowWithIntegerCheck(((0.075)+x1442+(((-1.0)*x1440))),-1);
if(!x1445.valid){
continue;
}
if( IKabs(((x1444.value)*(((((-0.9)*x1439))+(((-0.9)*x1438))+(((2.0)*cj0*py*x1438))+(((-1.0)*x1443))+(((-1.0)*px*sj0*x1438))+((cj0*py*x1439)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1445.value)*((x1438+x1439)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1444.value)*(((((-0.9)*x1439))+(((-0.9)*x1438))+(((2.0)*cj0*py*x1438))+(((-1.0)*x1443))+(((-1.0)*px*sj0*x1438))+((cj0*py*x1439))))))+IKsqr(((x1445.value)*((x1438+x1439))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1444.value)*(((((-0.9)*x1439))+(((-0.9)*x1438))+(((2.0)*cj0*py*x1438))+(((-1.0)*x1443))+(((-1.0)*px*sj0*x1438))+((cj0*py*x1439))))), ((x1445.value)*((x1438+x1439))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1446=IKcos(j1);
IkReal x1447=IKsin(j1);
IkReal x1448=((0.15)*py);
IkReal x1449=((0.09)*cj3);
IkReal x1450=(px*sj0);
IkReal x1451=(py*sj0);
IkReal x1452=((1.0)*py);
IkReal x1453=((0.405)*sj3);
IkReal x1454=(sj0*x1446);
IkReal x1455=(cj0*x1447);
IkReal x1456=(cj0*px*x1446);
evalcond[0]=((((-1.0)*x1446*x1449))+((x1446*x1453))+(((-1.0)*x1451))+(((0.075)*x1446))+(((-1.0)*cj0*px)));
evalcond[1]=((0.289490740740741)+(((-0.555555555555556)*pp))+(((-0.222222222222222)*pz*x1447))+(((0.0354166666666667)*sj3))+(((0.425)*sj3*x1447))+(((0.230555555555556)*x1447))+(((0.759259259259259)*pz)));
evalcond[2]=(((x1446*x1450))+(((0.9)*x1446))+(((-1.0)*cj0*x1446*x1452))+((x1447*x1451))+((px*x1455)));
evalcond[3]=((0.075)+(((0.9)*x1447))+((x1447*x1450))+(((-1.0)*x1456))+x1453+(((-1.0)*x1449))+(((-1.0)*x1452*x1455))+(((-1.0)*x1446*x1451)));
evalcond[4]=((-1.1335)+(((-0.15)*x1447*x1450))+(((-1.8)*x1450))+(((1.8)*cj0*py))+((x1448*x1455))+((x1448*x1454))+(((-0.135)*x1447))+(((-1.0)*pp))+(((1.4)*pz))+(((0.15)*x1456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1457=IKPowWithIntegerCheck(((0.230555555555556)+(((-0.222222222222222)*pz))+(((0.425)*sj3))),-1);
if(!x1457.valid){
continue;
}
CheckValue<IkReal> x1458=IKPowWithIntegerCheck(((0.075)+(((0.405)*sj3))+(((-0.09)*cj3))),-1);
if(!x1458.valid){
continue;
}
if( IKabs(((x1457.value)*(((-0.289490740740741)+(((-0.0354166666666667)*sj3))+(((-0.759259259259259)*pz))+(((0.555555555555556)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1458.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1457.value)*(((-0.289490740740741)+(((-0.0354166666666667)*sj3))+(((-0.759259259259259)*pz))+(((0.555555555555556)*pp))))))+IKsqr(((x1458.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1457.value)*(((-0.289490740740741)+(((-0.0354166666666667)*sj3))+(((-0.759259259259259)*pz))+(((0.555555555555556)*pp))))), ((x1458.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1459=IKcos(j1);
IkReal x1460=IKsin(j1);
IkReal x1461=((0.15)*py);
IkReal x1462=((0.09)*cj3);
IkReal x1463=(px*sj0);
IkReal x1464=(py*sj0);
IkReal x1465=((1.0)*py);
IkReal x1466=((0.405)*sj3);
IkReal x1467=(sj0*x1459);
IkReal x1468=(cj0*x1460);
IkReal x1469=(cj0*px*x1459);
evalcond[0]=((((-1.0)*x1459*x1462))+((x1459*x1466))+(((-1.0)*x1464))+(((0.075)*x1459))+(((-1.0)*cj0*px)));
evalcond[1]=((0.289490740740741)+(((-0.555555555555556)*pp))+(((0.230555555555556)*x1460))+(((0.425)*sj3*x1460))+(((0.0354166666666667)*sj3))+(((-0.222222222222222)*pz*x1460))+(((0.759259259259259)*pz)));
evalcond[2]=((((0.9)*x1459))+((x1459*x1463))+((px*x1468))+(((-1.0)*cj0*x1459*x1465))+((x1460*x1464)));
evalcond[3]=((0.075)+(((-1.0)*x1462))+((x1460*x1463))+x1466+(((0.9)*x1460))+(((-1.0)*x1465*x1468))+(((-1.0)*x1469))+(((-1.0)*x1459*x1464)));
evalcond[4]=((-1.1335)+(((-1.8)*x1463))+(((1.8)*cj0*py))+((x1461*x1468))+((x1461*x1467))+(((-1.0)*pp))+(((0.15)*x1469))+(((1.4)*pz))+(((-0.15)*x1460*x1463))+(((-0.135)*x1460)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=((1.0)+(((-3.2520325203252)*pz))+(((-6.21951219512195)*sj3)));
j1eval[1]=((1.0)+(((1.2)*cj3))+(((-5.4)*sj3)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1470=(cj0*px);
IkReal x1471=((1.2)*cj3);
IkReal x1472=(py*sj0);
IkReal x1473=((5.4)*sj3);
j1eval[0]=(((x1471*x1472))+(((-1.0)*x1470*x1473))+((x1470*x1471))+x1472+x1470+(((-1.0)*x1472*x1473)));
j1eval[1]=((1.0)+x1471+(((-1.0)*x1473)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x1474=((6.21951219512195)*sj3);
IkReal x1475=((3.2520325203252)*pz);
IkReal x1476=((6.91056910569106)*sj3);
IkReal x1477=(px*sj0);
IkReal x1478=(cj0*py);
IkReal x1479=((3.613369467028)*pz);
IkReal x1480=(x1474+x1475);
j1eval[0]=((1.0)+(((-1.0)*x1480)));
j1eval[1]=((1.0)+((x1478*x1479))+(((-1.0)*x1480))+(((-1.0)*x1476*x1477))+(((-1.0)*x1477*x1479))+(((1.11111111111111)*x1477))+(((-1.11111111111111)*x1478))+((x1476*x1478)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal gconst1=((0.16078431372549)+(((-0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.16078431372549)+sj3+(((0.522875816993464)*pz)))))+(IKabs(((-1.0)+(IKsign(cj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1481=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x1481)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
if( (((-0.160784313599385)+x1481)) < -1-IKFAST_SINCOS_THRESH || (((-0.160784313599385)+x1481)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((-1.0)*(IKasin(((-0.160784313599385)+x1481))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x1481)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
j1eval[0]=((1.0)+(((21.4285713178271)*pz))+(((9.10714281007653)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1482=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x1482)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
if( (((-0.160784313599385)+x1482)) < -1-IKFAST_SINCOS_THRESH || (((-0.160784313599385)+x1482)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((-1.0)*(IKasin(((-0.160784313599385)+x1482))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x1482)));
j1eval[0]=((1.0)+(((-1.11111111111111)*cj0*py))+(((1.11111111111111)*px*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1483=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x1483)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
if( (((-0.160784313599385)+x1483)) < -1-IKFAST_SINCOS_THRESH || (((-0.160784313599385)+x1483)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((-1.0)*(IKasin(((-0.160784313599385)+x1483))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x1483)));
j1eval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1484=IKsin(j1);
IkReal x1485=IKcos(j1);
IkReal x1486=((0.211764705882353)*pz);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1487=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1488=((0.09)*x1487);
evalcond[0]=((0.9)*x1485);
evalcond[1]=((-0.00988235299224913)+(((-1.0)*x1486))+(((-1.0)*x1488))+(((-0.9)*x1484)));
evalcond[2]=((-0.00415058824227405)+(((-0.0889411764705882)*pz))+(((-0.135)*x1484))+(((-0.0378)*x1487)));
evalcond[3]=((((0.00988235299224913)*x1485))+((x1485*x1486))+((x1485*x1488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*(py*py)))+(((10365853666.6667)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1489=IKcos(j1);
IkReal x1490=IKsin(j1);
IkReal x1491=((0.211764705882353)*pz);
IkReal x1492=(py*x1490);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1493=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1494=((0.09)*x1493);
evalcond[0]=((((0.9)*x1489))+(((-1.0)*py*x1489)));
evalcond[1]=((((0.00988235299224913)*x1489))+((x1489*x1491))+((x1489*x1494)));
evalcond[2]=((-0.00988235299224913)+(((-1.0)*x1491))+(((-1.0)*x1494))+x1492+(((-0.9)*x1490)));
evalcond[3]=((-0.00415058824227405)+(((0.15)*x1492))+(((-0.0889411764705882)*pz))+(((-0.0378)*x1493))+(((-0.135)*x1490)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*(py*py)))+(((10365853666.6667)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1495=IKcos(j1);
IkReal x1496=IKsin(j1);
IkReal x1497=((0.211764705882353)*pz);
IkReal x1498=(py*x1496);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1499=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1500=((0.09)*x1499);
evalcond[0]=(((py*x1495))+(((0.9)*x1495)));
evalcond[1]=((((0.00988235299224913)*x1495))+((x1495*x1497))+((x1495*x1500)));
evalcond[2]=((-0.00988235299224913)+(((-1.0)*x1500))+(((-1.0)*x1497))+(((-1.0)*x1498))+(((-0.9)*x1496)));
evalcond[3]=((-0.00415058824227405)+(((-0.0889411764705882)*pz))+(((-0.0378)*x1499))+(((-0.135)*x1496))+(((-0.15)*x1498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*(pz*pz)))+(((10365853666.6667)*(px*px))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1501=IKcos(j1);
IkReal x1502=IKsin(j1);
IkReal x1503=((0.211764705882353)*pz);
IkReal x1504=(px*x1502);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1505=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1506=((0.09)*x1505);
evalcond[0]=((((0.9)*x1501))+((px*x1501)));
evalcond[1]=(((x1501*x1506))+((x1501*x1503))+(((0.00988235299224913)*x1501)));
evalcond[2]=((-0.00988235299224913)+(((-1.0)*x1503))+(((-1.0)*x1506))+(((-0.9)*x1502))+(((-1.0)*x1504)));
evalcond[3]=((-0.00415058824227405)+(((-0.0889411764705882)*pz))+(((-0.0378)*x1505))+(((-0.15)*x1504))+(((-0.135)*x1502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*(pz*pz)))+(((10365853666.6667)*(px*px))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1507=IKcos(j1);
IkReal x1508=IKsin(j1);
IkReal x1509=((0.211764705882353)*pz);
IkReal x1510=(px*x1508);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1511=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1512=((0.09)*x1511);
evalcond[0]=((((-1.0)*px*x1507))+(((0.9)*x1507)));
evalcond[1]=(((x1507*x1512))+((x1507*x1509))+(((0.00988235299224913)*x1507)));
evalcond[2]=((-0.00988235299224913)+(((-1.0)*x1509))+(((-0.9)*x1508))+(((-1.0)*x1512))+x1510);
evalcond[3]=((-0.00415058824227405)+(((-0.0889411764705882)*pz))+(((0.15)*x1510))+(((-0.0378)*x1511))+(((-0.135)*x1508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1513=((621951220.0)*pz);
IkReal x1514=(px*sj0);
IkReal x1515=((10365853666.6667)*pp);
IkReal x1516=(cj0*py);
CheckValue<IkReal> x1517=IKPowWithIntegerCheck((((cj0*px))+((py*sj0))),-1);
if(!x1517.valid){
continue;
}
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
if( IKabs(((-10112926837.2833)+x1515+x1513)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1517.value)*(((-9101634153.54512)+((x1513*x1514))+(((-1.0)*x1515*x1516))+((x1514*x1515))+(((-1.0)*x1513*x1516))+(((9329268300.0)*pp))+(((-10112926837.2833)*x1514))+(((0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((559756098.211765)*pz))+(((10112926837.2833)*x1516)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-10112926837.2833)+x1515+x1513))+IKsqr(((x1517.value)*(((-9101634153.54512)+((x1513*x1514))+(((-1.0)*x1515*x1516))+((x1514*x1515))+(((-1.0)*x1513*x1516))+(((9329268300.0)*pp))+(((-10112926837.2833)*x1514))+(((0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((559756098.211765)*pz))+(((10112926837.2833)*x1516))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-10112926837.2833)+x1515+x1513), ((x1517.value)*(((-9101634153.54512)+((x1513*x1514))+(((-1.0)*x1515*x1516))+((x1514*x1515))+(((-1.0)*x1513*x1516))+(((9329268300.0)*pp))+(((-10112926837.2833)*x1514))+(((0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((559756098.211765)*pz))+(((10112926837.2833)*x1516))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1518=IKsin(j1);
IkReal x1519=IKcos(j1);
IkReal x1520=((0.15)*py);
IkReal x1521=((0.15)*px);
IkReal x1522=((0.211764705882353)*pz);
IkReal x1523=((1.0)*py);
IkReal x1524=((1.0)*px);
IkReal x1525=(sj0*x1519);
IkReal x1526=(cj0*x1518);
IkReal x1527=(sj0*x1518);
IkReal x1528=(cj0*x1519);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1529=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1530=((0.09)*x1529);
evalcond[0]=((0.542000000004466)+(((-0.555555555555556)*pp))+(((-0.0333333333333333)*pz))+(((5.3594771199795e-11)*x1518)));
evalcond[1]=(((px*x1525))+((px*x1526))+(((0.9)*x1519))+(((-1.0)*x1523*x1528))+((py*x1527)));
evalcond[2]=(((x1519*x1522))+((x1519*x1530))+(((-1.0)*sj0*x1523))+(((-1.0)*cj0*x1524))+(((0.00988235299224913)*x1519)));
evalcond[3]=((-0.00988235299224913)+(((-0.9)*x1518))+(((-1.0)*x1524*x1527))+(((-1.0)*x1530))+(((-1.0)*x1522))+((px*x1528))+((py*x1525))+((py*x1526)));
evalcond[4]=((-0.00415058824227405)+(((-0.0889411764705882)*pz))+((x1520*x1525))+((x1520*x1526))+(((-0.0378)*x1529))+((x1521*x1528))+(((-0.135)*x1518))+(((-1.0)*x1521*x1527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1531=(cj0*px);
IkReal x1532=(py*sj0);
IkReal x1533=((10365853666.6667)*pp);
IkReal x1534=((621951220.0)*pz);
CheckValue<IkReal> x1535=IKPowWithIntegerCheck(((0.9)+((px*sj0))+(((-1.0)*cj0*py))),-1);
if(!x1535.valid){
continue;
}
if( IKabs(((-10112926837.2833)+x1534+x1533)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1535.value)*(((((-1.0)*x1531*x1533))+(((-1.0)*x1531*x1534))+(((-1.0)*x1532*x1533))+(((-1.0)*x1532*x1534))+(((10112926837.2833)*x1532))+(((10112926837.2833)*x1531)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-10112926837.2833)+x1534+x1533))+IKsqr(((x1535.value)*(((((-1.0)*x1531*x1533))+(((-1.0)*x1531*x1534))+(((-1.0)*x1532*x1533))+(((-1.0)*x1532*x1534))+(((10112926837.2833)*x1532))+(((10112926837.2833)*x1531))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-10112926837.2833)+x1534+x1533), ((x1535.value)*(((((-1.0)*x1531*x1533))+(((-1.0)*x1531*x1534))+(((-1.0)*x1532*x1533))+(((-1.0)*x1532*x1534))+(((10112926837.2833)*x1532))+(((10112926837.2833)*x1531))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1536=IKsin(j1);
IkReal x1537=IKcos(j1);
IkReal x1538=((0.15)*py);
IkReal x1539=((0.15)*px);
IkReal x1540=((0.211764705882353)*pz);
IkReal x1541=((1.0)*py);
IkReal x1542=((1.0)*px);
IkReal x1543=(sj0*x1537);
IkReal x1544=(cj0*x1536);
IkReal x1545=(sj0*x1536);
IkReal x1546=(cj0*x1537);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1547=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1548=((0.09)*x1547);
evalcond[0]=((0.542000000004466)+(((-0.555555555555556)*pp))+(((5.3594771199795e-11)*x1536))+(((-0.0333333333333333)*pz)));
evalcond[1]=((((0.9)*x1537))+((py*x1545))+((px*x1544))+((px*x1543))+(((-1.0)*x1541*x1546)));
evalcond[2]=(((x1537*x1540))+((x1537*x1548))+(((-1.0)*sj0*x1541))+(((0.00988235299224913)*x1537))+(((-1.0)*cj0*x1542)));
evalcond[3]=((-0.00988235299224913)+(((-0.9)*x1536))+((py*x1544))+((py*x1543))+(((-1.0)*x1542*x1545))+((px*x1546))+(((-1.0)*x1540))+(((-1.0)*x1548)));
evalcond[4]=((-0.00415058824227405)+(((-0.135)*x1536))+((x1538*x1543))+((x1538*x1544))+((x1539*x1546))+(((-0.0889411764705882)*pz))+(((-1.0)*x1539*x1545))+(((-0.0378)*x1547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
CheckValue<IkReal> x1549=IKPowWithIntegerCheck(((0.00988235299224913)+(((0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((0.211764705882353)*pz))),-1);
if(!x1549.valid){
continue;
}
if( IKabs(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1549.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp))))+IKsqr(((x1549.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp))), ((x1549.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1550=IKsin(j1);
IkReal x1551=IKcos(j1);
IkReal x1552=((0.15)*py);
IkReal x1553=((0.15)*px);
IkReal x1554=((0.211764705882353)*pz);
IkReal x1555=((1.0)*py);
IkReal x1556=((1.0)*px);
IkReal x1557=(sj0*x1551);
IkReal x1558=(cj0*x1550);
IkReal x1559=(sj0*x1550);
IkReal x1560=(cj0*x1551);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1561=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1562=((0.09)*x1561);
evalcond[0]=((0.542000000004466)+(((-0.555555555555556)*pp))+(((-0.0333333333333333)*pz))+(((5.3594771199795e-11)*x1550)));
evalcond[1]=((((0.9)*x1551))+(((-1.0)*x1555*x1560))+((py*x1559))+((px*x1557))+((px*x1558)));
evalcond[2]=(((x1551*x1554))+(((-1.0)*cj0*x1556))+(((0.00988235299224913)*x1551))+(((-1.0)*sj0*x1555))+((x1551*x1562)));
evalcond[3]=((-0.00988235299224913)+(((-0.9)*x1550))+((px*x1560))+((py*x1557))+((py*x1558))+(((-1.0)*x1556*x1559))+(((-1.0)*x1554))+(((-1.0)*x1562)));
evalcond[4]=((-0.00415058824227405)+((x1552*x1557))+((x1552*x1558))+((x1553*x1560))+(((-0.135)*x1550))+(((-1.0)*x1553*x1559))+(((-0.0889411764705882)*pz))+(((-0.0378)*x1561)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst1=((0.16078431372549)+(((-0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.16078431372549)+sj3+(((0.522875816993464)*pz)))))+(IKabs(((1.0)+(IKsign(cj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1563=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x1563)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))))));
if( (((-0.160784313599385)+x1563)) < -1-IKFAST_SINCOS_THRESH || (((-0.160784313599385)+x1563)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(IKasin(((-0.160784313599385)+x1563))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x1563)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
j1eval[0]=((1.0)+(((-9.10714281007653)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((21.4285713178271)*pz)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1564=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x1564)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))))));
if( (((-0.160784313599385)+x1564)) < -1-IKFAST_SINCOS_THRESH || (((-0.160784313599385)+x1564)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(IKasin(((-0.160784313599385)+x1564))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x1564)));
j1eval[0]=((1.0)+(((-1.11111111111111)*cj0*py))+(((1.11111111111111)*px*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1565=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x1565)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))))));
if( (((-0.160784313599385)+x1565)) < -1-IKFAST_SINCOS_THRESH || (((-0.160784313599385)+x1565)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(IKasin(((-0.160784313599385)+x1565))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x1565)));
j1eval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1566=IKsin(j1);
IkReal x1567=IKcos(j1);
IkReal x1568=((0.211764705882353)*pz);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1569=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1570=((0.09)*x1569);
evalcond[0]=((0.9)*x1567);
evalcond[1]=((-0.00988235299224913)+(((-0.9)*x1566))+x1570+(((-1.0)*x1568)));
evalcond[2]=((-0.00415058824227405)+(((-0.135)*x1566))+(((-0.0889411764705882)*pz))+(((0.0378)*x1569)));
evalcond[3]=(((x1567*x1568))+(((0.00988235299224913)*x1567))+(((-1.0)*x1567*x1570)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*(py*py)))+(((10365853666.6667)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1571=IKcos(j1);
IkReal x1572=IKsin(j1);
IkReal x1573=((0.211764705882353)*pz);
IkReal x1574=(py*x1572);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1575=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1576=((0.09)*x1575);
evalcond[0]=((((0.9)*x1571))+(((-1.0)*py*x1571)));
evalcond[1]=((((0.00988235299224913)*x1571))+((x1571*x1573))+(((-1.0)*x1571*x1576)));
evalcond[2]=((-0.00988235299224913)+(((-0.9)*x1572))+x1576+x1574+(((-1.0)*x1573)));
evalcond[3]=((-0.00415058824227405)+(((-0.135)*x1572))+(((0.15)*x1574))+(((0.0378)*x1575))+(((-0.0889411764705882)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*(py*py)))+(((10365853666.6667)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1577=IKcos(j1);
IkReal x1578=IKsin(j1);
IkReal x1579=((0.211764705882353)*pz);
IkReal x1580=(py*x1578);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1581=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1582=((0.09)*x1581);
evalcond[0]=((((0.9)*x1577))+((py*x1577)));
evalcond[1]=((((0.00988235299224913)*x1577))+(((-1.0)*x1577*x1582))+((x1577*x1579)));
evalcond[2]=((-0.00988235299224913)+(((-0.9)*x1578))+x1582+(((-1.0)*x1580))+(((-1.0)*x1579)));
evalcond[3]=((-0.00415058824227405)+(((-0.135)*x1578))+(((0.0378)*x1581))+(((-0.0889411764705882)*pz))+(((-0.15)*x1580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*(pz*pz)))+(((10365853666.6667)*(px*px))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1583=IKcos(j1);
IkReal x1584=IKsin(j1);
IkReal x1585=((0.211764705882353)*pz);
IkReal x1586=(px*x1584);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1587=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1588=((0.09)*x1587);
evalcond[0]=((((0.9)*x1583))+((px*x1583)));
evalcond[1]=(((x1583*x1585))+(((-1.0)*x1583*x1588))+(((0.00988235299224913)*x1583)));
evalcond[2]=((-0.00988235299224913)+(((-1.0)*x1585))+(((-0.9)*x1584))+x1588+(((-1.0)*x1586)));
evalcond[3]=((-0.00415058824227405)+(((-0.135)*x1584))+(((0.0378)*x1587))+(((-0.0889411764705882)*pz))+(((-0.15)*x1586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*(pz*pz)))+(((10365853666.6667)*(px*px))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1589=IKcos(j1);
IkReal x1590=IKsin(j1);
IkReal x1591=((0.211764705882353)*pz);
IkReal x1592=(px*x1590);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1593=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1594=((0.09)*x1593);
evalcond[0]=((((0.9)*x1589))+(((-1.0)*px*x1589)));
evalcond[1]=(((x1589*x1591))+(((-1.0)*x1589*x1594))+(((0.00988235299224913)*x1589)));
evalcond[2]=((-0.00988235299224913)+(((-1.0)*x1591))+(((-0.9)*x1590))+x1594+x1592);
evalcond[3]=((-0.00415058824227405)+(((0.15)*x1592))+(((-0.135)*x1590))+(((0.0378)*x1593))+(((-0.0889411764705882)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1595=(px*sj0);
IkReal x1596=((621951220.0)*pz);
IkReal x1597=(cj0*py);
IkReal x1598=((10365853666.6667)*pp);
CheckValue<IkReal> x1599=IKPowWithIntegerCheck((((cj0*px))+((py*sj0))),-1);
if(!x1599.valid){
continue;
}
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
if( IKabs(((-10112926837.2833)+x1596+x1598)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1599.value)*(((-9101634153.54512)+(((9329268300.0)*pp))+(((559756098.211765)*pz))+(((10112926837.2833)*x1597))+(((-0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((-10112926837.2833)*x1595))+((x1595*x1596))+((x1595*x1598))+(((-1.0)*x1597*x1598))+(((-1.0)*x1596*x1597)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-10112926837.2833)+x1596+x1598))+IKsqr(((x1599.value)*(((-9101634153.54512)+(((9329268300.0)*pp))+(((559756098.211765)*pz))+(((10112926837.2833)*x1597))+(((-0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((-10112926837.2833)*x1595))+((x1595*x1596))+((x1595*x1598))+(((-1.0)*x1597*x1598))+(((-1.0)*x1596*x1597))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-10112926837.2833)+x1596+x1598), ((x1599.value)*(((-9101634153.54512)+(((9329268300.0)*pp))+(((559756098.211765)*pz))+(((10112926837.2833)*x1597))+(((-0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((-10112926837.2833)*x1595))+((x1595*x1596))+((x1595*x1598))+(((-1.0)*x1597*x1598))+(((-1.0)*x1596*x1597))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1600=IKsin(j1);
IkReal x1601=IKcos(j1);
IkReal x1602=((0.15)*py);
IkReal x1603=((0.15)*px);
IkReal x1604=((0.211764705882353)*pz);
IkReal x1605=((1.0)*py);
IkReal x1606=((1.0)*px);
IkReal x1607=(sj0*x1601);
IkReal x1608=(cj0*x1600);
IkReal x1609=(sj0*x1600);
IkReal x1610=(cj0*x1601);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1611=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1612=((0.09)*x1611);
evalcond[0]=((0.542000000004466)+(((-0.555555555555556)*pp))+(((-0.0333333333333333)*pz))+(((5.3594771199795e-11)*x1600)));
evalcond[1]=(((py*x1609))+(((0.9)*x1601))+((px*x1608))+((px*x1607))+(((-1.0)*x1605*x1610)));
evalcond[2]=((((-1.0)*sj0*x1605))+((x1601*x1604))+(((-1.0)*x1601*x1612))+(((0.00988235299224913)*x1601))+(((-1.0)*cj0*x1606)));
evalcond[3]=((-0.00988235299224913)+((py*x1608))+((py*x1607))+(((-1.0)*x1604))+x1612+((px*x1610))+(((-0.9)*x1600))+(((-1.0)*x1606*x1609)));
evalcond[4]=((-0.00415058824227405)+(((-0.135)*x1600))+(((0.0378)*x1611))+(((-0.0889411764705882)*pz))+(((-1.0)*x1603*x1609))+((x1602*x1608))+((x1602*x1607))+((x1603*x1610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1613=(cj0*px);
IkReal x1614=(py*sj0);
IkReal x1615=((10365853666.6667)*pp);
IkReal x1616=((621951220.0)*pz);
CheckValue<IkReal> x1617=IKPowWithIntegerCheck(((0.9)+((px*sj0))+(((-1.0)*cj0*py))),-1);
if(!x1617.valid){
continue;
}
if( IKabs(((-10112926837.2833)+x1616+x1615)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1617.value)*(((((-1.0)*x1614*x1615))+(((-1.0)*x1614*x1616))+(((10112926837.2833)*x1613))+(((10112926837.2833)*x1614))+(((-1.0)*x1613*x1616))+(((-1.0)*x1613*x1615)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-10112926837.2833)+x1616+x1615))+IKsqr(((x1617.value)*(((((-1.0)*x1614*x1615))+(((-1.0)*x1614*x1616))+(((10112926837.2833)*x1613))+(((10112926837.2833)*x1614))+(((-1.0)*x1613*x1616))+(((-1.0)*x1613*x1615))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-10112926837.2833)+x1616+x1615), ((x1617.value)*(((((-1.0)*x1614*x1615))+(((-1.0)*x1614*x1616))+(((10112926837.2833)*x1613))+(((10112926837.2833)*x1614))+(((-1.0)*x1613*x1616))+(((-1.0)*x1613*x1615))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1618=IKsin(j1);
IkReal x1619=IKcos(j1);
IkReal x1620=((0.15)*py);
IkReal x1621=((0.15)*px);
IkReal x1622=((0.211764705882353)*pz);
IkReal x1623=((1.0)*py);
IkReal x1624=((1.0)*px);
IkReal x1625=(sj0*x1619);
IkReal x1626=(cj0*x1618);
IkReal x1627=(sj0*x1618);
IkReal x1628=(cj0*x1619);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1629=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1630=((0.09)*x1629);
evalcond[0]=((0.542000000004466)+(((-0.555555555555556)*pp))+(((5.3594771199795e-11)*x1618))+(((-0.0333333333333333)*pz)));
evalcond[1]=(((py*x1627))+(((0.9)*x1619))+((px*x1626))+((px*x1625))+(((-1.0)*x1623*x1628)));
evalcond[2]=((((-1.0)*sj0*x1623))+(((0.00988235299224913)*x1619))+(((-1.0)*cj0*x1624))+((x1619*x1622))+(((-1.0)*x1619*x1630)));
evalcond[3]=((-0.00988235299224913)+((py*x1625))+((py*x1626))+x1630+(((-1.0)*x1622))+((px*x1628))+(((-1.0)*x1624*x1627))+(((-0.9)*x1618)));
evalcond[4]=((-0.00415058824227405)+((x1620*x1625))+((x1620*x1626))+(((-0.135)*x1618))+(((-0.0889411764705882)*pz))+(((0.0378)*x1629))+(((-1.0)*x1621*x1627))+((x1621*x1628)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
CheckValue<IkReal> x1631=IKPowWithIntegerCheck(((0.00988235299224913)+(((-0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((0.211764705882353)*pz))),-1);
if(!x1631.valid){
continue;
}
if( IKabs(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1631.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp))))+IKsqr(((x1631.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp))), ((x1631.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1632=IKsin(j1);
IkReal x1633=IKcos(j1);
IkReal x1634=((0.15)*py);
IkReal x1635=((0.15)*px);
IkReal x1636=((0.211764705882353)*pz);
IkReal x1637=((1.0)*py);
IkReal x1638=((1.0)*px);
IkReal x1639=(sj0*x1633);
IkReal x1640=(cj0*x1632);
IkReal x1641=(sj0*x1632);
IkReal x1642=(cj0*x1633);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x1643=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x1644=((0.09)*x1643);
evalcond[0]=((0.542000000004466)+(((-0.555555555555556)*pp))+(((-0.0333333333333333)*pz))+(((5.3594771199795e-11)*x1632)));
evalcond[1]=(((py*x1641))+((px*x1640))+((px*x1639))+(((-1.0)*x1637*x1642))+(((0.9)*x1633)));
evalcond[2]=((((0.00988235299224913)*x1633))+(((-1.0)*x1633*x1644))+((x1633*x1636))+(((-1.0)*sj0*x1637))+(((-1.0)*cj0*x1638)));
evalcond[3]=((-0.00988235299224913)+((py*x1639))+x1644+((py*x1640))+(((-1.0)*x1638*x1641))+((px*x1642))+(((-1.0)*x1636))+(((-0.9)*x1632)));
evalcond[4]=((-0.00415058824227405)+(((0.0378)*x1643))+(((-1.0)*x1635*x1641))+(((-0.0889411764705882)*pz))+((x1635*x1642))+(((-0.135)*x1632))+((x1634*x1639))+((x1634*x1640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((3.10469847231699)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((1156810438.28432)+(((-1213967228.64635)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1156810438.28432)+(((-1213967228.64635)*pp))))+IKsqr(((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1156810438.28432)+(((-1213967228.64635)*pp))), ((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1645=IKsin(j1);
IkReal x1646=IKcos(j1);
CheckValue<IkReal> x1654=IKPowWithIntegerCheck(py,-1);
if(!x1654.valid){
continue;
}
IkReal x1647=x1654.value;
IkReal x1648=(py*sj0);
IkReal x1649=((0.0833333333333333)*pp);
IkReal x1650=((1.0)*px);
IkReal x1651=((0.15)*x1646);
IkReal x1652=(px*x1646);
IkReal x1653=(cj0*x1645);
evalcond[0]=((0.529398529505718)+(((-0.555555555555556)*pp))+(((-4.57636369784904e-10)*x1645)));
evalcond[1]=((((-4.57636369784904e-10)*x1646))+(((-1.0)*x1648))+(((-1.0)*cj0*x1650)));
evalcond[2]=(((sj0*x1652))+((px*x1653))+((x1645*x1648))+(((-1.0)*cj0*py*x1646))+(((0.9)*x1646)));
evalcond[3]=((4.57636369784904e-10)+(((-1.0)*sj0*x1645*x1650))+((py*x1653))+(((-0.9)*x1645))+((cj0*x1652))+((x1646*x1648)));
evalcond[4]=((6.86454554677356e-11)+((sj0*x1647*x1651*(px*px)))+((x1648*x1651))+((x1645*x1649))+(((-0.0794097794258577)*x1645))+(((0.0555902205741423)*x1647*x1652))+((x1647*x1649*x1652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.400443710475077)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((1529018594.85836)+(((-1526145402.02498)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1529018594.85836)+(((-1526145402.02498)*pp))))+IKsqr(((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1529018594.85836)+(((-1526145402.02498)*pp))), ((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1655=IKsin(j1);
IkReal x1656=IKcos(j1);
CheckValue<IkReal> x1664=IKPowWithIntegerCheck(py,-1);
if(!x1664.valid){
continue;
}
IkReal x1657=x1664.value;
IkReal x1658=(py*sj0);
IkReal x1659=((0.0833333333333333)*pp);
IkReal x1660=(cj0*px);
IkReal x1661=(cj0*py);
IkReal x1662=(px*x1656);
IkReal x1663=((0.15)*x1656);
evalcond[0]=((0.556601470472081)+(((-0.555555555555556)*pp))+(((-3.64025311623919e-10)*x1655)));
evalcond[1]=((((-1.0)*x1660))+(((-3.64025311623919e-10)*x1656))+(((-1.0)*x1658)));
evalcond[2]=((((-1.0)*x1656*x1661))+((sj0*x1662))+((x1655*x1660))+((x1655*x1658))+(((0.9)*x1656)));
evalcond[3]=((3.64025311623919e-10)+((x1656*x1658))+((x1655*x1661))+(((-1.0)*px*sj0*x1655))+(((-0.9)*x1655))+((x1656*x1660)));
evalcond[4]=((5.46037967435879e-11)+(((0.15)*px*sj0*x1657*x1662))+(((-0.0834902205708122)*x1655))+((x1655*x1659))+((x1657*x1659*x1662))+(((0.0515097794291878)*x1657*x1662))+((x1658*x1663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1665=(px*sj0);
IkReal x1666=((0.222222222222222)*pz);
IkReal x1667=(cj0*px);
IkReal x1668=((0.0518518518518519)*pz);
IkReal x1669=(py*sj0);
IkReal x1670=((0.555555555555556)*pp);
IkReal x1671=((0.0354166666666667)*sj3);
IkReal x1672=(cj0*py);
IkReal x1673=((0.425)*sj3);
CheckValue<IkReal> x1674=IKPowWithIntegerCheck(((0.0683333333333333)+(((-1.0)*x1666))+(((-1.0)*x1673))),-1);
if(!x1674.valid){
continue;
}
CheckValue<IkReal> x1675=IKPowWithIntegerCheck(((0.0615)+((x1666*x1672))+(((-0.2)*pz))+(((0.0683333333333333)*x1665))+(((-0.3825)*sj3))+(((-0.0683333333333333)*x1672))+(((-1.0)*x1665*x1673))+((x1672*x1673))+(((-1.0)*x1665*x1666))),-1);
if(!x1675.valid){
continue;
}
if( IKabs(((x1674.value)*(((-0.547694444444444)+x1668+x1670+x1671)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1675.value)*(((((-1.0)*x1667*x1670))+(((-1.0)*x1667*x1671))+(((0.547694444444444)*x1669))+(((0.547694444444444)*x1667))+(((-1.0)*x1668*x1669))+(((-1.0)*x1667*x1668))+(((-1.0)*x1669*x1670))+(((-1.0)*x1669*x1671)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1674.value)*(((-0.547694444444444)+x1668+x1670+x1671))))+IKsqr(((x1675.value)*(((((-1.0)*x1667*x1670))+(((-1.0)*x1667*x1671))+(((0.547694444444444)*x1669))+(((0.547694444444444)*x1667))+(((-1.0)*x1668*x1669))+(((-1.0)*x1667*x1668))+(((-1.0)*x1669*x1670))+(((-1.0)*x1669*x1671))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1674.value)*(((-0.547694444444444)+x1668+x1670+x1671))), ((x1675.value)*(((((-1.0)*x1667*x1670))+(((-1.0)*x1667*x1671))+(((0.547694444444444)*x1669))+(((0.547694444444444)*x1667))+(((-1.0)*x1668*x1669))+(((-1.0)*x1667*x1668))+(((-1.0)*x1669*x1670))+(((-1.0)*x1669*x1671))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1676=IKcos(j1);
IkReal x1677=IKsin(j1);
IkReal x1678=((0.15)*py);
IkReal x1679=((0.09)*cj3);
IkReal x1680=(px*sj0);
IkReal x1681=((0.405)*sj3);
IkReal x1682=(py*sj0);
IkReal x1683=((1.0)*cj0);
IkReal x1684=(sj0*x1676);
IkReal x1685=(cj0*x1677);
IkReal x1686=(cj0*px*x1676);
evalcond[0]=(((x1676*x1679))+(((-1.0)*x1676*x1681))+(((-1.0)*x1682))+(((0.075)*x1676))+(((-1.0)*px*x1683)));
evalcond[1]=((0.547694444444444)+(((-0.555555555555556)*pp))+(((-0.0354166666666667)*sj3))+(((-0.0518518518518519)*pz))+(((-0.222222222222222)*pz*x1677))+(((-0.425)*sj3*x1677))+(((0.0683333333333333)*x1677)));
evalcond[2]=(((x1677*x1682))+(((0.9)*x1676))+((x1676*x1680))+((px*x1685))+(((-1.0)*py*x1676*x1683)));
evalcond[3]=((-0.075)+x1681+x1686+((x1676*x1682))+(((-0.9)*x1677))+((py*x1685))+(((-1.0)*x1677*x1680))+(((-1.0)*x1679)));
evalcond[4]=((-0.6444)+(((1.8)*cj0*py))+(((0.15)*x1686))+(((-1.8)*x1680))+(((-0.15)*x1677*x1680))+(((-1.0)*pp))+(((-0.06)*pz))+(((-0.135)*x1677))+((x1678*x1685))+((x1678*x1684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1687=(cj0*px);
IkReal x1688=(py*sj0);
IkReal x1689=((0.09)*cj3);
IkReal x1690=(cj0*sj0);
IkReal x1691=((0.405)*sj3);
IkReal x1692=(px*py);
CheckValue<IkReal> x1693=IKPowWithIntegerCheck(((((-1.0)*x1688*x1691))+(((-1.0)*x1687*x1691))+(((0.075)*x1688))+(((0.075)*x1687))+((x1688*x1689))+((x1687*x1689))),-1);
if(!x1693.valid){
continue;
}
CheckValue<IkReal> x1694=IKPowWithIntegerCheck(((0.075)+(((-1.0)*x1691))+x1689),-1);
if(!x1694.valid){
continue;
}
if( IKabs(((x1693.value)*(((((-1.0)*px*sj0*x1687))+(((-1.0)*x1692))+((cj0*py*x1688))+(((-0.9)*x1688))+(((-0.9)*x1687))+(((2.0)*cj0*py*x1687)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1694.value)*((x1687+x1688)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1693.value)*(((((-1.0)*px*sj0*x1687))+(((-1.0)*x1692))+((cj0*py*x1688))+(((-0.9)*x1688))+(((-0.9)*x1687))+(((2.0)*cj0*py*x1687))))))+IKsqr(((x1694.value)*((x1687+x1688))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1693.value)*(((((-1.0)*px*sj0*x1687))+(((-1.0)*x1692))+((cj0*py*x1688))+(((-0.9)*x1688))+(((-0.9)*x1687))+(((2.0)*cj0*py*x1687))))), ((x1694.value)*((x1687+x1688))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1695=IKcos(j1);
IkReal x1696=IKsin(j1);
IkReal x1697=((0.15)*py);
IkReal x1698=((0.09)*cj3);
IkReal x1699=(px*sj0);
IkReal x1700=((0.405)*sj3);
IkReal x1701=(py*sj0);
IkReal x1702=((1.0)*cj0);
IkReal x1703=(sj0*x1695);
IkReal x1704=(cj0*x1696);
IkReal x1705=(cj0*px*x1695);
evalcond[0]=((((-1.0)*px*x1702))+(((-1.0)*x1701))+((x1695*x1698))+(((0.075)*x1695))+(((-1.0)*x1695*x1700)));
evalcond[1]=((0.547694444444444)+(((-0.555555555555556)*pp))+(((-0.0354166666666667)*sj3))+(((-0.0518518518518519)*pz))+(((0.0683333333333333)*x1696))+(((-0.425)*sj3*x1696))+(((-0.222222222222222)*pz*x1696)));
evalcond[2]=(((x1696*x1701))+(((-1.0)*py*x1695*x1702))+((x1695*x1699))+((px*x1704))+(((0.9)*x1695)));
evalcond[3]=((-0.075)+(((-1.0)*x1698))+x1700+x1705+((x1695*x1701))+((py*x1704))+(((-1.0)*x1696*x1699))+(((-0.9)*x1696)));
evalcond[4]=((-0.6444)+((x1697*x1703))+((x1697*x1704))+(((1.8)*cj0*py))+(((-0.15)*x1696*x1699))+(((-1.8)*x1699))+(((-1.0)*pp))+(((-0.06)*pz))+(((0.15)*x1705))+(((-0.135)*x1696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1706=IKPowWithIntegerCheck(((0.0683333333333333)+(((-0.222222222222222)*pz))+(((-0.425)*sj3))),-1);
if(!x1706.valid){
continue;
}
CheckValue<IkReal> x1707=IKPowWithIntegerCheck(((0.075)+(((0.09)*cj3))+(((-0.405)*sj3))),-1);
if(!x1707.valid){
continue;
}
if( IKabs(((x1706.value)*(((-0.547694444444444)+(((0.0354166666666667)*sj3))+(((0.0518518518518519)*pz))+(((0.555555555555556)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1707.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1706.value)*(((-0.547694444444444)+(((0.0354166666666667)*sj3))+(((0.0518518518518519)*pz))+(((0.555555555555556)*pp))))))+IKsqr(((x1707.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1706.value)*(((-0.547694444444444)+(((0.0354166666666667)*sj3))+(((0.0518518518518519)*pz))+(((0.555555555555556)*pp))))), ((x1707.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1708=IKcos(j1);
IkReal x1709=IKsin(j1);
IkReal x1710=((0.15)*py);
IkReal x1711=((0.09)*cj3);
IkReal x1712=(px*sj0);
IkReal x1713=((0.405)*sj3);
IkReal x1714=(py*sj0);
IkReal x1715=((1.0)*cj0);
IkReal x1716=(sj0*x1708);
IkReal x1717=(cj0*x1709);
IkReal x1718=(cj0*px*x1708);
evalcond[0]=((((-1.0)*px*x1715))+(((-1.0)*x1714))+(((-1.0)*x1708*x1713))+((x1708*x1711))+(((0.075)*x1708)));
evalcond[1]=((0.547694444444444)+(((-0.555555555555556)*pp))+(((-0.0354166666666667)*sj3))+(((-0.0518518518518519)*pz))+(((-0.222222222222222)*pz*x1709))+(((-0.425)*sj3*x1709))+(((0.0683333333333333)*x1709)));
evalcond[2]=(((x1709*x1714))+(((0.9)*x1708))+((px*x1717))+(((-1.0)*py*x1708*x1715))+((x1708*x1712)));
evalcond[3]=((-0.075)+(((-1.0)*x1709*x1712))+x1713+x1718+(((-1.0)*x1711))+(((-0.9)*x1709))+((py*x1717))+((x1708*x1714)));
evalcond[4]=((-0.6444)+((x1710*x1717))+((x1710*x1716))+(((1.8)*cj0*py))+(((-0.135)*x1709))+(((-1.0)*pp))+(((-0.06)*pz))+(((0.15)*x1718))+(((-0.15)*x1709*x1712))+(((-1.8)*x1712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1719=(cj0*px);
IkReal x1720=(px*py);
IkReal x1721=(py*sj0);
IkReal x1722=((0.365)*sj2);
IkReal x1723=(cj0*sj0);
IkReal x1724=((0.405)*cj3*sj2);
IkReal x1725=((0.405)*cj2*sj3);
IkReal x1726=((0.09)*cj2*cj3);
IkReal x1727=((0.09)*sj2*sj3);
CheckValue<IkReal> x1728=IKPowWithIntegerCheck(((((0.075)*x1721))+((x1721*x1725))+((x1721*x1722))+((x1721*x1727))+((x1721*x1724))+(((0.075)*x1719))+(((-1.0)*x1719*x1726))+((x1719*x1725))+((x1719*x1722))+((x1719*x1727))+((x1719*x1724))+(((-1.0)*x1721*x1726))),-1);
if(!x1728.valid){
continue;
}
CheckValue<IkReal> x1729=IKPowWithIntegerCheck(((0.075)+x1727+x1724+x1725+x1722+(((-1.0)*x1726))),-1);
if(!x1729.valid){
continue;
}
if( IKabs(((x1728.value)*(((((-0.9)*x1721))+(((-1.0)*px*sj0*x1719))+((cj0*py*x1721))+(((2.0)*cj0*py*x1719))+(((-0.9)*x1719))+(((-1.0)*x1720)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1729.value)*((x1721+x1719)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1728.value)*(((((-0.9)*x1721))+(((-1.0)*px*sj0*x1719))+((cj0*py*x1721))+(((2.0)*cj0*py*x1719))+(((-0.9)*x1719))+(((-1.0)*x1720))))))+IKsqr(((x1729.value)*((x1721+x1719))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x1728.value)*(((((-0.9)*x1721))+(((-1.0)*px*sj0*x1719))+((cj0*py*x1721))+(((2.0)*cj0*py*x1719))+(((-0.9)*x1719))+(((-1.0)*x1720))))), ((x1729.value)*((x1721+x1719))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1730=IKcos(j1);
IkReal x1731=IKsin(j1);
IkReal x1732=((0.405)*sj3);
IkReal x1733=(cj0*sj2);
IkReal x1734=((0.15)*cj0);
IkReal x1735=(px*sj0);
IkReal x1736=((0.09)*cj3);
IkReal x1737=((0.365)*sj2);
IkReal x1738=((1.0)*cj2);
IkReal x1739=((0.73)*sj2);
IkReal x1740=((1.0)*py);
IkReal x1741=((0.405)*cj3);
IkReal x1742=(cj2*pz);
IkReal x1743=(cj0*px);
IkReal x1744=(cj2*x1731);
IkReal x1745=(px*x1730);
IkReal x1746=(py*x1731);
IkReal x1747=((0.09)*sj2*sj3);
IkReal x1748=(sj2*x1731);
IkReal x1749=(cj2*x1730);
IkReal x1750=(py*sj0*x1730);
evalcond[0]=(((x1730*x1735))+(((-1.0)*cj0*x1730*x1740))+((x1731*x1743))+((sj0*x1746))+(((0.9)*x1730)));
evalcond[1]=(((sj2*x1730*x1741))+((x1730*x1737))+((x1730*x1747))+(((0.075)*x1730))+(((-1.0)*x1736*x1749))+(((-1.0)*sj0*x1740))+(((-1.0)*x1743))+((x1732*x1749)));
evalcond[2]=((0.9)+(((-1.0)*cj0*x1740))+((x1731*x1737))+x1735+(((0.075)*x1731))+((x1731*x1747))+(((-1.0)*x1736*x1744))+((x1741*x1748))+((x1732*x1744)));
evalcond[3]=((-0.365)+(((-1.0)*x1735*x1748))+(((-0.9)*x1748))+x1742+(((-0.09)*sj3))+(((-0.335)*cj2))+(((-0.075)*sj2))+(((-1.0)*x1741))+((sj2*x1750))+((x1733*x1746))+((x1733*x1745)));
evalcond[4]=(x1732+(((-1.0)*x1738*x1750))+(((-1.0)*x1730*x1738*x1743))+(((0.075)*cj2))+(((-1.0)*cj0*x1738*x1746))+(((0.9)*x1744))+((pz*sj2))+((x1735*x1744))+(((-1.0)*x1736))+(((-0.335)*sj2)));
evalcond[5]=((-0.88895)+(((0.15)*x1750))+((x1734*x1746))+((x1734*x1745))+(((1.8)*cj0*py))+(((0.67)*pz))+(((-1.0)*x1731*x1735*x1739))+(((-1.8)*x1735))+(((-1.0)*pp))+(((0.73)*x1733*x1745))+(((0.73)*x1733*x1746))+(((-0.05475)*sj2))+(((-0.657)*x1748))+(((0.73)*x1742))+(((-0.135)*x1731))+(((-0.24455)*cj2))+(((-0.15)*x1731*x1735))+((x1739*x1750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1751=(cj0*py);
IkReal x1752=(cj2*pz);
IkReal x1753=((0.405)*cj3);
IkReal x1754=((0.09)*sj3);
IkReal x1755=(py*sj0);
IkReal x1756=(cj0*px);
IkReal x1757=(px*sj0);
IkReal x1758=((0.335)*cj2);
IkReal x1759=((1.8)*sj2);
IkReal x1760=((0.075)*sj2);
IkReal x1761=(px*x1760);
CheckValue<IkReal> x1762=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj2*(pz*pz)))+((pp*sj2))+(((0.81)*sj2))+(((-1.0)*x1751*x1759))+((x1757*x1759)))),-1);
if(!x1762.valid){
continue;
}
CheckValue<IkReal> x1763 = IKatan2WithCheck(IkReal(((-0.3285)+((x1752*x1757))+(((-1.0)*x1757*x1758))+(((-0.3645)*cj3))+((x1751*x1760))+(((-1.0)*x1757*x1760))+(((0.9)*x1752))+(((-0.0675)*sj2))+(((-1.0)*x1754*x1757))+(((-1.0)*x1753*x1757))+(((-0.3015)*cj2))+(((0.365)*x1751))+(((-0.081)*sj3))+((x1751*x1754))+((x1751*x1753))+((x1751*x1758))+(((-0.365)*x1757))+(((-1.0)*x1751*x1752)))),IkReal(((((-1.0)*x1752*x1756))+(((-1.0)*x1752*x1755))+((x1754*x1756))+((x1754*x1755))+((x1753*x1756))+((x1753*x1755))+((x1756*x1760))+((x1755*x1760))+(((0.365)*x1755))+(((0.365)*x1756))+((x1756*x1758))+((x1755*x1758)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1763.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1762.value)))+(x1763.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1764=IKcos(j1);
IkReal x1765=IKsin(j1);
IkReal x1766=((0.405)*sj3);
IkReal x1767=(cj0*sj2);
IkReal x1768=((0.15)*cj0);
IkReal x1769=(px*sj0);
IkReal x1770=((0.09)*cj3);
IkReal x1771=((0.365)*sj2);
IkReal x1772=((1.0)*cj2);
IkReal x1773=((0.73)*sj2);
IkReal x1774=((1.0)*py);
IkReal x1775=((0.405)*cj3);
IkReal x1776=(cj2*pz);
IkReal x1777=(cj0*px);
IkReal x1778=(cj2*x1765);
IkReal x1779=(px*x1764);
IkReal x1780=(py*x1765);
IkReal x1781=((0.09)*sj2*sj3);
IkReal x1782=(sj2*x1765);
IkReal x1783=(cj2*x1764);
IkReal x1784=(py*sj0*x1764);
evalcond[0]=((((0.9)*x1764))+((x1765*x1777))+((sj0*x1780))+(((-1.0)*cj0*x1764*x1774))+((x1764*x1769)));
evalcond[1]=((((-1.0)*x1770*x1783))+((sj2*x1764*x1775))+(((-1.0)*x1777))+((x1764*x1771))+(((-1.0)*sj0*x1774))+((x1764*x1781))+((x1766*x1783))+(((0.075)*x1764)));
evalcond[2]=((0.9)+((x1775*x1782))+x1769+((x1765*x1771))+((x1766*x1778))+(((-1.0)*x1770*x1778))+(((-1.0)*cj0*x1774))+((x1765*x1781))+(((0.075)*x1765)));
evalcond[3]=((-0.365)+((x1767*x1779))+((sj2*x1784))+(((-0.9)*x1782))+x1776+(((-0.09)*sj3))+(((-0.335)*cj2))+(((-0.075)*sj2))+(((-1.0)*x1775))+((x1767*x1780))+(((-1.0)*x1769*x1782)));
evalcond[4]=(x1766+(((0.9)*x1778))+(((0.075)*cj2))+(((-1.0)*x1770))+(((-1.0)*cj0*x1772*x1780))+(((-1.0)*x1772*x1784))+((pz*sj2))+(((-0.335)*sj2))+((x1769*x1778))+(((-1.0)*x1764*x1772*x1777)));
evalcond[5]=((-0.88895)+(((0.73)*x1776))+(((0.15)*x1784))+(((0.73)*x1767*x1779))+(((1.8)*cj0*py))+(((-1.0)*x1765*x1769*x1773))+(((0.67)*pz))+((x1768*x1780))+(((-1.0)*pp))+(((0.73)*x1767*x1780))+(((-0.135)*x1765))+(((-1.8)*x1769))+(((-0.05475)*sj2))+(((-0.657)*x1782))+(((-0.15)*x1765*x1769))+((x1773*x1784))+(((-0.24455)*cj2))+((x1768*x1779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x1785=IKPowWithIntegerCheck(IKsign(((0.075)+(((0.365)*sj2))+(((0.09)*sj2*sj3))+(((-0.09)*cj2*cj3))+(((0.405)*cj2*sj3))+(((0.405)*cj3*sj2)))),-1);
if(!x1785.valid){
continue;
}
CheckValue<IkReal> x1786 = IKatan2WithCheck(IkReal(((-0.9)+(((-1.0)*px*sj0))+((cj0*py)))),IkReal((((cj0*px))+((py*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1786.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1785.value)))+(x1786.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x1787=IKcos(j1);
IkReal x1788=IKsin(j1);
IkReal x1789=((0.405)*sj3);
IkReal x1790=(cj0*sj2);
IkReal x1791=((0.15)*cj0);
IkReal x1792=(px*sj0);
IkReal x1793=((0.09)*cj3);
IkReal x1794=((0.365)*sj2);
IkReal x1795=((1.0)*cj2);
IkReal x1796=((0.73)*sj2);
IkReal x1797=((1.0)*py);
IkReal x1798=((0.405)*cj3);
IkReal x1799=(cj2*pz);
IkReal x1800=(cj0*px);
IkReal x1801=(cj2*x1788);
IkReal x1802=(px*x1787);
IkReal x1803=(py*x1788);
IkReal x1804=((0.09)*sj2*sj3);
IkReal x1805=(sj2*x1788);
IkReal x1806=(cj2*x1787);
IkReal x1807=(py*sj0*x1787);
evalcond[0]=(((sj0*x1803))+(((-1.0)*cj0*x1787*x1797))+((x1788*x1800))+((x1787*x1792))+(((0.9)*x1787)));
evalcond[1]=((((-1.0)*sj0*x1797))+(((0.075)*x1787))+((x1787*x1794))+((x1789*x1806))+((sj2*x1787*x1798))+(((-1.0)*x1793*x1806))+((x1787*x1804))+(((-1.0)*x1800)));
evalcond[2]=((0.9)+(((-1.0)*cj0*x1797))+((x1798*x1805))+x1792+(((0.075)*x1788))+((x1788*x1804))+((x1789*x1801))+(((-1.0)*x1793*x1801))+((x1788*x1794)));
evalcond[3]=((-0.365)+(((-1.0)*x1798))+x1799+(((-0.09)*sj3))+(((-0.335)*cj2))+(((-0.075)*sj2))+(((-0.9)*x1805))+((sj2*x1807))+(((-1.0)*x1792*x1805))+((x1790*x1802))+((x1790*x1803)));
evalcond[4]=((((-1.0)*x1793))+x1789+(((-1.0)*x1795*x1807))+((x1792*x1801))+(((0.075)*cj2))+(((0.9)*x1801))+(((-1.0)*cj0*x1795*x1803))+(((-1.0)*x1787*x1795*x1800))+((pz*sj2))+(((-0.335)*sj2)));
evalcond[5]=((-0.88895)+(((-0.135)*x1788))+(((1.8)*cj0*py))+(((0.15)*x1807))+(((0.67)*pz))+(((-0.15)*x1788*x1792))+(((0.73)*x1799))+(((-1.0)*pp))+(((-1.0)*x1788*x1792*x1796))+((x1796*x1807))+(((-1.8)*x1792))+(((-0.05475)*sj2))+((x1791*x1802))+((x1791*x1803))+(((-0.24455)*cj2))+(((0.73)*x1790*x1802))+(((0.73)*x1790*x1803))+(((-0.657)*x1805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x1808=sj2*sj2;
IkReal x1809=py*py;
IkReal x1810=(cj3*py);
IkReal x1811=(py*sj3);
IkReal x1812=(py*sj2);
IkReal x1813=(cj2*py);
IkReal x1814=((3.24)*x1808);
CheckValue<IkReal> x1817 = IKatan2WithCheck(IkReal(((-1.8)*sj2*x1809)),IkReal(((1.8)*px*x1812)),IKFAST_ATAN2_MAGTHRESH);
if(!x1817.valid){
continue;
}
IkReal x1815=((1.0)*(x1817.value));
if(((((x1814*(x1809*x1809)))+((x1809*x1814*(px*px))))) < -0.00001)
continue;
CheckValue<IkReal> x1818=IKPowWithIntegerCheck(IKabs(IKsqrt((((x1814*(x1809*x1809)))+((x1809*x1814*(px*px)))))),-1);
if(!x1818.valid){
continue;
}
if( (((x1818.value)*(((((-0.06075)*x1810))+(((0.15)*pz*x1813))+(((-0.0657)*sj2*x1811))+(((-0.05475)*py))+(((0.61125)*x1812))+((pp*x1812))+(((-0.29565)*sj2*x1810))+(((-0.0135)*x1811))+(((-0.05025)*x1813))+(((-0.67)*pz*x1812)))))) < -1-IKFAST_SINCOS_THRESH || (((x1818.value)*(((((-0.06075)*x1810))+(((0.15)*pz*x1813))+(((-0.0657)*sj2*x1811))+(((-0.05475)*py))+(((0.61125)*x1812))+((pp*x1812))+(((-0.29565)*sj2*x1810))+(((-0.0135)*x1811))+(((-0.05025)*x1813))+(((-0.67)*pz*x1812)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1816=IKasin(((x1818.value)*(((((-0.06075)*x1810))+(((0.15)*pz*x1813))+(((-0.0657)*sj2*x1811))+(((-0.05475)*py))+(((0.61125)*x1812))+((pp*x1812))+(((-0.29565)*sj2*x1810))+(((-0.0135)*x1811))+(((-0.05025)*x1813))+(((-0.67)*pz*x1812))))));
j0array[0]=((((-1.0)*x1815))+(((-1.0)*x1816)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x1815))+x1816);
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1819=IKcos(j0);
IkReal x1820=IKsin(j0);
IkReal x1821=cj2*cj2;
IkReal x1822=sj2*sj2;
IkReal x1823=px*px;
IkReal x1824=(px*sj2);
IkReal x1825=((1.0)*pp);
IkReal x1826=(sj2*sj3);
IkReal x1827=((1.8)*py);
IkReal x1828=(cj2*px);
IkReal x1829=(py*sj2);
IkReal x1830=(cj3*px);
IkReal x1831=((0.0657)*cj3);
IkReal x1832=(cj2*py);
IkReal x1833=((0.67)*pz);
IkReal x1834=((0.15)*pz);
IkReal x1835=(px*sj3);
IkReal x1836=((1.8)*cj2);
IkReal x1837=((0.73)*pz);
IkReal x1838=((0.0657)*sj3);
IkReal x1839=((0.29565)*cj3);
IkReal x1840=((0.24455)*x1821);
IkReal x1841=(py*x1822);
IkReal x1842=(px*x1822);
IkReal x1843=(x1820*x1823);
evalcond[0]=((-0.3868)+(((-1.0)*x1825))+(((0.12105)*cj2*sj3))+(((0.12105)*cj3*sj2))+((x1819*x1827))+(((-0.25785)*x1826))+(((-1.8)*px*x1820))+(((0.25785)*cj2*cj3))+(((0.05475)*sj2))+x1838+x1839+(((0.24455)*cj2)));
evalcond[1]=(((x1824*x1838))+((x1824*x1839))+((x1824*x1833))+(((0.05475)*px))+(((-1.0)*x1828*x1834))+(((0.05025)*x1828))+(((0.0135)*x1835))+(((-1.8)*sj2*x1843))+((x1819*x1824*x1827))+(((0.06075)*x1830))+(((-0.61125)*x1824))+(((-1.0)*x1824*x1825)));
evalcond[2]=((((-0.8777)*x1832))+((x1837*x1841))+(((0.06075)*py*sj3))+(((-1.0)*x1825*x1832))+(((-0.0135)*cj3*py))+((x1829*x1834))+((x1819*x1827*x1832))+((py*x1821*x1837))+((x1832*x1833))+(((-0.24455)*x1841))+(((-0.05025)*x1829))+(((-1.0)*py*x1840))+(((-1.0)*x1820*x1827*x1828))+(((0.29565)*py*x1826))+(((-1.0)*x1829*x1831)));
evalcond[3]=((((0.8777)*x1828))+(((-1.0)*px*x1821*x1837))+((x1836*x1843))+((px*x1840))+((x1824*x1831))+(((-0.06075)*x1835))+((pp*x1828))+(((-1.0)*x1828*x1833))+(((-0.29565)*sj3*x1824))+(((0.05025)*x1824))+(((0.0135)*x1830))+(((0.24455)*x1842))+(((-1.0)*x1819*x1827*x1828))+(((-1.0)*x1837*x1842))+(((-1.0)*x1824*x1834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
IkReal x1844=(cj3*sj2);
IkReal x1845=(cj2*cj3);
IkReal x1846=(sj2*sj3);
IkReal x1847=(cj2*sj3);
j1eval[0]=((1.0)+(((-1.2)*x1845))+(((4.86666666666667)*sj2))+(((1.2)*x1846))+(((5.4)*x1847))+(((5.4)*x1844)));
j1eval[1]=((IKabs((((cj0*px))+((py*sj0)))))+(IKabs(((-0.9)+(((-1.0)*px*sj0))+((cj0*py))))));
j1eval[2]=IKsign(((0.075)+(((0.405)*x1844))+(((0.405)*x1847))+(((0.365)*sj2))+(((-0.09)*x1845))+(((0.09)*x1846))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1848=pz*pz;
IkReal x1849=(pp*sj2);
IkReal x1850=((2.22222222222222)*sj2);
IkReal x1851=(cj0*py);
IkReal x1852=(px*sj0);
IkReal x1853=((1.8)*sj2);
IkReal x1854=(sj2*x1848);
j1eval[0]=(sj2+((x1850*x1852))+(((-1.23456790123457)*x1854))+(((1.23456790123457)*x1849))+(((-1.0)*x1850*x1851)));
j1eval[1]=IKsign((((x1852*x1853))+(((-1.0)*x1854))+(((-1.0)*x1851*x1853))+(((0.81)*sj2))+x1849));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x1855=(cj0*px);
IkReal x1856=(py*sj0);
IkReal x1857=((4.86666666666667)*sj2);
IkReal x1858=((5.4)*cj2*sj3);
IkReal x1859=((5.4)*cj3*sj2);
IkReal x1860=((1.2)*cj2*cj3);
IkReal x1861=((1.2)*sj2*sj3);
j1eval[0]=((((-1.0)*x1856*x1860))+(((-1.0)*x1855*x1860))+((x1856*x1859))+((x1856*x1858))+((x1856*x1857))+((x1855*x1857))+((x1855*x1858))+((x1855*x1859))+((x1856*x1861))+x1855+x1856+((x1855*x1861)));
j1eval[1]=((1.0)+x1861+x1858+x1859+x1857+(((-1.0)*x1860)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=((1.0375)+(((1.9125)*sj3))+(((-1.0)*pz)));
j1eval[1]=((1.0)+(((-1.2)*cj3))+(((5.4)*sj3)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x1862=(cj0*px);
IkReal x1863=((1.2)*cj3);
IkReal x1864=(py*sj0);
IkReal x1865=((5.4)*sj3);
j1eval[0]=(((x1864*x1865))+((x1862*x1865))+(((-1.0)*x1863*x1864))+(((-1.0)*x1862*x1863))+x1862+x1864);
j1eval[1]=((1.0)+x1865+(((-1.0)*x1863)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x1866=((5.4)*sj3);
IkReal x1867=((1.2)*cj3);
IkReal x1868=((6.0)*sj3);
IkReal x1869=(cj0*py);
IkReal x1870=(px*sj0);
IkReal x1871=((1.33333333333333)*cj3);
IkReal x1872=((1.0)+x1866);
j1eval[0]=((((1.11111111111111)*x1870))+(((-1.0)*x1870*x1871))+x1872+((x1869*x1871))+((x1868*x1870))+(((-1.0)*x1868*x1869))+(((-1.0)*x1867))+(((-1.11111111111111)*x1869)));
j1eval[1]=(x1872+(((-1.0)*x1867)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.0368941812728069)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((2473775995.32335)+(((-1213967228.64635)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2473775995.32335)+(((-1213967228.64635)*pp))))+IKsqr(((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((2473775995.32335)+(((-1213967228.64635)*pp))), ((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1873=IKsin(j1);
IkReal x1874=IKcos(j1);
CheckValue<IkReal> x1883=IKPowWithIntegerCheck(py,-1);
if(!x1883.valid){
continue;
}
IkReal x1875=x1883.value;
IkReal x1876=(py*sj0);
IkReal x1877=((0.0833333333333333)*pp);
IkReal x1878=(cj0*px);
IkReal x1879=(cj0*py);
IkReal x1880=((0.15)*x1874);
IkReal x1881=((1.0)*x1874);
IkReal x1882=(px*x1874);
evalcond[0]=((1.13208986616081)+(((-0.555555555555556)*pp))+(((-4.57636369784904e-10)*x1873)));
evalcond[1]=((((-4.57636369784904e-10)*x1874))+(((-1.0)*x1878))+(((-1.0)*x1876)));
evalcond[2]=((((-1.0)*x1879*x1881))+(((0.9)*x1874))+((x1873*x1878))+((x1873*x1876))+((sj0*x1882)));
evalcond[3]=((-4.57636369784904e-10)+(((-1.0)*x1876*x1881))+(((0.9)*x1873))+(((-1.0)*x1878*x1881))+(((-1.0)*x1873*x1879))+((px*sj0*x1873)));
evalcond[4]=((6.86454554677356e-11)+((sj0*x1875*x1880*(px*px)))+(((-0.034813479924122)*x1875*x1882))+((x1876*x1880))+((x1875*x1877*x1882))+((x1873*x1877))+(((-0.169813479924122)*x1873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.54203636406487)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((1366263721.92856)+(((-1526145402.02498)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1366263721.92856)+(((-1526145402.02498)*pp))))+IKsqr(((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1366263721.92856)+(((-1526145402.02498)*pp))), ((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1884=IKsin(j1);
IkReal x1885=IKcos(j1);
CheckValue<IkReal> x1894=IKPowWithIntegerCheck(py,-1);
if(!x1894.valid){
continue;
}
IkReal x1886=x1894.value;
IkReal x1887=(py*sj0);
IkReal x1888=((0.0833333333333333)*pp);
IkReal x1889=(cj0*px);
IkReal x1890=(cj0*py);
IkReal x1891=((0.15)*x1885);
IkReal x1892=((1.0)*x1885);
IkReal x1893=(px*x1885);
evalcond[0]=((0.497354577135498)+(((-0.555555555555556)*pp))+(((-3.64025311623919e-10)*x1884)));
evalcond[1]=((((-1.0)*x1887))+(((-1.0)*x1889))+(((-3.64025311623919e-10)*x1885)));
evalcond[2]=((((0.9)*x1885))+(((-1.0)*x1890*x1892))+((sj0*x1893))+((x1884*x1887))+((x1884*x1889)));
evalcond[3]=((-3.64025311623919e-10)+(((0.9)*x1884))+(((-1.0)*x1884*x1890))+(((-1.0)*x1889*x1892))+(((-1.0)*x1887*x1892))+((px*sj0*x1884)));
evalcond[4]=((5.46037967435879e-11)+((x1886*x1888*x1893))+((sj0*x1886*x1891*(px*px)))+(((-0.0746031865703247)*x1884))+((x1887*x1891))+(((0.0603968134296753)*x1886*x1893))+((x1884*x1888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst0=((-0.542483660130719)+(((0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.542483660130719)+sj3+(((-0.522875816993464)*pz)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1895=((0.522875816993464)*pz);
IkReal x1896=((-0.54248366)+x1895);
sj2=0;
cj2=1.0;
j2=0;
sj3=x1896;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
if( (x1896) < -1-IKFAST_SINCOS_THRESH || (x1896) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=IKasin(x1896);
IkReal gconst0=((-0.542483660130719)+x1895);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
j1eval[0]=((-1.60784313666667)+(((-1.0)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((2.35294117647059)*pz)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1897=((0.522875816993464)*pz);
IkReal x1898=((-0.54248366)+x1897);
sj2=0;
cj2=1.0;
j2=0;
sj3=x1898;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
if( (x1898) < -1-IKFAST_SINCOS_THRESH || (x1898) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=IKasin(x1898);
IkReal gconst0=((-0.542483660130719)+x1897);
j1eval[0]=((1.0)+(((-1.11111111111111)*cj0*py))+(((1.11111111111111)*px*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1899=((0.522875816993464)*pz);
IkReal x1900=((-0.54248366)+x1899);
sj2=0;
cj2=1.0;
j2=0;
sj3=x1900;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
if( (x1900) < -1-IKFAST_SINCOS_THRESH || (x1900) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=IKasin(x1900);
IkReal gconst0=((-0.542483660130719)+x1899);
j1eval[0]=((((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1901=IKsin(j1);
IkReal x1902=IKcos(j1);
IkReal x1903=((0.211764705882353)*pz);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1904=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1905=((0.09)*x1904);
evalcond[0]=((0.9)*x1902);
evalcond[1]=((-0.1447058823)+(((0.9)*x1901))+x1903+(((-1.0)*x1905)));
evalcond[2]=((-0.889941176495)+(((-0.135)*x1901))+(((1.30235294117647)*pz))+(((-0.5535)*x1904)));
evalcond[3]=((((-1.0)*x1902*x1905))+(((-0.1447058823)*x1902))+((x1902*x1903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*(py*py)))+(((10000000000.0)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1906=IKcos(j1);
IkReal x1907=IKsin(j1);
IkReal x1908=((0.211764705882353)*pz);
IkReal x1909=(py*x1907);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1910=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1911=((0.09)*x1910);
evalcond[0]=((((0.9)*x1906))+(((-1.0)*py*x1906)));
evalcond[1]=((((-0.1447058823)*x1906))+((x1906*x1908))+(((-1.0)*x1906*x1911)));
evalcond[2]=((-0.1447058823)+(((0.9)*x1907))+(((-1.0)*x1909))+x1908+(((-1.0)*x1911)));
evalcond[3]=((-0.889941176495)+(((-0.135)*x1907))+(((0.15)*x1909))+(((-0.5535)*x1910))+(((1.30235294117647)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*(py*py)))+(((10000000000.0)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1912=IKcos(j1);
IkReal x1913=IKsin(j1);
IkReal x1914=((0.211764705882353)*pz);
IkReal x1915=(py*x1913);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1916=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1917=((0.09)*x1916);
evalcond[0]=(((py*x1912))+(((0.9)*x1912)));
evalcond[1]=(((x1912*x1914))+(((-0.1447058823)*x1912))+(((-1.0)*x1912*x1917)));
evalcond[2]=((-0.1447058823)+(((0.9)*x1913))+x1915+x1914+(((-1.0)*x1917)));
evalcond[3]=((-0.889941176495)+(((-0.135)*x1913))+(((-0.5535)*x1916))+(((-0.15)*x1915))+(((1.30235294117647)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*(pz*pz)))+(((10000000000.0)*(px*px))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1918=IKcos(j1);
IkReal x1919=IKsin(j1);
IkReal x1920=((0.211764705882353)*pz);
IkReal x1921=(px*x1919);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1922=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1923=((0.09)*x1922);
evalcond[0]=((((0.9)*x1918))+((px*x1918)));
evalcond[1]=((((-1.0)*x1918*x1923))+((x1918*x1920))+(((-0.1447058823)*x1918)));
evalcond[2]=((-0.1447058823)+(((0.9)*x1919))+(((-1.0)*x1923))+x1920+x1921);
evalcond[3]=((-0.889941176495)+(((-0.135)*x1919))+(((-0.5535)*x1922))+(((1.30235294117647)*pz))+(((-0.15)*x1921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*(pz*pz)))+(((10000000000.0)*(px*px))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1924=IKcos(j1);
IkReal x1925=IKsin(j1);
IkReal x1926=((0.211764705882353)*pz);
IkReal x1927=(px*x1925);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1928=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1929=((0.09)*x1928);
evalcond[0]=((((0.9)*x1924))+(((-1.0)*px*x1924)));
evalcond[1]=((((-0.1447058823)*x1924))+(((-1.0)*x1924*x1929))+((x1924*x1926)));
evalcond[2]=((-0.1447058823)+(((0.9)*x1925))+(((-1.0)*x1927))+(((-1.0)*x1929))+x1926);
evalcond[3]=((-0.889941176495)+(((0.15)*x1927))+(((-0.135)*x1925))+(((-0.5535)*x1928))+(((1.30235294117647)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1930=((10000000000.0)*pp);
IkReal x1931=(cj0*py);
IkReal x1932=(px*sj0);
IkReal x1933=((14000000000.0)*pz);
CheckValue<IkReal> x1934=IKPowWithIntegerCheck(((((-1.0)*py*sj0))+(((-1.0)*cj0*px))),-1);
if(!x1934.valid){
continue;
}
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
if( IKabs(((-4865000000.08333)+x1930+(((-1.0)*x1933)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1934.value)*(((4378500000.21971)+(((-1.0)*x1930*x1932))+((x1932*x1933))+((x1930*x1931))+(((-4865000000.08333)*x1931))+(((0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((12599999999.7882)*pz))+(((-1.0)*x1931*x1933))+(((4865000000.08333)*x1932))+(((-9000000000.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4865000000.08333)+x1930+(((-1.0)*x1933))))+IKsqr(((x1934.value)*(((4378500000.21971)+(((-1.0)*x1930*x1932))+((x1932*x1933))+((x1930*x1931))+(((-4865000000.08333)*x1931))+(((0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((12599999999.7882)*pz))+(((-1.0)*x1931*x1933))+(((4865000000.08333)*x1932))+(((-9000000000.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-4865000000.08333)+x1930+(((-1.0)*x1933))), ((x1934.value)*(((4378500000.21971)+(((-1.0)*x1930*x1932))+((x1932*x1933))+((x1930*x1931))+(((-4865000000.08333)*x1931))+(((0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((12599999999.7882)*pz))+(((-1.0)*x1931*x1933))+(((4865000000.08333)*x1932))+(((-9000000000.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1935=IKsin(j1);
IkReal x1936=IKcos(j1);
IkReal x1937=((0.15)*py);
IkReal x1938=((0.211764705882353)*pz);
IkReal x1939=((1.0)*py);
IkReal x1940=(sj0*x1936);
IkReal x1941=(cj0*x1935);
IkReal x1942=(sj0*x1935);
IkReal x1943=(cj0*px*x1936);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1944=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1945=((0.09)*x1944);
evalcond[0]=((0.270277777782407)+(((0.777777777777778)*pz))+(((-0.555555555555556)*pp))+(((5.55555555555556e-11)*x1935)));
evalcond[1]=((((0.9)*x1936))+((py*x1942))+((px*x1941))+((px*x1940))+(((-1.0)*cj0*x1936*x1939)));
evalcond[2]=(((x1936*x1938))+(((-0.1447058823)*x1936))+(((-1.0)*x1936*x1945))+(((-1.0)*sj0*x1939))+(((-1.0)*cj0*px)));
evalcond[3]=((-0.1447058823)+(((-1.0)*x1945))+(((0.9)*x1935))+((px*x1942))+x1938+(((-1.0)*x1943))+(((-1.0)*x1939*x1940))+(((-1.0)*x1939*x1941)));
evalcond[4]=((-0.889941176495)+(((-0.135)*x1935))+((x1937*x1941))+((x1937*x1940))+(((0.15)*x1943))+(((1.30235294117647)*pz))+(((-0.15)*px*x1942))+(((-0.5535)*x1944)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1946=(cj0*px);
IkReal x1947=((10000000000.0)*pp);
IkReal x1948=(py*sj0);
IkReal x1949=((14000000000.0)*pz);
CheckValue<IkReal> x1950=IKPowWithIntegerCheck(((0.9)+((px*sj0))+(((-1.0)*cj0*py))),-1);
if(!x1950.valid){
continue;
}
if( IKabs(((-4865000000.08333)+(((-1.0)*x1949))+x1947)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1950.value)*((((x1946*x1949))+(((-1.0)*x1947*x1948))+(((-1.0)*x1946*x1947))+((x1948*x1949))+(((4865000000.08333)*x1946))+(((4865000000.08333)*x1948)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4865000000.08333)+(((-1.0)*x1949))+x1947))+IKsqr(((x1950.value)*((((x1946*x1949))+(((-1.0)*x1947*x1948))+(((-1.0)*x1946*x1947))+((x1948*x1949))+(((4865000000.08333)*x1946))+(((4865000000.08333)*x1948))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-4865000000.08333)+(((-1.0)*x1949))+x1947), ((x1950.value)*((((x1946*x1949))+(((-1.0)*x1947*x1948))+(((-1.0)*x1946*x1947))+((x1948*x1949))+(((4865000000.08333)*x1946))+(((4865000000.08333)*x1948))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1951=IKsin(j1);
IkReal x1952=IKcos(j1);
IkReal x1953=((0.15)*py);
IkReal x1954=((0.211764705882353)*pz);
IkReal x1955=((1.0)*py);
IkReal x1956=(sj0*x1952);
IkReal x1957=(cj0*x1951);
IkReal x1958=(sj0*x1951);
IkReal x1959=(cj0*px*x1952);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1960=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1961=((0.09)*x1960);
evalcond[0]=((0.270277777782407)+(((0.777777777777778)*pz))+(((-0.555555555555556)*pp))+(((5.55555555555556e-11)*x1951)));
evalcond[1]=(((py*x1958))+((px*x1957))+((px*x1956))+(((-1.0)*cj0*x1952*x1955))+(((0.9)*x1952)));
evalcond[2]=((((-1.0)*x1952*x1961))+((x1952*x1954))+(((-1.0)*sj0*x1955))+(((-0.1447058823)*x1952))+(((-1.0)*cj0*px)));
evalcond[3]=((-0.1447058823)+(((-1.0)*x1961))+((px*x1958))+x1954+(((-1.0)*x1959))+(((-1.0)*x1955*x1957))+(((-1.0)*x1955*x1956))+(((0.9)*x1951)));
evalcond[4]=((-0.889941176495)+(((0.15)*x1959))+(((1.30235294117647)*pz))+(((-0.135)*x1951))+((x1953*x1956))+((x1953*x1957))+(((-0.15)*px*x1958))+(((-0.5535)*x1960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x1962=IKPowWithIntegerCheck(((-0.1447058823)+(((-0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((0.211764705882353)*pz))),-1);
if(!x1962.valid){
continue;
}
if( IKabs(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1962.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp))))+IKsqr(((x1962.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp))), ((x1962.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x1963=IKsin(j1);
IkReal x1964=IKcos(j1);
IkReal x1965=((0.15)*py);
IkReal x1966=((0.211764705882353)*pz);
IkReal x1967=((1.0)*py);
IkReal x1968=(sj0*x1964);
IkReal x1969=(cj0*x1963);
IkReal x1970=(sj0*x1963);
IkReal x1971=(cj0*px*x1964);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1972=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1973=((0.09)*x1972);
evalcond[0]=((0.270277777782407)+(((0.777777777777778)*pz))+(((-0.555555555555556)*pp))+(((5.55555555555556e-11)*x1963)));
evalcond[1]=(((px*x1968))+((px*x1969))+((py*x1970))+(((-1.0)*cj0*x1964*x1967))+(((0.9)*x1964)));
evalcond[2]=((((-0.1447058823)*x1964))+(((-1.0)*x1964*x1973))+((x1964*x1966))+(((-1.0)*sj0*x1967))+(((-1.0)*cj0*px)));
evalcond[3]=((-0.1447058823)+((px*x1970))+(((-1.0)*x1973))+(((-1.0)*x1971))+x1966+(((0.9)*x1963))+(((-1.0)*x1967*x1968))+(((-1.0)*x1967*x1969)));
evalcond[4]=((-0.889941176495)+(((0.15)*x1971))+(((1.30235294117647)*pz))+((x1965*x1968))+((x1965*x1969))+(((-0.15)*px*x1970))+(((-0.5535)*x1972))+(((-0.135)*x1963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst0=((-0.542483660130719)+(((0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.542483660130719)+sj3+(((-0.522875816993464)*pz)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x1974=((0.522875816993464)*pz);
IkReal x1975=((-0.54248366)+x1974);
sj2=0;
cj2=1.0;
j2=0;
sj3=x1975;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))))));
if( (((0.54248366)+(((-1.0)*x1974)))) < -1-IKFAST_SINCOS_THRESH || (((0.54248366)+(((-1.0)*x1974)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(((1.0)*(IKasin(((0.54248366)+(((-1.0)*x1974))))))));
IkReal gconst0=((-0.542483660130719)+x1974);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
j1eval[0]=((-1.60784313666667)+(((2.35294117647059)*pz))+(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1976=((0.522875816993464)*pz);
IkReal x1977=((-0.54248366)+x1976);
sj2=0;
cj2=1.0;
j2=0;
sj3=x1977;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))))));
if( (((0.54248366)+(((-1.0)*x1976)))) < -1-IKFAST_SINCOS_THRESH || (((0.54248366)+(((-1.0)*x1976)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(((1.0)*(IKasin(((0.54248366)+(((-1.0)*x1976))))))));
IkReal gconst0=((-0.542483660130719)+x1976);
j1eval[0]=((1.0)+(((-1.11111111111111)*cj0*py))+(((1.11111111111111)*px*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x1978=((0.522875816993464)*pz);
IkReal x1979=((-0.54248366)+x1978);
sj2=0;
cj2=1.0;
j2=0;
sj3=x1979;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))))));
if( (((0.54248366)+(((-1.0)*x1978)))) < -1-IKFAST_SINCOS_THRESH || (((0.54248366)+(((-1.0)*x1978)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(((1.0)*(IKasin(((0.54248366)+(((-1.0)*x1978))))))));
IkReal gconst0=((-0.542483660130719)+x1978);
j1eval[0]=((((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1980=IKsin(j1);
IkReal x1981=IKcos(j1);
IkReal x1982=((0.211764705882353)*pz);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1983=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1984=((0.09)*x1983);
evalcond[0]=((0.9)*x1981);
evalcond[1]=((-0.1447058823)+x1984+x1982+(((0.9)*x1980)));
evalcond[2]=((-0.889941176495)+(((0.5535)*x1983))+(((1.30235294117647)*pz))+(((-0.135)*x1980)));
evalcond[3]=(((x1981*x1982))+((x1981*x1984))+(((-0.1447058823)*x1981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*(py*py)))+(((10000000000.0)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1985=IKcos(j1);
IkReal x1986=IKsin(j1);
IkReal x1987=((0.211764705882353)*pz);
IkReal x1988=(py*x1986);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1989=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1990=((0.09)*x1989);
evalcond[0]=((((0.9)*x1985))+(((-1.0)*py*x1985)));
evalcond[1]=((((-0.1447058823)*x1985))+((x1985*x1990))+((x1985*x1987)));
evalcond[2]=((-0.1447058823)+x1987+x1990+(((0.9)*x1986))+(((-1.0)*x1988)));
evalcond[3]=((-0.889941176495)+(((0.5535)*x1989))+(((0.15)*x1988))+(((1.30235294117647)*pz))+(((-0.135)*x1986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*(py*py)))+(((10000000000.0)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1991=IKcos(j1);
IkReal x1992=IKsin(j1);
IkReal x1993=((0.211764705882353)*pz);
IkReal x1994=(py*x1992);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x1995=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x1996=((0.09)*x1995);
evalcond[0]=((((0.9)*x1991))+((py*x1991)));
evalcond[1]=((((-0.1447058823)*x1991))+((x1991*x1996))+((x1991*x1993)));
evalcond[2]=((-0.1447058823)+x1993+x1994+x1996+(((0.9)*x1992)));
evalcond[3]=((-0.889941176495)+(((0.5535)*x1995))+(((1.30235294117647)*pz))+(((-0.15)*x1994))+(((-0.135)*x1992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*(pz*pz)))+(((10000000000.0)*(px*px))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1997=IKcos(j1);
IkReal x1998=IKsin(j1);
IkReal x1999=((0.211764705882353)*pz);
IkReal x2000=(px*x1998);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2001=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2002=((0.09)*x2001);
evalcond[0]=((((0.9)*x1997))+((px*x1997)));
evalcond[1]=(((x1997*x2002))+(((-0.1447058823)*x1997))+((x1997*x1999)));
evalcond[2]=((-0.1447058823)+x2002+x2000+x1999+(((0.9)*x1998)));
evalcond[3]=((-0.889941176495)+(((-0.15)*x2000))+(((1.30235294117647)*pz))+(((0.5535)*x2001))+(((-0.135)*x1998)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*(pz*pz)))+(((10000000000.0)*(px*px))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2003=IKcos(j1);
IkReal x2004=IKsin(j1);
IkReal x2005=((0.211764705882353)*pz);
IkReal x2006=(px*x2004);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2007=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2008=((0.09)*x2007);
evalcond[0]=((((-1.0)*px*x2003))+(((0.9)*x2003)));
evalcond[1]=(((x2003*x2005))+((x2003*x2008))+(((-0.1447058823)*x2003)));
evalcond[2]=((-0.1447058823)+x2005+x2008+(((-1.0)*x2006))+(((0.9)*x2004)));
evalcond[3]=((-0.889941176495)+(((-0.135)*x2004))+(((1.30235294117647)*pz))+(((0.5535)*x2007))+(((0.15)*x2006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2009=((10000000000.0)*pp);
IkReal x2010=(cj0*py);
IkReal x2011=(px*sj0);
IkReal x2012=((14000000000.0)*pz);
CheckValue<IkReal> x2013=IKPowWithIntegerCheck(((((-1.0)*py*sj0))+(((-1.0)*cj0*px))),-1);
if(!x2013.valid){
continue;
}
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
if( IKabs(((-4865000000.08333)+(((-1.0)*x2012))+x2009)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2013.value)*(((4378500000.21971)+(((-1.0)*x2010*x2012))+(((-1.0)*x2009*x2011))+(((-4865000000.08333)*x2010))+((x2011*x2012))+(((12599999999.7882)*pz))+(((-0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+((x2009*x2010))+(((4865000000.08333)*x2011))+(((-9000000000.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4865000000.08333)+(((-1.0)*x2012))+x2009))+IKsqr(((x2013.value)*(((4378500000.21971)+(((-1.0)*x2010*x2012))+(((-1.0)*x2009*x2011))+(((-4865000000.08333)*x2010))+((x2011*x2012))+(((12599999999.7882)*pz))+(((-0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+((x2009*x2010))+(((4865000000.08333)*x2011))+(((-9000000000.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-4865000000.08333)+(((-1.0)*x2012))+x2009), ((x2013.value)*(((4378500000.21971)+(((-1.0)*x2010*x2012))+(((-1.0)*x2009*x2011))+(((-4865000000.08333)*x2010))+((x2011*x2012))+(((12599999999.7882)*pz))+(((-0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+((x2009*x2010))+(((4865000000.08333)*x2011))+(((-9000000000.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2014=IKsin(j1);
IkReal x2015=IKcos(j1);
IkReal x2016=((0.15)*py);
IkReal x2017=((0.211764705882353)*pz);
IkReal x2018=((1.0)*py);
IkReal x2019=(sj0*x2015);
IkReal x2020=(cj0*x2014);
IkReal x2021=(sj0*x2014);
IkReal x2022=(cj0*px*x2015);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2023=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2024=((0.09)*x2023);
evalcond[0]=((0.270277777782407)+(((0.777777777777778)*pz))+(((-0.555555555555556)*pp))+(((5.55555555555556e-11)*x2014)));
evalcond[1]=(((px*x2019))+(((-1.0)*cj0*x2015*x2018))+((px*x2020))+((py*x2021))+(((0.9)*x2015)));
evalcond[2]=(((x2015*x2017))+(((-1.0)*sj0*x2018))+(((-0.1447058823)*x2015))+(((-1.0)*cj0*px))+((x2015*x2024)));
evalcond[3]=((-0.1447058823)+x2024+x2017+((px*x2021))+(((-1.0)*x2022))+(((-1.0)*x2018*x2020))+(((0.9)*x2014))+(((-1.0)*x2018*x2019)));
evalcond[4]=((-0.889941176495)+((x2016*x2019))+(((1.30235294117647)*pz))+(((0.5535)*x2023))+((x2016*x2020))+(((0.15)*x2022))+(((-0.15)*px*x2021))+(((-0.135)*x2014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2025=(cj0*px);
IkReal x2026=((10000000000.0)*pp);
IkReal x2027=(py*sj0);
IkReal x2028=((14000000000.0)*pz);
CheckValue<IkReal> x2029=IKPowWithIntegerCheck(((0.9)+((px*sj0))+(((-1.0)*cj0*py))),-1);
if(!x2029.valid){
continue;
}
if( IKabs(((-4865000000.08333)+x2026+(((-1.0)*x2028)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2029.value)*((((x2025*x2028))+(((4865000000.08333)*x2027))+(((4865000000.08333)*x2025))+(((-1.0)*x2025*x2026))+(((-1.0)*x2026*x2027))+((x2027*x2028)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4865000000.08333)+x2026+(((-1.0)*x2028))))+IKsqr(((x2029.value)*((((x2025*x2028))+(((4865000000.08333)*x2027))+(((4865000000.08333)*x2025))+(((-1.0)*x2025*x2026))+(((-1.0)*x2026*x2027))+((x2027*x2028))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-4865000000.08333)+x2026+(((-1.0)*x2028))), ((x2029.value)*((((x2025*x2028))+(((4865000000.08333)*x2027))+(((4865000000.08333)*x2025))+(((-1.0)*x2025*x2026))+(((-1.0)*x2026*x2027))+((x2027*x2028))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2030=IKsin(j1);
IkReal x2031=IKcos(j1);
IkReal x2032=((0.15)*py);
IkReal x2033=((0.211764705882353)*pz);
IkReal x2034=((1.0)*py);
IkReal x2035=(sj0*x2031);
IkReal x2036=(cj0*x2030);
IkReal x2037=(sj0*x2030);
IkReal x2038=(cj0*px*x2031);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2039=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2040=((0.09)*x2039);
evalcond[0]=((0.270277777782407)+(((0.777777777777778)*pz))+(((-0.555555555555556)*pp))+(((5.55555555555556e-11)*x2030)));
evalcond[1]=(((px*x2035))+((px*x2036))+((py*x2037))+(((0.9)*x2031))+(((-1.0)*cj0*x2031*x2034)));
evalcond[2]=((((-0.1447058823)*x2031))+((x2031*x2033))+((x2031*x2040))+(((-1.0)*sj0*x2034))+(((-1.0)*cj0*px)));
evalcond[3]=((-0.1447058823)+x2040+x2033+((px*x2037))+(((-1.0)*x2038))+(((0.9)*x2030))+(((-1.0)*x2034*x2035))+(((-1.0)*x2034*x2036)));
evalcond[4]=((-0.889941176495)+(((-0.135)*x2030))+((x2032*x2035))+((x2032*x2036))+(((1.30235294117647)*pz))+(((-0.15)*px*x2037))+(((0.5535)*x2039))+(((0.15)*x2038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x2041=IKPowWithIntegerCheck(((-0.1447058823)+(((0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((0.211764705882353)*pz))),-1);
if(!x2041.valid){
continue;
}
if( IKabs(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2041.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp))))+IKsqr(((x2041.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp))), ((x2041.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2042=IKsin(j1);
IkReal x2043=IKcos(j1);
IkReal x2044=((0.15)*py);
IkReal x2045=((0.211764705882353)*pz);
IkReal x2046=((1.0)*py);
IkReal x2047=(sj0*x2043);
IkReal x2048=(cj0*x2042);
IkReal x2049=(sj0*x2042);
IkReal x2050=(cj0*px*x2043);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2051=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2052=((0.09)*x2051);
evalcond[0]=((0.270277777782407)+(((0.777777777777778)*pz))+(((-0.555555555555556)*pp))+(((5.55555555555556e-11)*x2042)));
evalcond[1]=((((0.9)*x2043))+((py*x2049))+(((-1.0)*cj0*x2043*x2046))+((px*x2048))+((px*x2047)));
evalcond[2]=((((-1.0)*sj0*x2046))+((x2043*x2045))+((x2043*x2052))+(((-0.1447058823)*x2043))+(((-1.0)*cj0*px)));
evalcond[3]=((-0.1447058823)+x2045+x2052+(((0.9)*x2042))+(((-1.0)*x2050))+((px*x2049))+(((-1.0)*x2046*x2048))+(((-1.0)*x2046*x2047)));
evalcond[4]=((-0.889941176495)+(((-0.135)*x2042))+(((0.5535)*x2051))+(((1.30235294117647)*pz))+(((0.15)*x2050))+((x2044*x2048))+((x2044*x2047))+(((-0.15)*px*x2049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2053=cj0*cj0;
IkReal x2054=py*py;
IkReal x2055=(cj0*px);
IkReal x2056=(px*sj0);
IkReal x2057=((0.09)*cj3);
IkReal x2058=(cj0*py);
IkReal x2059=(py*sj0);
IkReal x2060=((0.405)*sj3);
CheckValue<IkReal> x2061=IKPowWithIntegerCheck(((0.0675)+(((-0.075)*x2058))+(((0.3645)*sj3))+(((-1.0)*x2058*x2060))+((x2056*x2060))+(((0.075)*x2056))+(((-1.0)*x2056*x2057))+(((-0.081)*cj3))+((x2057*x2058))),-1);
if(!x2061.valid){
continue;
}
CheckValue<IkReal> x2062=IKPowWithIntegerCheck(((0.075)+x2060+(((-1.0)*x2057))),-1);
if(!x2062.valid){
continue;
}
if( IKabs(((x2061.value)*(((-0.16965)+(((-1.0)*x2053*x2054))+x2054+(((0.155925)*(cj3*cj3)))+(((2.0)*x2055*x2059))+((x2053*(px*px)))+(((0.0135)*cj3))+(((-0.06075)*sj3))+(((0.0729)*cj3*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2062.value)*((x2055+x2059)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2061.value)*(((-0.16965)+(((-1.0)*x2053*x2054))+x2054+(((0.155925)*(cj3*cj3)))+(((2.0)*x2055*x2059))+((x2053*(px*px)))+(((0.0135)*cj3))+(((-0.06075)*sj3))+(((0.0729)*cj3*sj3))))))+IKsqr(((x2062.value)*((x2055+x2059))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2061.value)*(((-0.16965)+(((-1.0)*x2053*x2054))+x2054+(((0.155925)*(cj3*cj3)))+(((2.0)*x2055*x2059))+((x2053*(px*px)))+(((0.0135)*cj3))+(((-0.06075)*sj3))+(((0.0729)*cj3*sj3))))), ((x2062.value)*((x2055+x2059))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2063=IKcos(j1);
IkReal x2064=IKsin(j1);
IkReal x2065=((0.15)*py);
IkReal x2066=((0.09)*cj3);
IkReal x2067=(px*sj0);
IkReal x2068=(py*sj0);
IkReal x2069=((1.0)*py);
IkReal x2070=((0.405)*sj3);
IkReal x2071=(sj0*x2063);
IkReal x2072=(cj0*x2064);
IkReal x2073=(cj0*px*x2063);
evalcond[0]=((((-1.0)*x2063*x2066))+(((-1.0)*x2068))+(((0.075)*x2063))+((x2063*x2070))+(((-1.0)*cj0*px)));
evalcond[1]=((0.289490740740741)+(((-0.555555555555556)*pp))+(((0.230555555555556)*x2064))+(((0.0354166666666667)*sj3))+(((-0.222222222222222)*pz*x2064))+(((0.425)*sj3*x2064))+(((0.759259259259259)*pz)));
evalcond[2]=((((0.9)*x2063))+(((-1.0)*cj0*x2063*x2069))+((px*x2072))+((x2063*x2067))+((x2064*x2068)));
evalcond[3]=((0.075)+(((0.9)*x2064))+x2070+(((-1.0)*x2063*x2068))+(((-1.0)*x2066))+(((-1.0)*x2069*x2072))+(((-1.0)*x2073))+((x2064*x2067)));
evalcond[4]=((-1.1335)+(((1.8)*cj0*py))+(((-1.8)*x2067))+(((-1.0)*pp))+(((-0.135)*x2064))+(((0.15)*x2073))+(((1.4)*pz))+((x2065*x2072))+((x2065*x2071))+(((-0.15)*x2064*x2067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2074=(cj0*px);
IkReal x2075=(py*sj0);
IkReal x2076=((0.09)*cj3);
IkReal x2077=(cj0*sj0);
IkReal x2078=((0.405)*sj3);
IkReal x2079=(px*py);
CheckValue<IkReal> x2080=IKPowWithIntegerCheck((((x2075*x2078))+(((-1.0)*x2074*x2076))+(((0.075)*x2074))+(((0.075)*x2075))+((x2074*x2078))+(((-1.0)*x2075*x2076))),-1);
if(!x2080.valid){
continue;
}
CheckValue<IkReal> x2081=IKPowWithIntegerCheck(((0.075)+x2078+(((-1.0)*x2076))),-1);
if(!x2081.valid){
continue;
}
if( IKabs(((x2080.value)*(((((-0.9)*x2074))+(((-0.9)*x2075))+(((-1.0)*x2079))+((cj0*py*x2075))+(((-1.0)*px*sj0*x2074))+(((2.0)*cj0*py*x2074)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2081.value)*((x2075+x2074)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2080.value)*(((((-0.9)*x2074))+(((-0.9)*x2075))+(((-1.0)*x2079))+((cj0*py*x2075))+(((-1.0)*px*sj0*x2074))+(((2.0)*cj0*py*x2074))))))+IKsqr(((x2081.value)*((x2075+x2074))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2080.value)*(((((-0.9)*x2074))+(((-0.9)*x2075))+(((-1.0)*x2079))+((cj0*py*x2075))+(((-1.0)*px*sj0*x2074))+(((2.0)*cj0*py*x2074))))), ((x2081.value)*((x2075+x2074))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2082=IKcos(j1);
IkReal x2083=IKsin(j1);
IkReal x2084=((0.15)*py);
IkReal x2085=((0.09)*cj3);
IkReal x2086=(px*sj0);
IkReal x2087=(py*sj0);
IkReal x2088=((1.0)*py);
IkReal x2089=((0.405)*sj3);
IkReal x2090=(sj0*x2082);
IkReal x2091=(cj0*x2083);
IkReal x2092=(cj0*px*x2082);
evalcond[0]=((((-1.0)*x2087))+(((0.075)*x2082))+((x2082*x2089))+(((-1.0)*x2082*x2085))+(((-1.0)*cj0*px)));
evalcond[1]=((0.289490740740741)+(((-0.555555555555556)*pp))+(((0.230555555555556)*x2083))+(((0.425)*sj3*x2083))+(((-0.222222222222222)*pz*x2083))+(((0.0354166666666667)*sj3))+(((0.759259259259259)*pz)));
evalcond[2]=(((px*x2091))+(((0.9)*x2082))+((x2083*x2087))+((x2082*x2086))+(((-1.0)*cj0*x2082*x2088)));
evalcond[3]=((0.075)+(((-1.0)*x2082*x2087))+x2089+(((-1.0)*x2085))+(((0.9)*x2083))+(((-1.0)*x2088*x2091))+((x2083*x2086))+(((-1.0)*x2092)));
evalcond[4]=((-1.1335)+((x2084*x2090))+((x2084*x2091))+(((-0.15)*x2083*x2086))+(((1.8)*cj0*py))+(((-1.0)*pp))+(((-1.8)*x2086))+(((1.4)*pz))+(((-0.135)*x2083))+(((0.15)*x2092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2093=IKPowWithIntegerCheck(((0.230555555555556)+(((-0.222222222222222)*pz))+(((0.425)*sj3))),-1);
if(!x2093.valid){
continue;
}
CheckValue<IkReal> x2094=IKPowWithIntegerCheck(((0.075)+(((0.405)*sj3))+(((-0.09)*cj3))),-1);
if(!x2094.valid){
continue;
}
if( IKabs(((x2093.value)*(((-0.289490740740741)+(((-0.0354166666666667)*sj3))+(((-0.759259259259259)*pz))+(((0.555555555555556)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2094.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2093.value)*(((-0.289490740740741)+(((-0.0354166666666667)*sj3))+(((-0.759259259259259)*pz))+(((0.555555555555556)*pp))))))+IKsqr(((x2094.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2093.value)*(((-0.289490740740741)+(((-0.0354166666666667)*sj3))+(((-0.759259259259259)*pz))+(((0.555555555555556)*pp))))), ((x2094.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2095=IKcos(j1);
IkReal x2096=IKsin(j1);
IkReal x2097=((0.15)*py);
IkReal x2098=((0.09)*cj3);
IkReal x2099=(px*sj0);
IkReal x2100=(py*sj0);
IkReal x2101=((1.0)*py);
IkReal x2102=((0.405)*sj3);
IkReal x2103=(sj0*x2095);
IkReal x2104=(cj0*x2096);
IkReal x2105=(cj0*px*x2095);
evalcond[0]=((((0.075)*x2095))+(((-1.0)*x2095*x2098))+(((-1.0)*x2100))+((x2095*x2102))+(((-1.0)*cj0*px)));
evalcond[1]=((0.289490740740741)+(((-0.555555555555556)*pp))+(((0.425)*sj3*x2096))+(((0.0354166666666667)*sj3))+(((0.230555555555556)*x2096))+(((-0.222222222222222)*pz*x2096))+(((0.759259259259259)*pz)));
evalcond[2]=(((px*x2104))+(((-1.0)*cj0*x2095*x2101))+((x2096*x2100))+(((0.9)*x2095))+((x2095*x2099)));
evalcond[3]=((0.075)+(((-1.0)*x2098))+(((-1.0)*x2101*x2104))+(((-1.0)*x2095*x2100))+((x2096*x2099))+x2102+(((-1.0)*x2105))+(((0.9)*x2096)));
evalcond[4]=((-1.1335)+(((1.8)*cj0*py))+(((0.15)*x2105))+(((-1.0)*pp))+((x2097*x2103))+((x2097*x2104))+(((-0.15)*x2096*x2099))+(((1.4)*pz))+(((-1.8)*x2099))+(((-0.135)*x2096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=((1.0)+(((-3.2520325203252)*pz))+(((-6.21951219512195)*sj3)));
j1eval[1]=((1.0)+(((1.2)*cj3))+(((-5.4)*sj3)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x2106=(cj0*px);
IkReal x2107=((1.2)*cj3);
IkReal x2108=(py*sj0);
IkReal x2109=((5.4)*sj3);
j1eval[0]=((((-1.0)*x2106*x2109))+x2108+x2106+((x2107*x2108))+((x2106*x2107))+(((-1.0)*x2108*x2109)));
j1eval[1]=((1.0)+(((-1.0)*x2109))+x2107);
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x2110=((6.21951219512195)*sj3);
IkReal x2111=((3.2520325203252)*pz);
IkReal x2112=((6.91056910569106)*sj3);
IkReal x2113=(px*sj0);
IkReal x2114=(cj0*py);
IkReal x2115=((3.613369467028)*pz);
IkReal x2116=(x2110+x2111);
j1eval[0]=((1.0)+(((-1.0)*x2116)));
j1eval[1]=((1.0)+(((-1.0)*x2112*x2113))+(((1.11111111111111)*x2113))+(((-1.0)*x2116))+(((-1.11111111111111)*x2114))+((x2114*x2115))+((x2112*x2114))+(((-1.0)*x2113*x2115)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal gconst1=((0.16078431372549)+(((-0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.16078431372549)+sj3+(((0.522875816993464)*pz)))))+(IKabs(((-1.0)+(IKsign(cj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2117=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x2117)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
if( (((-0.160784313599385)+x2117)) < -1-IKFAST_SINCOS_THRESH || (((-0.160784313599385)+x2117)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((-1.0)*(IKasin(((-0.160784313599385)+x2117))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x2117)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
j1eval[0]=((1.0)+(((21.4285713178271)*pz))+(((9.10714281007653)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2118=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x2118)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
if( (((-0.160784313599385)+x2118)) < -1-IKFAST_SINCOS_THRESH || (((-0.160784313599385)+x2118)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((-1.0)*(IKasin(((-0.160784313599385)+x2118))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x2118)));
j1eval[0]=((1.0)+(((-1.11111111111111)*cj0*py))+(((1.11111111111111)*px*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2119=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x2119)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
if( (((-0.160784313599385)+x2119)) < -1-IKFAST_SINCOS_THRESH || (((-0.160784313599385)+x2119)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((-1.0)*(IKasin(((-0.160784313599385)+x2119))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x2119)));
j1eval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2120=IKsin(j1);
IkReal x2121=IKcos(j1);
IkReal x2122=((0.211764705882353)*pz);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2123=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2124=((0.09)*x2123);
evalcond[0]=((0.9)*x2121);
evalcond[1]=((-0.00988235299224913)+(((-1.0)*x2124))+(((-1.0)*x2122))+(((-0.9)*x2120)));
evalcond[2]=((-0.00415058824227405)+(((-0.0378)*x2123))+(((-0.0889411764705882)*pz))+(((-0.135)*x2120)));
evalcond[3]=(((x2121*x2124))+((x2121*x2122))+(((0.00988235299224913)*x2121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*(py*py)))+(((10365853666.6667)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2125=IKcos(j1);
IkReal x2126=IKsin(j1);
IkReal x2127=((0.211764705882353)*pz);
IkReal x2128=(py*x2126);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2129=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2130=((0.09)*x2129);
evalcond[0]=((((0.9)*x2125))+(((-1.0)*py*x2125)));
evalcond[1]=(((x2125*x2127))+((x2125*x2130))+(((0.00988235299224913)*x2125)));
evalcond[2]=((-0.00988235299224913)+(((-1.0)*x2130))+x2128+(((-1.0)*x2127))+(((-0.9)*x2126)));
evalcond[3]=((-0.00415058824227405)+(((0.15)*x2128))+(((-0.0378)*x2129))+(((-0.0889411764705882)*pz))+(((-0.135)*x2126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*(py*py)))+(((10365853666.6667)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2131=IKcos(j1);
IkReal x2132=IKsin(j1);
IkReal x2133=((0.211764705882353)*pz);
IkReal x2134=(py*x2132);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2135=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2136=((0.09)*x2135);
evalcond[0]=((((0.9)*x2131))+((py*x2131)));
evalcond[1]=(((x2131*x2136))+((x2131*x2133))+(((0.00988235299224913)*x2131)));
evalcond[2]=((-0.00988235299224913)+(((-1.0)*x2133))+(((-1.0)*x2136))+(((-0.9)*x2132))+(((-1.0)*x2134)));
evalcond[3]=((-0.00415058824227405)+(((-0.0378)*x2135))+(((-0.0889411764705882)*pz))+(((-0.135)*x2132))+(((-0.15)*x2134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*(pz*pz)))+(((10365853666.6667)*(px*px))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2137=IKcos(j1);
IkReal x2138=IKsin(j1);
IkReal x2139=((0.211764705882353)*pz);
IkReal x2140=(px*x2138);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2141=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2142=((0.09)*x2141);
evalcond[0]=(((px*x2137))+(((0.9)*x2137)));
evalcond[1]=(((x2137*x2142))+(((0.00988235299224913)*x2137))+((x2137*x2139)));
evalcond[2]=((-0.00988235299224913)+(((-1.0)*x2140))+(((-1.0)*x2139))+(((-1.0)*x2142))+(((-0.9)*x2138)));
evalcond[3]=((-0.00415058824227405)+(((-0.15)*x2140))+(((-0.0889411764705882)*pz))+(((-0.135)*x2138))+(((-0.0378)*x2141)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*(pz*pz)))+(((10365853666.6667)*(px*px))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2143=IKcos(j1);
IkReal x2144=IKsin(j1);
IkReal x2145=((0.211764705882353)*pz);
IkReal x2146=(px*x2144);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2147=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2148=((0.09)*x2147);
evalcond[0]=((((-1.0)*px*x2143))+(((0.9)*x2143)));
evalcond[1]=(((x2143*x2148))+((x2143*x2145))+(((0.00988235299224913)*x2143)));
evalcond[2]=((-0.00988235299224913)+x2146+(((-0.9)*x2144))+(((-1.0)*x2145))+(((-1.0)*x2148)));
evalcond[3]=((-0.00415058824227405)+(((-0.135)*x2144))+(((-0.0889411764705882)*pz))+(((0.15)*x2146))+(((-0.0378)*x2147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2149=((621951220.0)*pz);
IkReal x2150=(px*sj0);
IkReal x2151=((10365853666.6667)*pp);
IkReal x2152=(cj0*py);
CheckValue<IkReal> x2153=IKPowWithIntegerCheck((((cj0*px))+((py*sj0))),-1);
if(!x2153.valid){
continue;
}
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
if( IKabs(((-10112926837.2833)+x2151+x2149)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2153.value)*(((-9101634153.54512)+(((-10112926837.2833)*x2150))+(((-1.0)*x2149*x2152))+((x2149*x2150))+(((9329268300.0)*pp))+(((0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((10112926837.2833)*x2152))+((x2150*x2151))+(((559756098.211765)*pz))+(((-1.0)*x2151*x2152)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-10112926837.2833)+x2151+x2149))+IKsqr(((x2153.value)*(((-9101634153.54512)+(((-10112926837.2833)*x2150))+(((-1.0)*x2149*x2152))+((x2149*x2150))+(((9329268300.0)*pp))+(((0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((10112926837.2833)*x2152))+((x2150*x2151))+(((559756098.211765)*pz))+(((-1.0)*x2151*x2152))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-10112926837.2833)+x2151+x2149), ((x2153.value)*(((-9101634153.54512)+(((-10112926837.2833)*x2150))+(((-1.0)*x2149*x2152))+((x2149*x2150))+(((9329268300.0)*pp))+(((0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((10112926837.2833)*x2152))+((x2150*x2151))+(((559756098.211765)*pz))+(((-1.0)*x2151*x2152))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2154=IKsin(j1);
IkReal x2155=IKcos(j1);
IkReal x2156=((0.15)*py);
IkReal x2157=((0.15)*px);
IkReal x2158=((0.211764705882353)*pz);
IkReal x2159=((1.0)*py);
IkReal x2160=((1.0)*px);
IkReal x2161=(sj0*x2155);
IkReal x2162=(cj0*x2154);
IkReal x2163=(sj0*x2154);
IkReal x2164=(cj0*x2155);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2165=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2166=((0.09)*x2165);
evalcond[0]=((0.542000000004466)+(((-0.555555555555556)*pp))+(((-0.0333333333333333)*pz))+(((5.3594771199795e-11)*x2154)));
evalcond[1]=(((px*x2161))+((px*x2162))+(((0.9)*x2155))+(((-1.0)*x2159*x2164))+((py*x2163)));
evalcond[2]=(((x2155*x2158))+(((-1.0)*cj0*x2160))+(((0.00988235299224913)*x2155))+((x2155*x2166))+(((-1.0)*sj0*x2159)));
evalcond[3]=((-0.00988235299224913)+(((-1.0)*x2160*x2163))+((px*x2164))+(((-0.9)*x2154))+(((-1.0)*x2158))+(((-1.0)*x2166))+((py*x2162))+((py*x2161)));
evalcond[4]=((-0.00415058824227405)+((x2157*x2164))+(((-0.135)*x2154))+(((-1.0)*x2157*x2163))+(((-0.0889411764705882)*pz))+((x2156*x2162))+((x2156*x2161))+(((-0.0378)*x2165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2167=(cj0*px);
IkReal x2168=(py*sj0);
IkReal x2169=((10365853666.6667)*pp);
IkReal x2170=((621951220.0)*pz);
CheckValue<IkReal> x2171=IKPowWithIntegerCheck(((0.9)+((px*sj0))+(((-1.0)*cj0*py))),-1);
if(!x2171.valid){
continue;
}
if( IKabs(((-10112926837.2833)+x2170+x2169)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2171.value)*(((((-1.0)*x2168*x2170))+(((10112926837.2833)*x2168))+(((10112926837.2833)*x2167))+(((-1.0)*x2168*x2169))+(((-1.0)*x2167*x2169))+(((-1.0)*x2167*x2170)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-10112926837.2833)+x2170+x2169))+IKsqr(((x2171.value)*(((((-1.0)*x2168*x2170))+(((10112926837.2833)*x2168))+(((10112926837.2833)*x2167))+(((-1.0)*x2168*x2169))+(((-1.0)*x2167*x2169))+(((-1.0)*x2167*x2170))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-10112926837.2833)+x2170+x2169), ((x2171.value)*(((((-1.0)*x2168*x2170))+(((10112926837.2833)*x2168))+(((10112926837.2833)*x2167))+(((-1.0)*x2168*x2169))+(((-1.0)*x2167*x2169))+(((-1.0)*x2167*x2170))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2172=IKsin(j1);
IkReal x2173=IKcos(j1);
IkReal x2174=((0.15)*py);
IkReal x2175=((0.15)*px);
IkReal x2176=((0.211764705882353)*pz);
IkReal x2177=((1.0)*py);
IkReal x2178=((1.0)*px);
IkReal x2179=(sj0*x2173);
IkReal x2180=(cj0*x2172);
IkReal x2181=(sj0*x2172);
IkReal x2182=(cj0*x2173);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2183=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2184=((0.09)*x2183);
evalcond[0]=((0.542000000004466)+(((-0.555555555555556)*pp))+(((-0.0333333333333333)*pz))+(((5.3594771199795e-11)*x2172)));
evalcond[1]=(((px*x2179))+((px*x2180))+(((-1.0)*x2177*x2182))+(((0.9)*x2173))+((py*x2181)));
evalcond[2]=((((-1.0)*cj0*x2178))+((x2173*x2176))+(((0.00988235299224913)*x2173))+(((-1.0)*sj0*x2177))+((x2173*x2184)));
evalcond[3]=((-0.00988235299224913)+((px*x2182))+(((-1.0)*x2184))+(((-0.9)*x2172))+(((-1.0)*x2178*x2181))+(((-1.0)*x2176))+((py*x2180))+((py*x2179)));
evalcond[4]=((-0.00415058824227405)+(((-1.0)*x2175*x2181))+((x2174*x2179))+(((-0.135)*x2172))+((x2174*x2180))+(((-0.0889411764705882)*pz))+((x2175*x2182))+(((-0.0378)*x2183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
CheckValue<IkReal> x2185=IKPowWithIntegerCheck(((0.00988235299224913)+(((0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((0.211764705882353)*pz))),-1);
if(!x2185.valid){
continue;
}
if( IKabs(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2185.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp))))+IKsqr(((x2185.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp))), ((x2185.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2186=IKsin(j1);
IkReal x2187=IKcos(j1);
IkReal x2188=((0.15)*py);
IkReal x2189=((0.15)*px);
IkReal x2190=((0.211764705882353)*pz);
IkReal x2191=((1.0)*py);
IkReal x2192=((1.0)*px);
IkReal x2193=(sj0*x2187);
IkReal x2194=(cj0*x2186);
IkReal x2195=(sj0*x2186);
IkReal x2196=(cj0*x2187);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2197=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2198=((0.09)*x2197);
evalcond[0]=((0.542000000004466)+(((-0.555555555555556)*pp))+(((-0.0333333333333333)*pz))+(((5.3594771199795e-11)*x2186)));
evalcond[1]=(((py*x2195))+(((-1.0)*x2191*x2196))+((px*x2194))+((px*x2193))+(((0.9)*x2187)));
evalcond[2]=((((0.00988235299224913)*x2187))+(((-1.0)*cj0*x2192))+((x2187*x2190))+((x2187*x2198))+(((-1.0)*sj0*x2191)));
evalcond[3]=((-0.00988235299224913)+((py*x2194))+((py*x2193))+(((-0.9)*x2186))+(((-1.0)*x2192*x2195))+((px*x2196))+(((-1.0)*x2190))+(((-1.0)*x2198)));
evalcond[4]=((-0.00415058824227405)+(((-1.0)*x2189*x2195))+(((-0.0889411764705882)*pz))+((x2189*x2196))+((x2188*x2194))+((x2188*x2193))+(((-0.0378)*x2197))+(((-0.135)*x2186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst1=((0.16078431372549)+(((-0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.16078431372549)+sj3+(((0.522875816993464)*pz)))))+(IKabs(((1.0)+(IKsign(cj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2199=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x2199)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))))));
if( (((0.160784313599385)+(((-1.0)*x2199)))) < -1-IKFAST_SINCOS_THRESH || (((0.160784313599385)+(((-1.0)*x2199)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(((-1.0)*(IKasin(((0.160784313599385)+(((-1.0)*x2199))))))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x2199)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
j1eval[0]=((1.0)+(((-9.10714281007653)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((21.4285713178271)*pz)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2200=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x2200)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))))));
if( (((-0.160784313599385)+x2200)) < -1-IKFAST_SINCOS_THRESH || (((-0.160784313599385)+x2200)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(IKasin(((-0.160784313599385)+x2200))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x2200)));
j1eval[0]=((1.0)+(((-1.11111111111111)*cj0*py))+(((1.11111111111111)*px*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2201=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x2201)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))))));
if( (((0.160784313599385)+(((-1.0)*x2201)))) < -1-IKFAST_SINCOS_THRESH || (((0.160784313599385)+(((-1.0)*x2201)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(((-1.0)*(IKasin(((0.160784313599385)+(((-1.0)*x2201))))))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x2201)));
j1eval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2202=IKsin(j1);
IkReal x2203=IKcos(j1);
IkReal x2204=((0.211764705882353)*pz);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2205=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2206=((0.09)*x2205);
evalcond[0]=((0.9)*x2203);
evalcond[1]=((-0.00988235299224913)+x2206+(((-1.0)*x2204))+(((-0.9)*x2202)));
evalcond[2]=((-0.00415058824227405)+(((0.0378)*x2205))+(((-0.0889411764705882)*pz))+(((-0.135)*x2202)));
evalcond[3]=((((-1.0)*x2203*x2206))+(((0.00988235299224913)*x2203))+((x2203*x2204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*(py*py)))+(((10365853666.6667)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2207=IKcos(j1);
IkReal x2208=IKsin(j1);
IkReal x2209=((0.211764705882353)*pz);
IkReal x2210=(py*x2208);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2211=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2212=((0.09)*x2211);
evalcond[0]=((((0.9)*x2207))+(((-1.0)*py*x2207)));
evalcond[1]=((((-1.0)*x2207*x2212))+(((0.00988235299224913)*x2207))+((x2207*x2209)));
evalcond[2]=((-0.00988235299224913)+x2212+x2210+(((-1.0)*x2209))+(((-0.9)*x2208)));
evalcond[3]=((-0.00415058824227405)+(((0.0378)*x2211))+(((0.15)*x2210))+(((-0.0889411764705882)*pz))+(((-0.135)*x2208)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*(py*py)))+(((10365853666.6667)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2213=IKcos(j1);
IkReal x2214=IKsin(j1);
IkReal x2215=((0.211764705882353)*pz);
IkReal x2216=(py*x2214);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2217=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2218=((0.09)*x2217);
evalcond[0]=((((0.9)*x2213))+((py*x2213)));
evalcond[1]=((((0.00988235299224913)*x2213))+(((-1.0)*x2213*x2218))+((x2213*x2215)));
evalcond[2]=((-0.00988235299224913)+(((-1.0)*x2216))+x2218+(((-1.0)*x2215))+(((-0.9)*x2214)));
evalcond[3]=((-0.00415058824227405)+(((0.0378)*x2217))+(((-0.15)*x2216))+(((-0.0889411764705882)*pz))+(((-0.135)*x2214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*(pz*pz)))+(((10365853666.6667)*(px*px))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2219=IKcos(j1);
IkReal x2220=IKsin(j1);
IkReal x2221=((0.211764705882353)*pz);
IkReal x2222=(px*x2220);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2223=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2224=((0.09)*x2223);
evalcond[0]=((((0.9)*x2219))+((px*x2219)));
evalcond[1]=((((-1.0)*x2219*x2224))+(((0.00988235299224913)*x2219))+((x2219*x2221)));
evalcond[2]=((-0.00988235299224913)+(((-0.9)*x2220))+x2224+(((-1.0)*x2222))+(((-1.0)*x2221)));
evalcond[3]=((-0.00415058824227405)+(((-0.135)*x2220))+(((-0.0889411764705882)*pz))+(((0.0378)*x2223))+(((-0.15)*x2222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*(pz*pz)))+(((10365853666.6667)*(px*px))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2225=IKcos(j1);
IkReal x2226=IKsin(j1);
IkReal x2227=((0.211764705882353)*pz);
IkReal x2228=(px*x2226);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2229=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2230=((0.09)*x2229);
evalcond[0]=((((-1.0)*px*x2225))+(((0.9)*x2225)));
evalcond[1]=((((-1.0)*x2225*x2230))+((x2225*x2227))+(((0.00988235299224913)*x2225)));
evalcond[2]=((-0.00988235299224913)+(((-0.9)*x2226))+x2228+x2230+(((-1.0)*x2227)));
evalcond[3]=((-0.00415058824227405)+(((-0.135)*x2226))+(((-0.0889411764705882)*pz))+(((0.0378)*x2229))+(((0.15)*x2228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2231=(px*sj0);
IkReal x2232=((621951220.0)*pz);
IkReal x2233=(cj0*py);
IkReal x2234=((10365853666.6667)*pp);
CheckValue<IkReal> x2235=IKPowWithIntegerCheck((((cj0*px))+((py*sj0))),-1);
if(!x2235.valid){
continue;
}
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
if( IKabs(((-10112926837.2833)+x2232+x2234)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2235.value)*(((-9101634153.54512)+(((9329268300.0)*pp))+(((-1.0)*x2232*x2233))+(((559756098.211765)*pz))+((x2231*x2232))+((x2231*x2234))+(((10112926837.2833)*x2233))+(((-1.0)*x2233*x2234))+(((-0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((-10112926837.2833)*x2231)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-10112926837.2833)+x2232+x2234))+IKsqr(((x2235.value)*(((-9101634153.54512)+(((9329268300.0)*pp))+(((-1.0)*x2232*x2233))+(((559756098.211765)*pz))+((x2231*x2232))+((x2231*x2234))+(((10112926837.2833)*x2233))+(((-1.0)*x2233*x2234))+(((-0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((-10112926837.2833)*x2231))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-10112926837.2833)+x2232+x2234), ((x2235.value)*(((-9101634153.54512)+(((9329268300.0)*pp))+(((-1.0)*x2232*x2233))+(((559756098.211765)*pz))+((x2231*x2232))+((x2231*x2234))+(((10112926837.2833)*x2233))+(((-1.0)*x2233*x2234))+(((-0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((-10112926837.2833)*x2231))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2236=IKsin(j1);
IkReal x2237=IKcos(j1);
IkReal x2238=((0.15)*py);
IkReal x2239=((0.15)*px);
IkReal x2240=((0.211764705882353)*pz);
IkReal x2241=((1.0)*py);
IkReal x2242=((1.0)*px);
IkReal x2243=(sj0*x2237);
IkReal x2244=(cj0*x2236);
IkReal x2245=(sj0*x2236);
IkReal x2246=(cj0*x2237);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2247=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2248=((0.09)*x2247);
evalcond[0]=((0.542000000004466)+(((-0.555555555555556)*pp))+(((-0.0333333333333333)*pz))+(((5.3594771199795e-11)*x2236)));
evalcond[1]=((((-1.0)*x2241*x2246))+((px*x2244))+((px*x2243))+((py*x2245))+(((0.9)*x2237)));
evalcond[2]=((((-1.0)*x2237*x2248))+(((-1.0)*cj0*x2242))+(((-1.0)*sj0*x2241))+(((0.00988235299224913)*x2237))+((x2237*x2240)));
evalcond[3]=((-0.00988235299224913)+x2248+(((-0.9)*x2236))+(((-1.0)*x2240))+((px*x2246))+(((-1.0)*x2242*x2245))+((py*x2244))+((py*x2243)));
evalcond[4]=((-0.00415058824227405)+(((-0.0889411764705882)*pz))+(((-1.0)*x2239*x2245))+(((0.0378)*x2247))+((x2239*x2246))+((x2238*x2243))+((x2238*x2244))+(((-0.135)*x2236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2249=(cj0*px);
IkReal x2250=(py*sj0);
IkReal x2251=((10365853666.6667)*pp);
IkReal x2252=((621951220.0)*pz);
CheckValue<IkReal> x2253=IKPowWithIntegerCheck(((0.9)+((px*sj0))+(((-1.0)*cj0*py))),-1);
if(!x2253.valid){
continue;
}
if( IKabs(((-10112926837.2833)+x2252+x2251)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2253.value)*(((((-1.0)*x2249*x2251))+(((-1.0)*x2249*x2252))+(((10112926837.2833)*x2249))+(((10112926837.2833)*x2250))+(((-1.0)*x2250*x2251))+(((-1.0)*x2250*x2252)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-10112926837.2833)+x2252+x2251))+IKsqr(((x2253.value)*(((((-1.0)*x2249*x2251))+(((-1.0)*x2249*x2252))+(((10112926837.2833)*x2249))+(((10112926837.2833)*x2250))+(((-1.0)*x2250*x2251))+(((-1.0)*x2250*x2252))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-10112926837.2833)+x2252+x2251), ((x2253.value)*(((((-1.0)*x2249*x2251))+(((-1.0)*x2249*x2252))+(((10112926837.2833)*x2249))+(((10112926837.2833)*x2250))+(((-1.0)*x2250*x2251))+(((-1.0)*x2250*x2252))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2254=IKsin(j1);
IkReal x2255=IKcos(j1);
IkReal x2256=((0.15)*py);
IkReal x2257=((0.15)*px);
IkReal x2258=((0.211764705882353)*pz);
IkReal x2259=((1.0)*py);
IkReal x2260=((1.0)*px);
IkReal x2261=(sj0*x2255);
IkReal x2262=(cj0*x2254);
IkReal x2263=(sj0*x2254);
IkReal x2264=(cj0*x2255);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2265=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2266=((0.09)*x2265);
evalcond[0]=((0.542000000004466)+(((-0.555555555555556)*pp))+(((-0.0333333333333333)*pz))+(((5.3594771199795e-11)*x2254)));
evalcond[1]=(((px*x2262))+((px*x2261))+((py*x2263))+(((-1.0)*x2259*x2264))+(((0.9)*x2255)));
evalcond[2]=(((x2255*x2258))+(((-1.0)*x2255*x2266))+(((-1.0)*sj0*x2259))+(((-1.0)*cj0*x2260))+(((0.00988235299224913)*x2255)));
evalcond[3]=((-0.00988235299224913)+((px*x2264))+x2266+((py*x2261))+((py*x2262))+(((-1.0)*x2260*x2263))+(((-1.0)*x2258))+(((-0.9)*x2254)));
evalcond[4]=((-0.00415058824227405)+((x2256*x2262))+((x2256*x2261))+((x2257*x2264))+(((-0.135)*x2254))+(((0.0378)*x2265))+(((-1.0)*x2257*x2263))+(((-0.0889411764705882)*pz)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
CheckValue<IkReal> x2267=IKPowWithIntegerCheck(((0.00988235299224913)+(((-0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((0.211764705882353)*pz))),-1);
if(!x2267.valid){
continue;
}
if( IKabs(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2267.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp))))+IKsqr(((x2267.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp))), ((x2267.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2268=IKsin(j1);
IkReal x2269=IKcos(j1);
IkReal x2270=((0.15)*py);
IkReal x2271=((0.15)*px);
IkReal x2272=((0.211764705882353)*pz);
IkReal x2273=((1.0)*py);
IkReal x2274=((1.0)*px);
IkReal x2275=(sj0*x2269);
IkReal x2276=(cj0*x2268);
IkReal x2277=(sj0*x2268);
IkReal x2278=(cj0*x2269);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2279=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2280=((0.09)*x2279);
evalcond[0]=((0.542000000004466)+(((-0.555555555555556)*pp))+(((-0.0333333333333333)*pz))+(((5.3594771199795e-11)*x2268)));
evalcond[1]=((((0.9)*x2269))+((px*x2276))+((px*x2275))+((py*x2277))+(((-1.0)*x2273*x2278)));
evalcond[2]=((((-1.0)*sj0*x2273))+(((-1.0)*x2269*x2280))+((x2269*x2272))+(((0.00988235299224913)*x2269))+(((-1.0)*cj0*x2274)));
evalcond[3]=((-0.00988235299224913)+((px*x2278))+x2280+(((-1.0)*x2274*x2277))+((py*x2275))+((py*x2276))+(((-1.0)*x2272))+(((-0.9)*x2268)));
evalcond[4]=((-0.00415058824227405)+((x2270*x2275))+((x2270*x2276))+(((0.0378)*x2279))+(((-0.0889411764705882)*pz))+(((-0.135)*x2268))+(((-1.0)*x2271*x2277))+((x2271*x2278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((3.10469847231699)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((1156810438.28432)+(((-1213967228.64635)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1156810438.28432)+(((-1213967228.64635)*pp))))+IKsqr(((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1156810438.28432)+(((-1213967228.64635)*pp))), ((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2281=IKsin(j1);
IkReal x2282=IKcos(j1);
CheckValue<IkReal> x2290=IKPowWithIntegerCheck(py,-1);
if(!x2290.valid){
continue;
}
IkReal x2283=x2290.value;
IkReal x2284=(py*sj0);
IkReal x2285=((0.0833333333333333)*pp);
IkReal x2286=((1.0)*px);
IkReal x2287=((0.15)*x2282);
IkReal x2288=(px*x2282);
IkReal x2289=(cj0*x2281);
evalcond[0]=((0.529398529505718)+(((-0.555555555555556)*pp))+(((-4.57636369784904e-10)*x2281)));
evalcond[1]=((((-1.0)*cj0*x2286))+(((-1.0)*x2284))+(((-4.57636369784904e-10)*x2282)));
evalcond[2]=(((x2281*x2284))+((sj0*x2288))+(((-1.0)*cj0*py*x2282))+((px*x2289))+(((0.9)*x2282)));
evalcond[3]=((4.57636369784904e-10)+((cj0*x2288))+((x2282*x2284))+(((-0.9)*x2281))+((py*x2289))+(((-1.0)*sj0*x2281*x2286)));
evalcond[4]=((6.86454554677356e-11)+(((0.0555902205741423)*x2283*x2288))+((x2281*x2285))+(((-0.0794097794258577)*x2281))+((sj0*x2283*x2287*(px*px)))+((x2283*x2285*x2288))+((x2284*x2287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.400443710475077)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((1529018594.85836)+(((-1526145402.02498)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1529018594.85836)+(((-1526145402.02498)*pp))))+IKsqr(((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1529018594.85836)+(((-1526145402.02498)*pp))), ((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2291=IKsin(j1);
IkReal x2292=IKcos(j1);
CheckValue<IkReal> x2300=IKPowWithIntegerCheck(py,-1);
if(!x2300.valid){
continue;
}
IkReal x2293=x2300.value;
IkReal x2294=(py*sj0);
IkReal x2295=((0.0833333333333333)*pp);
IkReal x2296=(cj0*px);
IkReal x2297=(cj0*py);
IkReal x2298=(px*x2292);
IkReal x2299=((0.15)*x2292);
evalcond[0]=((0.556601470472081)+(((-0.555555555555556)*pp))+(((-3.64025311623919e-10)*x2291)));
evalcond[1]=((((-3.64025311623919e-10)*x2292))+(((-1.0)*x2294))+(((-1.0)*x2296)));
evalcond[2]=(((sj0*x2298))+((x2291*x2294))+((x2291*x2296))+(((-1.0)*x2292*x2297))+(((0.9)*x2292)));
evalcond[3]=((3.64025311623919e-10)+(((-0.9)*x2291))+((x2291*x2297))+((x2292*x2296))+((x2292*x2294))+(((-1.0)*px*sj0*x2291)));
evalcond[4]=((5.46037967435879e-11)+((x2293*x2295*x2298))+((x2291*x2295))+(((0.0515097794291878)*x2293*x2298))+(((-0.0834902205708122)*x2291))+((x2294*x2299))+(((0.15)*px*sj0*x2293*x2298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2301=(px*sj0);
IkReal x2302=((0.222222222222222)*pz);
IkReal x2303=(cj0*px);
IkReal x2304=((0.0518518518518519)*pz);
IkReal x2305=(py*sj0);
IkReal x2306=((0.555555555555556)*pp);
IkReal x2307=((0.0354166666666667)*sj3);
IkReal x2308=(cj0*py);
IkReal x2309=((0.425)*sj3);
CheckValue<IkReal> x2310=IKPowWithIntegerCheck(((0.0683333333333333)+(((-1.0)*x2302))+(((-1.0)*x2309))),-1);
if(!x2310.valid){
continue;
}
CheckValue<IkReal> x2311=IKPowWithIntegerCheck(((0.0615)+(((-1.0)*x2301*x2302))+(((-1.0)*x2301*x2309))+((x2308*x2309))+(((-0.2)*pz))+(((-0.3825)*sj3))+(((0.0683333333333333)*x2301))+(((-0.0683333333333333)*x2308))+((x2302*x2308))),-1);
if(!x2311.valid){
continue;
}
if( IKabs(((x2310.value)*(((-0.547694444444444)+x2304+x2307+x2306)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2311.value)*(((((-1.0)*x2303*x2304))+(((-1.0)*x2303*x2306))+(((-1.0)*x2303*x2307))+(((-1.0)*x2304*x2305))+(((0.547694444444444)*x2305))+(((0.547694444444444)*x2303))+(((-1.0)*x2305*x2306))+(((-1.0)*x2305*x2307)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2310.value)*(((-0.547694444444444)+x2304+x2307+x2306))))+IKsqr(((x2311.value)*(((((-1.0)*x2303*x2304))+(((-1.0)*x2303*x2306))+(((-1.0)*x2303*x2307))+(((-1.0)*x2304*x2305))+(((0.547694444444444)*x2305))+(((0.547694444444444)*x2303))+(((-1.0)*x2305*x2306))+(((-1.0)*x2305*x2307))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2310.value)*(((-0.547694444444444)+x2304+x2307+x2306))), ((x2311.value)*(((((-1.0)*x2303*x2304))+(((-1.0)*x2303*x2306))+(((-1.0)*x2303*x2307))+(((-1.0)*x2304*x2305))+(((0.547694444444444)*x2305))+(((0.547694444444444)*x2303))+(((-1.0)*x2305*x2306))+(((-1.0)*x2305*x2307))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2312=IKcos(j1);
IkReal x2313=IKsin(j1);
IkReal x2314=((0.15)*py);
IkReal x2315=((0.09)*cj3);
IkReal x2316=(px*sj0);
IkReal x2317=((0.405)*sj3);
IkReal x2318=(py*sj0);
IkReal x2319=((1.0)*cj0);
IkReal x2320=(sj0*x2312);
IkReal x2321=(cj0*x2313);
IkReal x2322=(cj0*px*x2312);
evalcond[0]=(((x2312*x2315))+(((-1.0)*x2318))+(((-1.0)*x2312*x2317))+(((0.075)*x2312))+(((-1.0)*px*x2319)));
evalcond[1]=((0.547694444444444)+(((-0.555555555555556)*pp))+(((-0.0354166666666667)*sj3))+(((-0.0518518518518519)*pz))+(((0.0683333333333333)*x2313))+(((-0.425)*sj3*x2313))+(((-0.222222222222222)*pz*x2313)));
evalcond[2]=(((x2312*x2316))+(((0.9)*x2312))+(((-1.0)*py*x2312*x2319))+((px*x2321))+((x2313*x2318)));
evalcond[3]=((-0.075)+((x2312*x2318))+x2322+x2317+(((-1.0)*x2313*x2316))+(((-0.9)*x2313))+((py*x2321))+(((-1.0)*x2315)));
evalcond[4]=((-0.6444)+(((1.8)*cj0*py))+(((-1.8)*x2316))+(((-0.135)*x2313))+((x2314*x2321))+((x2314*x2320))+(((0.15)*x2322))+(((-1.0)*pp))+(((-0.06)*pz))+(((-0.15)*x2313*x2316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2323=(cj0*px);
IkReal x2324=(py*sj0);
IkReal x2325=((0.09)*cj3);
IkReal x2326=(cj0*sj0);
IkReal x2327=((0.405)*sj3);
IkReal x2328=(px*py);
CheckValue<IkReal> x2329=IKPowWithIntegerCheck(((((-1.0)*x2324*x2327))+(((0.075)*x2323))+(((0.075)*x2324))+(((-1.0)*x2323*x2327))+((x2324*x2325))+((x2323*x2325))),-1);
if(!x2329.valid){
continue;
}
CheckValue<IkReal> x2330=IKPowWithIntegerCheck(((0.075)+x2325+(((-1.0)*x2327))),-1);
if(!x2330.valid){
continue;
}
if( IKabs(((x2329.value)*(((((2.0)*cj0*py*x2323))+((cj0*py*x2324))+(((-0.9)*x2324))+(((-0.9)*x2323))+(((-1.0)*px*sj0*x2323))+(((-1.0)*x2328)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2330.value)*((x2323+x2324)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2329.value)*(((((2.0)*cj0*py*x2323))+((cj0*py*x2324))+(((-0.9)*x2324))+(((-0.9)*x2323))+(((-1.0)*px*sj0*x2323))+(((-1.0)*x2328))))))+IKsqr(((x2330.value)*((x2323+x2324))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2329.value)*(((((2.0)*cj0*py*x2323))+((cj0*py*x2324))+(((-0.9)*x2324))+(((-0.9)*x2323))+(((-1.0)*px*sj0*x2323))+(((-1.0)*x2328))))), ((x2330.value)*((x2323+x2324))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2331=IKcos(j1);
IkReal x2332=IKsin(j1);
IkReal x2333=((0.15)*py);
IkReal x2334=((0.09)*cj3);
IkReal x2335=(px*sj0);
IkReal x2336=((0.405)*sj3);
IkReal x2337=(py*sj0);
IkReal x2338=((1.0)*cj0);
IkReal x2339=(sj0*x2331);
IkReal x2340=(cj0*x2332);
IkReal x2341=(cj0*px*x2331);
evalcond[0]=(((x2331*x2334))+(((-1.0)*x2331*x2336))+(((0.075)*x2331))+(((-1.0)*px*x2338))+(((-1.0)*x2337)));
evalcond[1]=((0.547694444444444)+(((-0.555555555555556)*pp))+(((-0.0354166666666667)*sj3))+(((-0.0518518518518519)*pz))+(((0.0683333333333333)*x2332))+(((-0.222222222222222)*pz*x2332))+(((-0.425)*sj3*x2332)));
evalcond[2]=((((-1.0)*py*x2331*x2338))+((x2331*x2335))+(((0.9)*x2331))+((x2332*x2337))+((px*x2340)));
evalcond[3]=((-0.075)+((x2331*x2337))+(((-1.0)*x2334))+x2336+x2341+(((-1.0)*x2332*x2335))+((py*x2340))+(((-0.9)*x2332)));
evalcond[4]=((-0.6444)+(((1.8)*cj0*py))+((x2333*x2339))+(((-1.8)*x2335))+(((-1.0)*pp))+(((-0.06)*pz))+(((-0.135)*x2332))+(((0.15)*x2341))+((x2333*x2340))+(((-0.15)*x2332*x2335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2342=IKPowWithIntegerCheck(((0.0683333333333333)+(((-0.222222222222222)*pz))+(((-0.425)*sj3))),-1);
if(!x2342.valid){
continue;
}
CheckValue<IkReal> x2343=IKPowWithIntegerCheck(((0.075)+(((0.09)*cj3))+(((-0.405)*sj3))),-1);
if(!x2343.valid){
continue;
}
if( IKabs(((x2342.value)*(((-0.547694444444444)+(((0.0354166666666667)*sj3))+(((0.0518518518518519)*pz))+(((0.555555555555556)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2343.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2342.value)*(((-0.547694444444444)+(((0.0354166666666667)*sj3))+(((0.0518518518518519)*pz))+(((0.555555555555556)*pp))))))+IKsqr(((x2343.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2342.value)*(((-0.547694444444444)+(((0.0354166666666667)*sj3))+(((0.0518518518518519)*pz))+(((0.555555555555556)*pp))))), ((x2343.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2344=IKcos(j1);
IkReal x2345=IKsin(j1);
IkReal x2346=((0.15)*py);
IkReal x2347=((0.09)*cj3);
IkReal x2348=(px*sj0);
IkReal x2349=((0.405)*sj3);
IkReal x2350=(py*sj0);
IkReal x2351=((1.0)*cj0);
IkReal x2352=(sj0*x2344);
IkReal x2353=(cj0*x2345);
IkReal x2354=(cj0*px*x2344);
evalcond[0]=((((-1.0)*x2344*x2349))+(((-1.0)*x2350))+((x2344*x2347))+(((-1.0)*px*x2351))+(((0.075)*x2344)));
evalcond[1]=((0.547694444444444)+(((-0.555555555555556)*pp))+(((-0.0354166666666667)*sj3))+(((-0.222222222222222)*pz*x2345))+(((-0.0518518518518519)*pz))+(((0.0683333333333333)*x2345))+(((-0.425)*sj3*x2345)));
evalcond[2]=(((px*x2353))+((x2345*x2350))+((x2344*x2348))+(((-1.0)*py*x2344*x2351))+(((0.9)*x2344)));
evalcond[3]=((-0.075)+(((-1.0)*x2345*x2348))+x2354+x2349+((x2344*x2350))+(((-0.9)*x2345))+((py*x2353))+(((-1.0)*x2347)));
evalcond[4]=((-0.6444)+((x2346*x2352))+((x2346*x2353))+(((1.8)*cj0*py))+(((-1.8)*x2348))+(((-0.135)*x2345))+(((-0.15)*x2345*x2348))+(((-1.0)*pp))+(((-0.06)*pz))+(((0.15)*x2354)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2355=(cj0*px);
IkReal x2356=(px*py);
IkReal x2357=(py*sj0);
IkReal x2358=((0.365)*sj2);
IkReal x2359=(cj0*sj0);
IkReal x2360=((0.405)*cj3*sj2);
IkReal x2361=((0.405)*cj2*sj3);
IkReal x2362=((0.09)*cj2*cj3);
IkReal x2363=((0.09)*sj2*sj3);
CheckValue<IkReal> x2364=IKPowWithIntegerCheck((((x2357*x2358))+(((-1.0)*x2355*x2362))+((x2355*x2358))+(((-1.0)*x2357*x2362))+((x2355*x2360))+((x2355*x2361))+((x2355*x2363))+((x2357*x2363))+((x2357*x2360))+((x2357*x2361))+(((0.075)*x2357))+(((0.075)*x2355))),-1);
if(!x2364.valid){
continue;
}
CheckValue<IkReal> x2365=IKPowWithIntegerCheck(((0.075)+x2363+x2361+x2360+x2358+(((-1.0)*x2362))),-1);
if(!x2365.valid){
continue;
}
if( IKabs(((x2364.value)*(((((2.0)*cj0*py*x2355))+(((-1.0)*x2356))+((cj0*py*x2357))+(((-1.0)*px*sj0*x2355))+(((-0.9)*x2355))+(((-0.9)*x2357)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2365.value)*((x2357+x2355)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2364.value)*(((((2.0)*cj0*py*x2355))+(((-1.0)*x2356))+((cj0*py*x2357))+(((-1.0)*px*sj0*x2355))+(((-0.9)*x2355))+(((-0.9)*x2357))))))+IKsqr(((x2365.value)*((x2357+x2355))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2364.value)*(((((2.0)*cj0*py*x2355))+(((-1.0)*x2356))+((cj0*py*x2357))+(((-1.0)*px*sj0*x2355))+(((-0.9)*x2355))+(((-0.9)*x2357))))), ((x2365.value)*((x2357+x2355))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2366=IKcos(j1);
IkReal x2367=IKsin(j1);
IkReal x2368=((0.405)*sj3);
IkReal x2369=(cj0*sj2);
IkReal x2370=((0.15)*cj0);
IkReal x2371=(px*sj0);
IkReal x2372=((0.09)*cj3);
IkReal x2373=((0.365)*sj2);
IkReal x2374=((1.0)*cj2);
IkReal x2375=((0.73)*sj2);
IkReal x2376=((1.0)*py);
IkReal x2377=((0.405)*cj3);
IkReal x2378=(cj2*pz);
IkReal x2379=(cj0*px);
IkReal x2380=(cj2*x2367);
IkReal x2381=(px*x2366);
IkReal x2382=(py*x2367);
IkReal x2383=((0.09)*sj2*sj3);
IkReal x2384=(sj2*x2367);
IkReal x2385=(cj2*x2366);
IkReal x2386=(py*sj0*x2366);
evalcond[0]=(((x2366*x2371))+(((0.9)*x2366))+((x2367*x2379))+(((-1.0)*cj0*x2366*x2376))+((sj0*x2382)));
evalcond[1]=((((-1.0)*x2379))+((x2366*x2373))+(((0.075)*x2366))+((x2366*x2383))+((sj2*x2366*x2377))+(((-1.0)*x2372*x2385))+((x2368*x2385))+(((-1.0)*sj0*x2376)));
evalcond[2]=((0.9)+x2371+((x2367*x2383))+(((0.075)*x2367))+((x2367*x2373))+(((-1.0)*cj0*x2376))+(((-1.0)*x2372*x2380))+((x2368*x2380))+((x2377*x2384)));
evalcond[3]=((-0.365)+(((-1.0)*x2371*x2384))+x2378+(((-0.09)*sj3))+(((-1.0)*x2377))+(((-0.335)*cj2))+(((-0.075)*sj2))+(((-0.9)*x2384))+((sj2*x2386))+((x2369*x2381))+((x2369*x2382)));
evalcond[4]=((((-1.0)*x2374*x2386))+x2368+(((-1.0)*x2372))+(((0.075)*cj2))+(((-1.0)*cj0*x2374*x2382))+(((-1.0)*x2366*x2374*x2379))+(((0.9)*x2380))+((pz*sj2))+((x2371*x2380))+(((-0.335)*sj2)));
evalcond[5]=((-0.88895)+(((0.15)*x2386))+(((0.73)*x2369*x2381))+(((0.73)*x2369*x2382))+(((-0.135)*x2367))+(((1.8)*cj0*py))+(((-1.0)*x2367*x2371*x2375))+(((0.67)*pz))+(((-1.0)*pp))+(((-1.8)*x2371))+(((-0.657)*x2384))+(((-0.15)*x2367*x2371))+(((-0.05475)*sj2))+((x2375*x2386))+(((0.73)*x2378))+((x2370*x2381))+((x2370*x2382))+(((-0.24455)*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2387=(cj0*py);
IkReal x2388=(cj2*pz);
IkReal x2389=((0.405)*cj3);
IkReal x2390=((0.09)*sj3);
IkReal x2391=(py*sj0);
IkReal x2392=(cj0*px);
IkReal x2393=(px*sj0);
IkReal x2394=((0.335)*cj2);
IkReal x2395=((1.8)*sj2);
IkReal x2396=((0.075)*sj2);
IkReal x2397=(px*x2396);
CheckValue<IkReal> x2398 = IKatan2WithCheck(IkReal(((-0.3285)+((x2387*x2389))+((x2387*x2396))+((x2387*x2394))+((x2387*x2390))+(((0.365)*x2387))+(((-1.0)*x2390*x2393))+(((-1.0)*x2389*x2393))+(((-0.3645)*cj3))+(((-0.365)*x2393))+(((-1.0)*x2387*x2388))+(((-0.0675)*sj2))+(((-0.3015)*cj2))+(((0.9)*x2388))+((x2388*x2393))+(((-0.081)*sj3))+(((-1.0)*x2393*x2394))+(((-1.0)*x2393*x2396)))),IkReal((((x2392*x2396))+((x2392*x2394))+(((0.365)*x2391))+(((0.365)*x2392))+((x2390*x2392))+((x2390*x2391))+((x2391*x2394))+((x2391*x2396))+(((-1.0)*x2388*x2391))+(((-1.0)*x2388*x2392))+((x2389*x2392))+((x2389*x2391)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2398.valid){
continue;
}
CheckValue<IkReal> x2399=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj2*(pz*pz)))+((x2393*x2395))+((pp*sj2))+(((0.81)*sj2))+(((-1.0)*x2387*x2395)))),-1);
if(!x2399.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(x2398.value)+(((1.5707963267949)*(x2399.value))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2400=IKcos(j1);
IkReal x2401=IKsin(j1);
IkReal x2402=((0.405)*sj3);
IkReal x2403=(cj0*sj2);
IkReal x2404=((0.15)*cj0);
IkReal x2405=(px*sj0);
IkReal x2406=((0.09)*cj3);
IkReal x2407=((0.365)*sj2);
IkReal x2408=((1.0)*cj2);
IkReal x2409=((0.73)*sj2);
IkReal x2410=((1.0)*py);
IkReal x2411=((0.405)*cj3);
IkReal x2412=(cj2*pz);
IkReal x2413=(cj0*px);
IkReal x2414=(cj2*x2401);
IkReal x2415=(px*x2400);
IkReal x2416=(py*x2401);
IkReal x2417=((0.09)*sj2*sj3);
IkReal x2418=(sj2*x2401);
IkReal x2419=(cj2*x2400);
IkReal x2420=(py*sj0*x2400);
evalcond[0]=(((sj0*x2416))+((x2400*x2405))+(((-1.0)*cj0*x2400*x2410))+((x2401*x2413))+(((0.9)*x2400)));
evalcond[1]=((((0.075)*x2400))+(((-1.0)*x2413))+(((-1.0)*x2406*x2419))+(((-1.0)*sj0*x2410))+((x2400*x2407))+((x2402*x2419))+((x2400*x2417))+((sj2*x2400*x2411)));
evalcond[2]=((0.9)+(((-1.0)*cj0*x2410))+(((0.075)*x2401))+x2405+(((-1.0)*x2406*x2414))+((x2401*x2407))+((x2402*x2414))+((x2411*x2418))+((x2401*x2417)));
evalcond[3]=((-0.365)+((sj2*x2420))+(((-1.0)*x2405*x2418))+x2412+(((-0.9)*x2418))+(((-0.09)*sj3))+(((-0.335)*cj2))+(((-0.075)*sj2))+(((-1.0)*x2411))+((x2403*x2416))+((x2403*x2415)));
evalcond[4]=((((0.9)*x2414))+x2402+(((-1.0)*x2400*x2408*x2413))+(((-1.0)*x2406))+(((-1.0)*cj0*x2408*x2416))+((x2405*x2414))+(((0.075)*cj2))+((pz*sj2))+(((-0.335)*sj2))+(((-1.0)*x2408*x2420)));
evalcond[5]=((-0.88895)+(((-1.0)*x2401*x2405*x2409))+(((1.8)*cj0*py))+(((0.15)*x2420))+(((-0.657)*x2418))+(((0.73)*x2403*x2416))+(((0.73)*x2403*x2415))+((x2404*x2416))+((x2404*x2415))+(((0.67)*pz))+(((0.73)*x2412))+((x2409*x2420))+(((-1.0)*pp))+(((-0.15)*x2401*x2405))+(((-0.05475)*sj2))+(((-1.8)*x2405))+(((-0.24455)*cj2))+(((-0.135)*x2401)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2421=IKPowWithIntegerCheck(IKsign(((0.075)+(((0.365)*sj2))+(((0.09)*sj2*sj3))+(((-0.09)*cj2*cj3))+(((0.405)*cj2*sj3))+(((0.405)*cj3*sj2)))),-1);
if(!x2421.valid){
continue;
}
CheckValue<IkReal> x2422 = IKatan2WithCheck(IkReal(((-0.9)+(((-1.0)*px*sj0))+((cj0*py)))),IkReal((((cj0*px))+((py*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2422.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2421.value)))+(x2422.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2423=IKcos(j1);
IkReal x2424=IKsin(j1);
IkReal x2425=((0.405)*sj3);
IkReal x2426=(cj0*sj2);
IkReal x2427=((0.15)*cj0);
IkReal x2428=(px*sj0);
IkReal x2429=((0.09)*cj3);
IkReal x2430=((0.365)*sj2);
IkReal x2431=((1.0)*cj2);
IkReal x2432=((0.73)*sj2);
IkReal x2433=((1.0)*py);
IkReal x2434=((0.405)*cj3);
IkReal x2435=(cj2*pz);
IkReal x2436=(cj0*px);
IkReal x2437=(cj2*x2424);
IkReal x2438=(px*x2423);
IkReal x2439=(py*x2424);
IkReal x2440=((0.09)*sj2*sj3);
IkReal x2441=(sj2*x2424);
IkReal x2442=(cj2*x2423);
IkReal x2443=(py*sj0*x2423);
evalcond[0]=((((-1.0)*cj0*x2423*x2433))+((x2424*x2436))+((x2423*x2428))+(((0.9)*x2423))+((sj0*x2439)));
evalcond[1]=((((-1.0)*x2436))+(((-1.0)*x2429*x2442))+((x2423*x2440))+((x2425*x2442))+(((0.075)*x2423))+((x2423*x2430))+((sj2*x2423*x2434))+(((-1.0)*sj0*x2433)));
evalcond[2]=((0.9)+(((-1.0)*cj0*x2433))+((x2424*x2430))+x2428+((x2425*x2437))+((x2424*x2440))+((x2434*x2441))+(((0.075)*x2424))+(((-1.0)*x2429*x2437)));
evalcond[3]=((-0.365)+x2435+((sj2*x2443))+(((-0.09)*sj3))+(((-1.0)*x2434))+(((-0.335)*cj2))+(((-0.075)*sj2))+((x2426*x2439))+((x2426*x2438))+(((-0.9)*x2441))+(((-1.0)*x2428*x2441)));
evalcond[4]=(((x2428*x2437))+(((-1.0)*x2431*x2443))+x2425+(((-1.0)*x2423*x2431*x2436))+(((0.075)*cj2))+(((-1.0)*x2429))+((pz*sj2))+(((0.9)*x2437))+(((-1.0)*cj0*x2431*x2439))+(((-0.335)*sj2)));
evalcond[5]=((-0.88895)+((x2432*x2443))+(((0.15)*x2443))+(((0.73)*x2426*x2438))+(((0.73)*x2426*x2439))+(((1.8)*cj0*py))+(((-0.15)*x2424*x2428))+(((-1.8)*x2428))+(((0.67)*pz))+(((-0.135)*x2424))+(((-1.0)*x2424*x2428*x2432))+(((-1.0)*pp))+(((-0.05475)*sj2))+((x2427*x2438))+((x2427*x2439))+(((-0.24455)*cj2))+(((0.73)*x2435))+(((-0.657)*x2441)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x2446 = IKatan2WithCheck(IkReal(((1.8)*py)),IkReal(((-1.8)*px)),IKFAST_ATAN2_MAGTHRESH);
if(!x2446.valid){
continue;
}
IkReal x2444=((1.0)*(x2446.value));
if((((((3.24)*(px*px)))+(((3.24)*(py*py))))) < -0.00001)
continue;
CheckValue<IkReal> x2447=IKPowWithIntegerCheck(IKabs(IKsqrt(((((3.24)*(px*px)))+(((3.24)*(py*py)))))),-1);
if(!x2447.valid){
continue;
}
if( (((x2447.value)*(((-0.3868)+(((0.29565)*cj3))+(((0.12105)*cj2*sj3))+(((0.12105)*cj3*sj2))+(((0.25785)*cj2*cj3))+(((0.05475)*sj2))+(((-1.0)*pp))+(((0.0657)*sj3))+(((-0.25785)*sj2*sj3))+(((0.24455)*cj2)))))) < -1-IKFAST_SINCOS_THRESH || (((x2447.value)*(((-0.3868)+(((0.29565)*cj3))+(((0.12105)*cj2*sj3))+(((0.12105)*cj3*sj2))+(((0.25785)*cj2*cj3))+(((0.05475)*sj2))+(((-1.0)*pp))+(((0.0657)*sj3))+(((-0.25785)*sj2*sj3))+(((0.24455)*cj2)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x2445=IKasin(((x2447.value)*(((-0.3868)+(((0.29565)*cj3))+(((0.12105)*cj2*sj3))+(((0.12105)*cj3*sj2))+(((0.25785)*cj2*cj3))+(((0.05475)*sj2))+(((-1.0)*pp))+(((0.0657)*sj3))+(((-0.25785)*sj2*sj3))+(((0.24455)*cj2))))));
j0array[0]=((((-1.0)*x2445))+(((-1.0)*x2444)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+x2445+(((-1.0)*x2444)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j1eval[3];
IkReal x2448=(cj3*sj2);
IkReal x2449=(cj2*cj3);
IkReal x2450=(sj2*sj3);
IkReal x2451=(cj2*sj3);
j1eval[0]=((1.0)+(((-1.2)*x2449))+(((5.4)*x2448))+(((5.4)*x2451))+(((1.2)*x2450))+(((4.86666666666667)*sj2)));
j1eval[1]=((IKabs((((cj0*px))+((py*sj0)))))+(IKabs(((-0.9)+(((-1.0)*px*sj0))+((cj0*py))))));
j1eval[2]=IKsign(((0.075)+(((0.09)*x2450))+(((0.365)*sj2))+(((-0.09)*x2449))+(((0.405)*x2451))+(((0.405)*x2448))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x2452=pz*pz;
IkReal x2453=(pp*sj2);
IkReal x2454=((2.22222222222222)*sj2);
IkReal x2455=(cj0*py);
IkReal x2456=(px*sj0);
IkReal x2457=((1.8)*sj2);
IkReal x2458=(sj2*x2452);
j1eval[0]=(sj2+(((-1.0)*x2454*x2455))+(((-1.23456790123457)*x2458))+((x2454*x2456))+(((1.23456790123457)*x2453)));
j1eval[1]=IKsign((x2453+(((0.81)*sj2))+((x2456*x2457))+(((-1.0)*x2458))+(((-1.0)*x2455*x2457))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x2459=(cj0*px);
IkReal x2460=(py*sj0);
IkReal x2461=((4.86666666666667)*sj2);
IkReal x2462=((5.4)*cj2*sj3);
IkReal x2463=((5.4)*cj3*sj2);
IkReal x2464=((1.2)*cj2*cj3);
IkReal x2465=((1.2)*sj2*sj3);
j1eval[0]=(((x2459*x2463))+((x2459*x2465))+((x2459*x2462))+((x2459*x2461))+((x2460*x2463))+((x2460*x2462))+((x2460*x2461))+((x2460*x2465))+x2460+x2459+(((-1.0)*x2460*x2464))+(((-1.0)*x2459*x2464)));
j1eval[1]=((1.0)+x2465+x2461+x2462+x2463+(((-1.0)*x2464)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
j1eval[0]=((1.0375)+(((1.9125)*sj3))+(((-1.0)*pz)));
j1eval[1]=((1.0)+(((-1.2)*cj3))+(((5.4)*sj3)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x2466=(cj0*px);
IkReal x2467=((1.2)*cj3);
IkReal x2468=(py*sj0);
IkReal x2469=((5.4)*sj3);
j1eval[0]=(x2466+x2468+(((-1.0)*x2466*x2467))+((x2466*x2469))+(((-1.0)*x2467*x2468))+((x2468*x2469)));
j1eval[1]=((1.0)+x2469+(((-1.0)*x2467)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=1.0;
j2=0;
IkReal x2470=((5.4)*sj3);
IkReal x2471=((1.2)*cj3);
IkReal x2472=((6.0)*sj3);
IkReal x2473=(cj0*py);
IkReal x2474=(px*sj0);
IkReal x2475=((1.33333333333333)*cj3);
IkReal x2476=((1.0)+x2470);
j1eval[0]=(x2476+(((-1.11111111111111)*x2473))+(((-1.0)*x2472*x2473))+(((-1.0)*x2471))+(((-1.0)*x2474*x2475))+(((1.11111111111111)*x2474))+((x2472*x2474))+((x2473*x2475)));
j1eval[1]=(x2476+(((-1.0)*x2471)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.0368941812728069)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((2473775995.32335)+(((-1213967228.64635)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2473775995.32335)+(((-1213967228.64635)*pp))))+IKsqr(((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((2473775995.32335)+(((-1213967228.64635)*pp))), ((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2477=IKsin(j1);
IkReal x2478=IKcos(j1);
CheckValue<IkReal> x2487=IKPowWithIntegerCheck(py,-1);
if(!x2487.valid){
continue;
}
IkReal x2479=x2487.value;
IkReal x2480=(py*sj0);
IkReal x2481=((0.0833333333333333)*pp);
IkReal x2482=(cj0*px);
IkReal x2483=(cj0*py);
IkReal x2484=((0.15)*x2478);
IkReal x2485=((1.0)*x2478);
IkReal x2486=(px*x2478);
evalcond[0]=((1.13208986616081)+(((-0.555555555555556)*pp))+(((-4.57636369784904e-10)*x2477)));
evalcond[1]=((((-1.0)*x2480))+(((-1.0)*x2482))+(((-4.57636369784904e-10)*x2478)));
evalcond[2]=(((sj0*x2486))+(((0.9)*x2478))+((x2477*x2482))+((x2477*x2480))+(((-1.0)*x2483*x2485)));
evalcond[3]=((-4.57636369784904e-10)+((px*sj0*x2477))+(((0.9)*x2477))+(((-1.0)*x2477*x2483))+(((-1.0)*x2482*x2485))+(((-1.0)*x2480*x2485)));
evalcond[4]=((6.86454554677356e-11)+((x2477*x2481))+((sj0*x2479*x2484*(px*px)))+((x2480*x2484))+((x2479*x2481*x2486))+(((-0.169813479924122)*x2477))+(((-0.034813479924122)*x2479*x2486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.54203636406487)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((1366263721.92856)+(((-1526145402.02498)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1366263721.92856)+(((-1526145402.02498)*pp))))+IKsqr(((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1366263721.92856)+(((-1526145402.02498)*pp))), ((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2488=IKsin(j1);
IkReal x2489=IKcos(j1);
CheckValue<IkReal> x2498=IKPowWithIntegerCheck(py,-1);
if(!x2498.valid){
continue;
}
IkReal x2490=x2498.value;
IkReal x2491=(py*sj0);
IkReal x2492=((0.0833333333333333)*pp);
IkReal x2493=(cj0*px);
IkReal x2494=(cj0*py);
IkReal x2495=((0.15)*x2489);
IkReal x2496=((1.0)*x2489);
IkReal x2497=(px*x2489);
evalcond[0]=((0.497354577135498)+(((-0.555555555555556)*pp))+(((-3.64025311623919e-10)*x2488)));
evalcond[1]=((((-1.0)*x2493))+(((-1.0)*x2491))+(((-3.64025311623919e-10)*x2489)));
evalcond[2]=(((x2488*x2491))+((x2488*x2493))+(((-1.0)*x2494*x2496))+(((0.9)*x2489))+((sj0*x2497)));
evalcond[3]=((-3.64025311623919e-10)+(((-1.0)*x2493*x2496))+(((-1.0)*x2491*x2496))+(((-1.0)*x2488*x2494))+((px*sj0*x2488))+(((0.9)*x2488)));
evalcond[4]=((5.46037967435879e-11)+((x2488*x2492))+((sj0*x2490*x2495*(px*px)))+((x2490*x2492*x2497))+(((0.0603968134296753)*x2490*x2497))+((x2491*x2495))+(((-0.0746031865703247)*x2488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst0=((-0.542483660130719)+(((0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(cj3)))))+(IKabs(((0.542483660130719)+sj3+(((-0.522875816993464)*pz)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2499=((0.522875816993464)*pz);
IkReal x2500=((-0.54248366)+x2499);
sj2=0;
cj2=1.0;
j2=0;
sj3=x2500;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
if( (((0.54248366)+(((-1.0)*x2499)))) < -1-IKFAST_SINCOS_THRESH || (((0.54248366)+(((-1.0)*x2499)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((-1.0)*(IKasin(((0.54248366)+(((-1.0)*x2499))))));
IkReal gconst0=((-0.542483660130719)+x2499);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
j1eval[0]=((-1.60784313666667)+(((-1.0)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((2.35294117647059)*pz)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2501=((0.522875816993464)*pz);
IkReal x2502=((-0.54248366)+x2501);
sj2=0;
cj2=1.0;
j2=0;
sj3=x2502;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
if( (x2502) < -1-IKFAST_SINCOS_THRESH || (x2502) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=IKasin(x2502);
IkReal gconst0=((-0.542483660130719)+x2501);
j1eval[0]=((1.0)+(((-1.11111111111111)*cj0*py))+(((1.11111111111111)*px*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2503=((0.522875816993464)*pz);
IkReal x2504=((-0.54248366)+x2503);
sj2=0;
cj2=1.0;
j2=0;
sj3=x2504;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
if( (x2504) < -1-IKFAST_SINCOS_THRESH || (x2504) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=IKasin(x2504);
IkReal gconst0=((-0.542483660130719)+x2503);
j1eval[0]=((((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2505=IKsin(j1);
IkReal x2506=IKcos(j1);
IkReal x2507=((0.211764705882353)*pz);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2508=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2509=((0.09)*x2508);
evalcond[0]=((0.9)*x2506);
evalcond[1]=((-0.1447058823)+(((-1.0)*x2509))+x2507+(((0.9)*x2505)));
evalcond[2]=((-0.889941176495)+(((-0.5535)*x2508))+(((1.30235294117647)*pz))+(((-0.135)*x2505)));
evalcond[3]=(((x2506*x2507))+(((-0.1447058823)*x2506))+(((-1.0)*x2506*x2509)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*(py*py)))+(((10000000000.0)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2510=IKcos(j1);
IkReal x2511=IKsin(j1);
IkReal x2512=((0.211764705882353)*pz);
IkReal x2513=(py*x2511);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2514=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2515=((0.09)*x2514);
evalcond[0]=((((0.9)*x2510))+(((-1.0)*py*x2510)));
evalcond[1]=((((-1.0)*x2510*x2515))+((x2510*x2512))+(((-0.1447058823)*x2510)));
evalcond[2]=((-0.1447058823)+(((0.9)*x2511))+x2512+(((-1.0)*x2515))+(((-1.0)*x2513)));
evalcond[3]=((-0.889941176495)+(((-0.5535)*x2514))+(((1.30235294117647)*pz))+(((-0.135)*x2511))+(((0.15)*x2513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*(py*py)))+(((10000000000.0)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2516=IKcos(j1);
IkReal x2517=IKsin(j1);
IkReal x2518=((0.211764705882353)*pz);
IkReal x2519=(py*x2517);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2520=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2521=((0.09)*x2520);
evalcond[0]=((((0.9)*x2516))+((py*x2516)));
evalcond[1]=((((-1.0)*x2516*x2521))+((x2516*x2518))+(((-0.1447058823)*x2516)));
evalcond[2]=((-0.1447058823)+(((0.9)*x2517))+x2518+x2519+(((-1.0)*x2521)));
evalcond[3]=((-0.889941176495)+(((-0.15)*x2519))+(((-0.5535)*x2520))+(((1.30235294117647)*pz))+(((-0.135)*x2517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*(pz*pz)))+(((10000000000.0)*(px*px))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2522=IKcos(j1);
IkReal x2523=IKsin(j1);
IkReal x2524=((0.211764705882353)*pz);
IkReal x2525=(px*x2523);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2526=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2527=((0.09)*x2526);
evalcond[0]=(((px*x2522))+(((0.9)*x2522)));
evalcond[1]=(((x2522*x2524))+(((-1.0)*x2522*x2527))+(((-0.1447058823)*x2522)));
evalcond[2]=((-0.1447058823)+x2525+x2524+(((0.9)*x2523))+(((-1.0)*x2527)));
evalcond[3]=((-0.889941176495)+(((-0.135)*x2523))+(((-0.5535)*x2526))+(((1.30235294117647)*pz))+(((-0.15)*x2525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*(pz*pz)))+(((10000000000.0)*(px*px))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2528=IKcos(j1);
IkReal x2529=IKsin(j1);
IkReal x2530=((0.211764705882353)*pz);
IkReal x2531=(px*x2529);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2532=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2533=((0.09)*x2532);
evalcond[0]=((((-1.0)*px*x2528))+(((0.9)*x2528)));
evalcond[1]=((((-1.0)*x2528*x2533))+(((-0.1447058823)*x2528))+((x2528*x2530)));
evalcond[2]=((-0.1447058823)+x2530+(((-1.0)*x2533))+(((0.9)*x2529))+(((-1.0)*x2531)));
evalcond[3]=((-0.889941176495)+(((0.15)*x2531))+(((-0.135)*x2529))+(((1.30235294117647)*pz))+(((-0.5535)*x2532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2534=((10000000000.0)*pp);
IkReal x2535=(cj0*py);
IkReal x2536=(px*sj0);
IkReal x2537=((14000000000.0)*pz);
CheckValue<IkReal> x2538=IKPowWithIntegerCheck(((((-1.0)*py*sj0))+(((-1.0)*cj0*px))),-1);
if(!x2538.valid){
continue;
}
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
if( IKabs(((-4865000000.08333)+x2534+(((-1.0)*x2537)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2538.value)*(((4378500000.21971)+(((4865000000.08333)*x2536))+((x2536*x2537))+(((-1.0)*x2534*x2536))+(((0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((12599999999.7882)*pz))+(((-1.0)*x2535*x2537))+(((-4865000000.08333)*x2535))+((x2534*x2535))+(((-9000000000.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4865000000.08333)+x2534+(((-1.0)*x2537))))+IKsqr(((x2538.value)*(((4378500000.21971)+(((4865000000.08333)*x2536))+((x2536*x2537))+(((-1.0)*x2534*x2536))+(((0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((12599999999.7882)*pz))+(((-1.0)*x2535*x2537))+(((-4865000000.08333)*x2535))+((x2534*x2535))+(((-9000000000.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-4865000000.08333)+x2534+(((-1.0)*x2537))), ((x2538.value)*(((4378500000.21971)+(((4865000000.08333)*x2536))+((x2536*x2537))+(((-1.0)*x2534*x2536))+(((0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((12599999999.7882)*pz))+(((-1.0)*x2535*x2537))+(((-4865000000.08333)*x2535))+((x2534*x2535))+(((-9000000000.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2539=IKsin(j1);
IkReal x2540=IKcos(j1);
IkReal x2541=((0.15)*py);
IkReal x2542=((0.211764705882353)*pz);
IkReal x2543=((1.0)*py);
IkReal x2544=(sj0*x2540);
IkReal x2545=(cj0*x2539);
IkReal x2546=(sj0*x2539);
IkReal x2547=(cj0*px*x2540);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2548=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2549=((0.09)*x2548);
evalcond[0]=((0.270277777782407)+(((0.777777777777778)*pz))+(((-0.555555555555556)*pp))+(((5.55555555555556e-11)*x2539)));
evalcond[1]=((((-1.0)*cj0*x2540*x2543))+((py*x2546))+((px*x2544))+((px*x2545))+(((0.9)*x2540)));
evalcond[2]=((((-1.0)*sj0*x2543))+(((-0.1447058823)*x2540))+((x2540*x2542))+(((-1.0)*x2540*x2549))+(((-1.0)*cj0*px)));
evalcond[3]=((-0.1447058823)+x2542+(((-1.0)*x2543*x2544))+(((-1.0)*x2543*x2545))+(((0.9)*x2539))+(((-1.0)*x2547))+((px*x2546))+(((-1.0)*x2549)));
evalcond[4]=((-0.889941176495)+(((-0.15)*px*x2546))+(((1.30235294117647)*pz))+(((-0.135)*x2539))+(((-0.5535)*x2548))+(((0.15)*x2547))+((x2541*x2544))+((x2541*x2545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2550=(cj0*px);
IkReal x2551=((10000000000.0)*pp);
IkReal x2552=(py*sj0);
IkReal x2553=((14000000000.0)*pz);
CheckValue<IkReal> x2554=IKPowWithIntegerCheck(((0.9)+((px*sj0))+(((-1.0)*cj0*py))),-1);
if(!x2554.valid){
continue;
}
if( IKabs(((-4865000000.08333)+x2551+(((-1.0)*x2553)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2554.value)*((((x2550*x2553))+(((4865000000.08333)*x2550))+(((4865000000.08333)*x2552))+(((-1.0)*x2550*x2551))+(((-1.0)*x2551*x2552))+((x2552*x2553)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4865000000.08333)+x2551+(((-1.0)*x2553))))+IKsqr(((x2554.value)*((((x2550*x2553))+(((4865000000.08333)*x2550))+(((4865000000.08333)*x2552))+(((-1.0)*x2550*x2551))+(((-1.0)*x2551*x2552))+((x2552*x2553))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-4865000000.08333)+x2551+(((-1.0)*x2553))), ((x2554.value)*((((x2550*x2553))+(((4865000000.08333)*x2550))+(((4865000000.08333)*x2552))+(((-1.0)*x2550*x2551))+(((-1.0)*x2551*x2552))+((x2552*x2553))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2555=IKsin(j1);
IkReal x2556=IKcos(j1);
IkReal x2557=((0.15)*py);
IkReal x2558=((0.211764705882353)*pz);
IkReal x2559=((1.0)*py);
IkReal x2560=(sj0*x2556);
IkReal x2561=(cj0*x2555);
IkReal x2562=(sj0*x2555);
IkReal x2563=(cj0*px*x2556);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2564=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2565=((0.09)*x2564);
evalcond[0]=((0.270277777782407)+(((0.777777777777778)*pz))+(((5.55555555555556e-11)*x2555))+(((-0.555555555555556)*pp)));
evalcond[1]=((((-1.0)*cj0*x2556*x2559))+((px*x2560))+((px*x2561))+(((0.9)*x2556))+((py*x2562)));
evalcond[2]=((((-1.0)*x2556*x2565))+((x2556*x2558))+(((-0.1447058823)*x2556))+(((-1.0)*cj0*px))+(((-1.0)*sj0*x2559)));
evalcond[3]=((-0.1447058823)+x2558+(((-1.0)*x2563))+(((-1.0)*x2565))+(((-1.0)*x2559*x2560))+(((-1.0)*x2559*x2561))+((px*x2562))+(((0.9)*x2555)));
evalcond[4]=((-0.889941176495)+(((-0.135)*x2555))+((x2557*x2560))+((x2557*x2561))+(((1.30235294117647)*pz))+(((0.15)*x2563))+(((-0.5535)*x2564))+(((-0.15)*px*x2562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x2566=IKPowWithIntegerCheck(((-0.1447058823)+(((-0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((0.211764705882353)*pz))),-1);
if(!x2566.valid){
continue;
}
if( IKabs(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2566.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp))))+IKsqr(((x2566.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp))), ((x2566.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2567=IKsin(j1);
IkReal x2568=IKcos(j1);
IkReal x2569=((0.15)*py);
IkReal x2570=((0.211764705882353)*pz);
IkReal x2571=((1.0)*py);
IkReal x2572=(sj0*x2568);
IkReal x2573=(cj0*x2567);
IkReal x2574=(sj0*x2567);
IkReal x2575=(cj0*px*x2568);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2576=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2577=((0.09)*x2576);
evalcond[0]=((0.270277777782407)+(((0.777777777777778)*pz))+(((-0.555555555555556)*pp))+(((5.55555555555556e-11)*x2567)));
evalcond[1]=((((0.9)*x2568))+(((-1.0)*cj0*x2568*x2571))+((py*x2574))+((px*x2573))+((px*x2572)));
evalcond[2]=((((-1.0)*sj0*x2571))+((x2568*x2570))+(((-0.1447058823)*x2568))+(((-1.0)*x2568*x2577))+(((-1.0)*cj0*px)));
evalcond[3]=((-0.1447058823)+x2570+(((-1.0)*x2571*x2572))+(((-1.0)*x2571*x2573))+(((0.9)*x2567))+(((-1.0)*x2575))+(((-1.0)*x2577))+((px*x2574)));
evalcond[4]=((-0.889941176495)+(((-0.15)*px*x2574))+(((-0.135)*x2567))+(((1.30235294117647)*pz))+(((-0.5535)*x2576))+((x2569*x2573))+((x2569*x2572))+(((0.15)*x2575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst0=((-0.542483660130719)+(((0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.0)+(IKsign(cj3)))))+(IKabs(((0.542483660130719)+sj3+(((-0.522875816993464)*pz)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2578=((0.522875816993464)*pz);
IkReal x2579=((-0.54248366)+x2578);
sj2=0;
cj2=1.0;
j2=0;
sj3=x2579;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))))));
if( (((0.54248366)+(((-1.0)*x2578)))) < -1-IKFAST_SINCOS_THRESH || (((0.54248366)+(((-1.0)*x2578)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(((1.0)*(IKasin(((0.54248366)+(((-1.0)*x2578))))))));
IkReal gconst0=((-0.542483660130719)+x2578);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
j1eval[0]=((-1.60784313666667)+(((2.35294117647059)*pz))+(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2580=((0.522875816993464)*pz);
IkReal x2581=((-0.54248366)+x2580);
sj2=0;
cj2=1.0;
j2=0;
sj3=x2581;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))))));
if( (x2581) < -1-IKFAST_SINCOS_THRESH || (x2581) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(((-1.0)*(IKasin(x2581)))));
IkReal gconst0=((-0.542483660130719)+x2580);
j1eval[0]=((1.0)+(((-1.11111111111111)*cj0*py))+(((1.11111111111111)*px*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2582=((0.522875816993464)*pz);
IkReal x2583=((-0.54248366)+x2582);
sj2=0;
cj2=1.0;
j2=0;
sj3=x2583;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))))));
if( (((0.54248366)+(((-1.0)*x2582)))) < -1-IKFAST_SINCOS_THRESH || (((0.54248366)+(((-1.0)*x2582)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(((1.0)*(IKasin(((0.54248366)+(((-1.0)*x2582))))))));
IkReal gconst0=((-0.542483660130719)+x2582);
j1eval[0]=((((-1.0)*py*sj0))+(((-1.0)*cj0*px)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2584=IKsin(j1);
IkReal x2585=IKcos(j1);
IkReal x2586=((0.211764705882353)*pz);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2587=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2588=((0.09)*x2587);
evalcond[0]=((0.9)*x2585);
evalcond[1]=((-0.1447058823)+x2586+x2588+(((0.9)*x2584)));
evalcond[2]=((-0.889941176495)+(((-0.135)*x2584))+(((1.30235294117647)*pz))+(((0.5535)*x2587)));
evalcond[3]=((((-0.1447058823)*x2585))+((x2585*x2588))+((x2585*x2586)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*(py*py)))+(((10000000000.0)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2589=IKcos(j1);
IkReal x2590=IKsin(j1);
IkReal x2591=((0.211764705882353)*pz);
IkReal x2592=(py*x2590);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2593=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2594=((0.09)*x2593);
evalcond[0]=((((-1.0)*py*x2589))+(((0.9)*x2589)));
evalcond[1]=((((-0.1447058823)*x2589))+((x2589*x2591))+((x2589*x2594)));
evalcond[2]=((-0.1447058823)+x2594+x2591+(((-1.0)*x2592))+(((0.9)*x2590)));
evalcond[3]=((-0.889941176495)+(((-0.135)*x2590))+(((1.30235294117647)*pz))+(((0.15)*x2592))+(((0.5535)*x2593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*(py*py)))+(((10000000000.0)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2595=IKcos(j1);
IkReal x2596=IKsin(j1);
IkReal x2597=((0.211764705882353)*pz);
IkReal x2598=(py*x2596);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2599=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2600=((0.09)*x2599);
evalcond[0]=((((0.9)*x2595))+((py*x2595)));
evalcond[1]=((((-0.1447058823)*x2595))+((x2595*x2600))+((x2595*x2597)));
evalcond[2]=((-0.1447058823)+x2597+x2598+(((0.9)*x2596))+x2600);
evalcond[3]=((-0.889941176495)+(((-0.15)*x2598))+(((-0.135)*x2596))+(((1.30235294117647)*pz))+(((0.5535)*x2599)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*(pz*pz)))+(((10000000000.0)*(px*px))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2601=IKcos(j1);
IkReal x2602=IKsin(j1);
IkReal x2603=((0.211764705882353)*pz);
IkReal x2604=(px*x2602);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2605=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2606=((0.09)*x2605);
evalcond[0]=(((px*x2601))+(((0.9)*x2601)));
evalcond[1]=((((-0.1447058823)*x2601))+((x2601*x2603))+((x2601*x2606)));
evalcond[2]=((-0.1447058823)+(((0.9)*x2602))+x2604+x2606+x2603);
evalcond[3]=((-0.889941176495)+(((-0.15)*x2604))+(((1.30235294117647)*pz))+(((-0.135)*x2602))+(((0.5535)*x2605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*(pz*pz)))+(((10000000000.0)*(px*px))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2607=IKcos(j1);
IkReal x2608=IKsin(j1);
IkReal x2609=((0.211764705882353)*pz);
IkReal x2610=(px*x2608);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2611=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2612=((0.09)*x2611);
evalcond[0]=((((-1.0)*px*x2607))+(((0.9)*x2607)));
evalcond[1]=(((x2607*x2609))+(((-0.1447058823)*x2607))+((x2607*x2612)));
evalcond[2]=((-0.1447058823)+(((-1.0)*x2610))+(((0.9)*x2608))+x2609+x2612);
evalcond[3]=((-0.889941176495)+(((0.5535)*x2611))+(((0.15)*x2610))+(((1.30235294117647)*pz))+(((-0.135)*x2608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2613=((10000000000.0)*pp);
IkReal x2614=(cj0*py);
IkReal x2615=(px*sj0);
IkReal x2616=((14000000000.0)*pz);
CheckValue<IkReal> x2617=IKPowWithIntegerCheck(((((-1.0)*py*sj0))+(((-1.0)*cj0*px))),-1);
if(!x2617.valid){
continue;
}
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
if( IKabs(((-4865000000.08333)+(((-1.0)*x2616))+x2613)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2617.value)*(((4378500000.21971)+((x2613*x2614))+(((4865000000.08333)*x2615))+((x2615*x2616))+(((12599999999.7882)*pz))+(((-1.0)*x2613*x2615))+(((-0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((-4865000000.08333)*x2614))+(((-1.0)*x2614*x2616))+(((-9000000000.0)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4865000000.08333)+(((-1.0)*x2616))+x2613))+IKsqr(((x2617.value)*(((4378500000.21971)+((x2613*x2614))+(((4865000000.08333)*x2615))+((x2615*x2616))+(((12599999999.7882)*pz))+(((-1.0)*x2613*x2615))+(((-0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((-4865000000.08333)*x2614))+(((-1.0)*x2614*x2616))+(((-9000000000.0)*pp))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-4865000000.08333)+(((-1.0)*x2616))+x2613), ((x2617.value)*(((4378500000.21971)+((x2613*x2614))+(((4865000000.08333)*x2615))+((x2615*x2616))+(((12599999999.7882)*pz))+(((-1.0)*x2613*x2615))+(((-0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((-4865000000.08333)*x2614))+(((-1.0)*x2614*x2616))+(((-9000000000.0)*pp))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2618=IKsin(j1);
IkReal x2619=IKcos(j1);
IkReal x2620=((0.15)*py);
IkReal x2621=((0.211764705882353)*pz);
IkReal x2622=((1.0)*py);
IkReal x2623=(sj0*x2619);
IkReal x2624=(cj0*x2618);
IkReal x2625=(sj0*x2618);
IkReal x2626=(cj0*px*x2619);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2627=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2628=((0.09)*x2627);
evalcond[0]=((0.270277777782407)+(((0.777777777777778)*pz))+(((-0.555555555555556)*pp))+(((5.55555555555556e-11)*x2618)));
evalcond[1]=((((0.9)*x2619))+((px*x2623))+((px*x2624))+(((-1.0)*cj0*x2619*x2622))+((py*x2625)));
evalcond[2]=(((x2619*x2628))+((x2619*x2621))+(((-0.1447058823)*x2619))+(((-1.0)*sj0*x2622))+(((-1.0)*cj0*px)));
evalcond[3]=((-0.1447058823)+(((0.9)*x2618))+(((-1.0)*x2622*x2623))+(((-1.0)*x2622*x2624))+((px*x2625))+(((-1.0)*x2626))+x2621+x2628);
evalcond[4]=((-0.889941176495)+(((0.5535)*x2627))+(((0.15)*x2626))+(((-0.135)*x2618))+(((1.30235294117647)*pz))+((x2620*x2624))+((x2620*x2623))+(((-0.15)*px*x2625)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2629=(cj0*px);
IkReal x2630=((10000000000.0)*pp);
IkReal x2631=(py*sj0);
IkReal x2632=((14000000000.0)*pz);
CheckValue<IkReal> x2633=IKPowWithIntegerCheck(((0.9)+((px*sj0))+(((-1.0)*cj0*py))),-1);
if(!x2633.valid){
continue;
}
if( IKabs(((-4865000000.08333)+(((-1.0)*x2632))+x2630)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2633.value)*(((((4865000000.08333)*x2629))+(((-1.0)*x2629*x2630))+(((4865000000.08333)*x2631))+(((-1.0)*x2630*x2631))+((x2631*x2632))+((x2629*x2632)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4865000000.08333)+(((-1.0)*x2632))+x2630))+IKsqr(((x2633.value)*(((((4865000000.08333)*x2629))+(((-1.0)*x2629*x2630))+(((4865000000.08333)*x2631))+(((-1.0)*x2630*x2631))+((x2631*x2632))+((x2629*x2632))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-4865000000.08333)+(((-1.0)*x2632))+x2630), ((x2633.value)*(((((4865000000.08333)*x2629))+(((-1.0)*x2629*x2630))+(((4865000000.08333)*x2631))+(((-1.0)*x2630*x2631))+((x2631*x2632))+((x2629*x2632))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2634=IKsin(j1);
IkReal x2635=IKcos(j1);
IkReal x2636=((0.15)*py);
IkReal x2637=((0.211764705882353)*pz);
IkReal x2638=((1.0)*py);
IkReal x2639=(sj0*x2635);
IkReal x2640=(cj0*x2634);
IkReal x2641=(sj0*x2634);
IkReal x2642=(cj0*px*x2635);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2643=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2644=((0.09)*x2643);
evalcond[0]=((0.270277777782407)+(((0.777777777777778)*pz))+(((-0.555555555555556)*pp))+(((5.55555555555556e-11)*x2634)));
evalcond[1]=(((px*x2640))+(((-1.0)*cj0*x2635*x2638))+(((0.9)*x2635))+((px*x2639))+((py*x2641)));
evalcond[2]=((((-1.0)*sj0*x2638))+((x2635*x2644))+(((-0.1447058823)*x2635))+((x2635*x2637))+(((-1.0)*cj0*px)));
evalcond[3]=((-0.1447058823)+((px*x2641))+(((-1.0)*x2638*x2639))+(((0.9)*x2634))+(((-1.0)*x2642))+(((-1.0)*x2638*x2640))+x2637+x2644);
evalcond[4]=((-0.889941176495)+(((-0.135)*x2634))+(((-0.15)*px*x2641))+((x2636*x2640))+(((1.30235294117647)*pz))+(((0.5535)*x2643))+(((0.15)*x2642))+((x2636*x2639)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
CheckValue<IkReal> x2645=IKPowWithIntegerCheck(((-0.1447058823)+(((0.09)*(IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))))))+(((0.211764705882353)*pz))),-1);
if(!x2645.valid){
continue;
}
if( IKabs(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2645.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp))))+IKsqr(((x2645.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-4865000000.08333)+(((-14000000000.0)*pz))+(((10000000000.0)*pp))), ((x2645.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2646=IKsin(j1);
IkReal x2647=IKcos(j1);
IkReal x2648=((0.15)*py);
IkReal x2649=((0.211764705882353)*pz);
IkReal x2650=((1.0)*py);
IkReal x2651=(sj0*x2647);
IkReal x2652=(cj0*x2646);
IkReal x2653=(sj0*x2646);
IkReal x2654=(cj0*px*x2647);
if((((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz))))) < -0.00001)
continue;
IkReal x2655=IKsqrt(((0.705711478491179)+(((0.567303173992909)*pz))+(((-0.273399119996583)*(pz*pz)))));
IkReal x2656=((0.09)*x2655);
evalcond[0]=((0.270277777782407)+(((0.777777777777778)*pz))+(((-0.555555555555556)*pp))+(((5.55555555555556e-11)*x2646)));
evalcond[1]=(((px*x2651))+((px*x2652))+(((0.9)*x2647))+((py*x2653))+(((-1.0)*cj0*x2647*x2650)));
evalcond[2]=((((-1.0)*sj0*x2650))+(((-0.1447058823)*x2647))+((x2647*x2649))+((x2647*x2656))+(((-1.0)*cj0*px)));
evalcond[3]=((-0.1447058823)+(((-1.0)*x2650*x2651))+(((-1.0)*x2650*x2652))+((px*x2653))+(((0.9)*x2646))+(((-1.0)*x2654))+x2649+x2656);
evalcond[4]=((-0.889941176495)+(((-0.15)*px*x2653))+((x2648*x2652))+((x2648*x2651))+(((1.30235294117647)*pz))+(((0.5535)*x2655))+(((0.15)*x2654))+(((-0.135)*x2646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2657=cj0*cj0;
IkReal x2658=py*py;
IkReal x2659=(cj0*px);
IkReal x2660=(px*sj0);
IkReal x2661=((0.09)*cj3);
IkReal x2662=(cj0*py);
IkReal x2663=(py*sj0);
IkReal x2664=((0.405)*sj3);
CheckValue<IkReal> x2665=IKPowWithIntegerCheck(((0.0675)+((x2661*x2662))+(((-1.0)*x2660*x2661))+(((0.3645)*sj3))+(((-1.0)*x2662*x2664))+(((0.075)*x2660))+(((-0.081)*cj3))+((x2660*x2664))+(((-0.075)*x2662))),-1);
if(!x2665.valid){
continue;
}
CheckValue<IkReal> x2666=IKPowWithIntegerCheck(((0.075)+(((-1.0)*x2661))+x2664),-1);
if(!x2666.valid){
continue;
}
if( IKabs(((x2665.value)*(((-0.16965)+(((-1.0)*x2657*x2658))+(((0.155925)*(cj3*cj3)))+((x2657*(px*px)))+(((0.0135)*cj3))+(((-0.06075)*sj3))+(((2.0)*x2659*x2663))+(((0.0729)*cj3*sj3))+x2658)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2666.value)*((x2659+x2663)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2665.value)*(((-0.16965)+(((-1.0)*x2657*x2658))+(((0.155925)*(cj3*cj3)))+((x2657*(px*px)))+(((0.0135)*cj3))+(((-0.06075)*sj3))+(((2.0)*x2659*x2663))+(((0.0729)*cj3*sj3))+x2658))))+IKsqr(((x2666.value)*((x2659+x2663))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2665.value)*(((-0.16965)+(((-1.0)*x2657*x2658))+(((0.155925)*(cj3*cj3)))+((x2657*(px*px)))+(((0.0135)*cj3))+(((-0.06075)*sj3))+(((2.0)*x2659*x2663))+(((0.0729)*cj3*sj3))+x2658))), ((x2666.value)*((x2659+x2663))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2667=IKcos(j1);
IkReal x2668=IKsin(j1);
IkReal x2669=((0.15)*py);
IkReal x2670=((0.09)*cj3);
IkReal x2671=(px*sj0);
IkReal x2672=(py*sj0);
IkReal x2673=((1.0)*py);
IkReal x2674=((0.405)*sj3);
IkReal x2675=(sj0*x2667);
IkReal x2676=(cj0*x2668);
IkReal x2677=(cj0*px*x2667);
evalcond[0]=((((-1.0)*x2672))+((x2667*x2674))+(((0.075)*x2667))+(((-1.0)*x2667*x2670))+(((-1.0)*cj0*px)));
evalcond[1]=((0.289490740740741)+(((-0.555555555555556)*pp))+(((0.425)*sj3*x2668))+(((0.0354166666666667)*sj3))+(((0.230555555555556)*x2668))+(((0.759259259259259)*pz))+(((-0.222222222222222)*pz*x2668)));
evalcond[2]=((((-1.0)*cj0*x2667*x2673))+((x2668*x2672))+((x2667*x2671))+((px*x2676))+(((0.9)*x2667)));
evalcond[3]=((0.075)+(((-1.0)*x2677))+((x2668*x2671))+(((-1.0)*x2673*x2676))+(((-1.0)*x2670))+(((-1.0)*x2667*x2672))+(((0.9)*x2668))+x2674);
evalcond[4]=((-1.1335)+(((1.8)*cj0*py))+(((-1.8)*x2671))+(((-1.0)*pp))+((x2669*x2676))+((x2669*x2675))+(((-0.15)*x2668*x2671))+(((-0.135)*x2668))+(((1.4)*pz))+(((0.15)*x2677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2678=(cj0*px);
IkReal x2679=(py*sj0);
IkReal x2680=((0.09)*cj3);
IkReal x2681=(cj0*sj0);
IkReal x2682=((0.405)*sj3);
IkReal x2683=(px*py);
CheckValue<IkReal> x2684=IKPowWithIntegerCheck(((((-1.0)*x2679*x2680))+(((0.075)*x2679))+(((0.075)*x2678))+((x2678*x2682))+((x2679*x2682))+(((-1.0)*x2678*x2680))),-1);
if(!x2684.valid){
continue;
}
CheckValue<IkReal> x2685=IKPowWithIntegerCheck(((0.075)+(((-1.0)*x2680))+x2682),-1);
if(!x2685.valid){
continue;
}
if( IKabs(((x2684.value)*(((((-0.9)*x2678))+(((-0.9)*x2679))+((cj0*py*x2679))+(((2.0)*cj0*py*x2678))+(((-1.0)*x2683))+(((-1.0)*px*sj0*x2678)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2685.value)*((x2679+x2678)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2684.value)*(((((-0.9)*x2678))+(((-0.9)*x2679))+((cj0*py*x2679))+(((2.0)*cj0*py*x2678))+(((-1.0)*x2683))+(((-1.0)*px*sj0*x2678))))))+IKsqr(((x2685.value)*((x2679+x2678))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2684.value)*(((((-0.9)*x2678))+(((-0.9)*x2679))+((cj0*py*x2679))+(((2.0)*cj0*py*x2678))+(((-1.0)*x2683))+(((-1.0)*px*sj0*x2678))))), ((x2685.value)*((x2679+x2678))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2686=IKcos(j1);
IkReal x2687=IKsin(j1);
IkReal x2688=((0.15)*py);
IkReal x2689=((0.09)*cj3);
IkReal x2690=(px*sj0);
IkReal x2691=(py*sj0);
IkReal x2692=((1.0)*py);
IkReal x2693=((0.405)*sj3);
IkReal x2694=(sj0*x2686);
IkReal x2695=(cj0*x2687);
IkReal x2696=(cj0*px*x2686);
evalcond[0]=(((x2686*x2693))+(((-1.0)*x2686*x2689))+(((-1.0)*x2691))+(((0.075)*x2686))+(((-1.0)*cj0*px)));
evalcond[1]=((0.289490740740741)+(((0.425)*sj3*x2687))+(((-0.555555555555556)*pp))+(((0.0354166666666667)*sj3))+(((-0.222222222222222)*pz*x2687))+(((0.230555555555556)*x2687))+(((0.759259259259259)*pz)));
evalcond[2]=(((x2687*x2691))+((x2686*x2690))+(((0.9)*x2686))+(((-1.0)*cj0*x2686*x2692))+((px*x2695)));
evalcond[3]=((0.075)+(((-1.0)*x2692*x2695))+((x2687*x2690))+(((-1.0)*x2689))+(((0.9)*x2687))+(((-1.0)*x2696))+x2693+(((-1.0)*x2686*x2691)));
evalcond[4]=((-1.1335)+(((-1.8)*x2690))+(((1.8)*cj0*py))+(((-0.135)*x2687))+(((-1.0)*pp))+(((0.15)*x2696))+(((1.4)*pz))+(((-0.15)*x2687*x2690))+((x2688*x2694))+((x2688*x2695)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2697=IKPowWithIntegerCheck(((0.230555555555556)+(((-0.222222222222222)*pz))+(((0.425)*sj3))),-1);
if(!x2697.valid){
continue;
}
CheckValue<IkReal> x2698=IKPowWithIntegerCheck(((0.075)+(((0.405)*sj3))+(((-0.09)*cj3))),-1);
if(!x2698.valid){
continue;
}
if( IKabs(((x2697.value)*(((-0.289490740740741)+(((-0.0354166666666667)*sj3))+(((-0.759259259259259)*pz))+(((0.555555555555556)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2698.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2697.value)*(((-0.289490740740741)+(((-0.0354166666666667)*sj3))+(((-0.759259259259259)*pz))+(((0.555555555555556)*pp))))))+IKsqr(((x2698.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2697.value)*(((-0.289490740740741)+(((-0.0354166666666667)*sj3))+(((-0.759259259259259)*pz))+(((0.555555555555556)*pp))))), ((x2698.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2699=IKcos(j1);
IkReal x2700=IKsin(j1);
IkReal x2701=((0.15)*py);
IkReal x2702=((0.09)*cj3);
IkReal x2703=(px*sj0);
IkReal x2704=(py*sj0);
IkReal x2705=((1.0)*py);
IkReal x2706=((0.405)*sj3);
IkReal x2707=(sj0*x2699);
IkReal x2708=(cj0*x2700);
IkReal x2709=(cj0*px*x2699);
evalcond[0]=(((x2699*x2706))+(((0.075)*x2699))+(((-1.0)*x2699*x2702))+(((-1.0)*cj0*px))+(((-1.0)*x2704)));
evalcond[1]=((0.289490740740741)+(((0.425)*sj3*x2700))+(((-0.555555555555556)*pp))+(((0.0354166666666667)*sj3))+(((-0.222222222222222)*pz*x2700))+(((0.230555555555556)*x2700))+(((0.759259259259259)*pz)));
evalcond[2]=((((-1.0)*cj0*x2699*x2705))+((x2699*x2703))+((px*x2708))+((x2700*x2704))+(((0.9)*x2699)));
evalcond[3]=((0.075)+x2706+(((0.9)*x2700))+(((-1.0)*x2705*x2708))+(((-1.0)*x2699*x2704))+(((-1.0)*x2702))+((x2700*x2703))+(((-1.0)*x2709)));
evalcond[4]=((-1.1335)+(((-1.8)*x2703))+(((0.15)*x2709))+(((1.8)*cj0*py))+(((-0.15)*x2700*x2703))+(((-1.0)*pp))+(((1.4)*pz))+((x2701*x2707))+((x2701*x2708))+(((-0.135)*x2700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j1eval[0]=((1.0)+(((-3.2520325203252)*pz))+(((-6.21951219512195)*sj3)));
j1eval[1]=((1.0)+(((1.2)*cj3))+(((-5.4)*sj3)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x2710=(cj0*px);
IkReal x2711=((1.2)*cj3);
IkReal x2712=(py*sj0);
IkReal x2713=((5.4)*sj3);
j1eval[0]=((((-1.0)*x2712*x2713))+x2712+x2710+((x2710*x2711))+((x2711*x2712))+(((-1.0)*x2710*x2713)));
j1eval[1]=((1.0)+x2711+(((-1.0)*x2713)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
IkReal x2714=((6.21951219512195)*sj3);
IkReal x2715=((3.2520325203252)*pz);
IkReal x2716=((6.91056910569106)*sj3);
IkReal x2717=(px*sj0);
IkReal x2718=(cj0*py);
IkReal x2719=((3.613369467028)*pz);
IkReal x2720=(x2714+x2715);
j1eval[0]=((1.0)+(((-1.0)*x2720)));
j1eval[1]=((1.0)+(((-1.11111111111111)*x2718))+((x2716*x2718))+(((1.11111111111111)*x2717))+((x2718*x2719))+(((-1.0)*x2717*x2719))+(((-1.0)*x2720))+(((-1.0)*x2716*x2717)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal gconst1=((0.16078431372549)+(((-0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.16078431372549)+sj3+(((0.522875816993464)*pz)))))+(IKabs(((-1.0)+(IKsign(cj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2721=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x2721)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
if( (((0.160784313599385)+(((-1.0)*x2721)))) < -1-IKFAST_SINCOS_THRESH || (((0.160784313599385)+(((-1.0)*x2721)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((1.0)*(IKasin(((0.160784313599385)+(((-1.0)*x2721))))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x2721)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
j1eval[0]=((1.0)+(((21.4285713178271)*pz))+(((9.10714281007653)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))))))));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2722=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x2722)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
if( (((-0.160784313599385)+x2722)) < -1-IKFAST_SINCOS_THRESH || (((-0.160784313599385)+x2722)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((-1.0)*(IKasin(((-0.160784313599385)+x2722))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x2722)));
j1eval[0]=((1.0)+(((-1.11111111111111)*cj0*py))+(((1.11111111111111)*px*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2723=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x2723)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
if( (((-0.160784313599385)+x2723)) < -1-IKFAST_SINCOS_THRESH || (((-0.160784313599385)+x2723)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((-1.0)*(IKasin(((-0.160784313599385)+x2723))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x2723)));
j1eval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2724=IKsin(j1);
IkReal x2725=IKcos(j1);
IkReal x2726=((0.211764705882353)*pz);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2727=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2728=((0.09)*x2727);
evalcond[0]=((0.9)*x2725);
evalcond[1]=((-0.00988235299224913)+(((-0.9)*x2724))+(((-1.0)*x2726))+(((-1.0)*x2728)));
evalcond[2]=((-0.00415058824227405)+(((-0.0378)*x2727))+(((-0.0889411764705882)*pz))+(((-0.135)*x2724)));
evalcond[3]=((((0.00988235299224913)*x2725))+((x2725*x2728))+((x2725*x2726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*(py*py)))+(((10365853666.6667)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2729=IKcos(j1);
IkReal x2730=IKsin(j1);
IkReal x2731=((0.211764705882353)*pz);
IkReal x2732=(py*x2730);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2733=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2734=((0.09)*x2733);
evalcond[0]=((((-1.0)*py*x2729))+(((0.9)*x2729)));
evalcond[1]=((((0.00988235299224913)*x2729))+((x2729*x2734))+((x2729*x2731)));
evalcond[2]=((-0.00988235299224913)+x2732+(((-0.9)*x2730))+(((-1.0)*x2734))+(((-1.0)*x2731)));
evalcond[3]=((-0.00415058824227405)+(((-0.0378)*x2733))+(((-0.0889411764705882)*pz))+(((0.15)*x2732))+(((-0.135)*x2730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*(py*py)))+(((10365853666.6667)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2735=IKcos(j1);
IkReal x2736=IKsin(j1);
IkReal x2737=((0.211764705882353)*pz);
IkReal x2738=(py*x2736);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2739=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2740=((0.09)*x2739);
evalcond[0]=(((py*x2735))+(((0.9)*x2735)));
evalcond[1]=(((x2735*x2737))+(((0.00988235299224913)*x2735))+((x2735*x2740)));
evalcond[2]=((-0.00988235299224913)+(((-1.0)*x2738))+(((-0.9)*x2736))+(((-1.0)*x2740))+(((-1.0)*x2737)));
evalcond[3]=((-0.00415058824227405)+(((-0.15)*x2738))+(((-0.0378)*x2739))+(((-0.0889411764705882)*pz))+(((-0.135)*x2736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*(pz*pz)))+(((10365853666.6667)*(px*px))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2741=IKcos(j1);
IkReal x2742=IKsin(j1);
IkReal x2743=((0.211764705882353)*pz);
IkReal x2744=(px*x2742);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2745=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2746=((0.09)*x2745);
evalcond[0]=((((0.9)*x2741))+((px*x2741)));
evalcond[1]=((((0.00988235299224913)*x2741))+((x2741*x2743))+((x2741*x2746)));
evalcond[2]=((-0.00988235299224913)+(((-0.9)*x2742))+(((-1.0)*x2743))+(((-1.0)*x2746))+(((-1.0)*x2744)));
evalcond[3]=((-0.00415058824227405)+(((-0.15)*x2744))+(((-0.0889411764705882)*pz))+(((-0.0378)*x2745))+(((-0.135)*x2742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*(pz*pz)))+(((10365853666.6667)*(px*px))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2747=IKcos(j1);
IkReal x2748=IKsin(j1);
IkReal x2749=((0.211764705882353)*pz);
IkReal x2750=(px*x2748);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2751=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2752=((0.09)*x2751);
evalcond[0]=((((-1.0)*px*x2747))+(((0.9)*x2747)));
evalcond[1]=((((0.00988235299224913)*x2747))+((x2747*x2749))+((x2747*x2752)));
evalcond[2]=((-0.00988235299224913)+x2750+(((-0.9)*x2748))+(((-1.0)*x2749))+(((-1.0)*x2752)));
evalcond[3]=((-0.00415058824227405)+(((0.15)*x2750))+(((-0.0889411764705882)*pz))+(((-0.0378)*x2751))+(((-0.135)*x2748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2753=((621951220.0)*pz);
IkReal x2754=(px*sj0);
IkReal x2755=((10365853666.6667)*pp);
IkReal x2756=(cj0*py);
CheckValue<IkReal> x2757=IKPowWithIntegerCheck((((cj0*px))+((py*sj0))),-1);
if(!x2757.valid){
continue;
}
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
if( IKabs(((-10112926837.2833)+x2755+x2753)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2757.value)*(((-9101634153.54512)+((x2753*x2754))+((x2754*x2755))+(((9329268300.0)*pp))+(((-10112926837.2833)*x2754))+(((0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((-1.0)*x2753*x2756))+(((559756098.211765)*pz))+(((10112926837.2833)*x2756))+(((-1.0)*x2755*x2756)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-10112926837.2833)+x2755+x2753))+IKsqr(((x2757.value)*(((-9101634153.54512)+((x2753*x2754))+((x2754*x2755))+(((9329268300.0)*pp))+(((-10112926837.2833)*x2754))+(((0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((-1.0)*x2753*x2756))+(((559756098.211765)*pz))+(((10112926837.2833)*x2756))+(((-1.0)*x2755*x2756))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-10112926837.2833)+x2755+x2753), ((x2757.value)*(((-9101634153.54512)+((x2753*x2754))+((x2754*x2755))+(((9329268300.0)*pp))+(((-10112926837.2833)*x2754))+(((0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((-1.0)*x2753*x2756))+(((559756098.211765)*pz))+(((10112926837.2833)*x2756))+(((-1.0)*x2755*x2756))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2758=IKsin(j1);
IkReal x2759=IKcos(j1);
IkReal x2760=((0.15)*py);
IkReal x2761=((0.15)*px);
IkReal x2762=((0.211764705882353)*pz);
IkReal x2763=((1.0)*py);
IkReal x2764=((1.0)*px);
IkReal x2765=(sj0*x2759);
IkReal x2766=(cj0*x2758);
IkReal x2767=(sj0*x2758);
IkReal x2768=(cj0*x2759);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2769=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2770=((0.09)*x2769);
evalcond[0]=((0.542000000004466)+(((-0.555555555555556)*pp))+(((-0.0333333333333333)*pz))+(((5.3594771199795e-11)*x2758)));
evalcond[1]=(((px*x2766))+((px*x2765))+((py*x2767))+(((0.9)*x2759))+(((-1.0)*x2763*x2768)));
evalcond[2]=(((x2759*x2762))+(((-1.0)*cj0*x2764))+(((-1.0)*sj0*x2763))+(((0.00988235299224913)*x2759))+((x2759*x2770)));
evalcond[3]=((-0.00988235299224913)+(((-1.0)*x2764*x2767))+(((-0.9)*x2758))+(((-1.0)*x2762))+((px*x2768))+(((-1.0)*x2770))+((py*x2766))+((py*x2765)));
evalcond[4]=((-0.00415058824227405)+(((-1.0)*x2761*x2767))+((x2761*x2768))+(((-0.0889411764705882)*pz))+((x2760*x2765))+((x2760*x2766))+(((-0.0378)*x2769))+(((-0.135)*x2758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2771=(cj0*px);
IkReal x2772=(py*sj0);
IkReal x2773=((10365853666.6667)*pp);
IkReal x2774=((621951220.0)*pz);
CheckValue<IkReal> x2775=IKPowWithIntegerCheck(((0.9)+((px*sj0))+(((-1.0)*cj0*py))),-1);
if(!x2775.valid){
continue;
}
if( IKabs(((-10112926837.2833)+x2773+x2774)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2775.value)*(((((10112926837.2833)*x2771))+(((10112926837.2833)*x2772))+(((-1.0)*x2772*x2773))+(((-1.0)*x2772*x2774))+(((-1.0)*x2771*x2773))+(((-1.0)*x2771*x2774)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-10112926837.2833)+x2773+x2774))+IKsqr(((x2775.value)*(((((10112926837.2833)*x2771))+(((10112926837.2833)*x2772))+(((-1.0)*x2772*x2773))+(((-1.0)*x2772*x2774))+(((-1.0)*x2771*x2773))+(((-1.0)*x2771*x2774))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-10112926837.2833)+x2773+x2774), ((x2775.value)*(((((10112926837.2833)*x2771))+(((10112926837.2833)*x2772))+(((-1.0)*x2772*x2773))+(((-1.0)*x2772*x2774))+(((-1.0)*x2771*x2773))+(((-1.0)*x2771*x2774))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2776=IKsin(j1);
IkReal x2777=IKcos(j1);
IkReal x2778=((0.15)*py);
IkReal x2779=((0.15)*px);
IkReal x2780=((0.211764705882353)*pz);
IkReal x2781=((1.0)*py);
IkReal x2782=((1.0)*px);
IkReal x2783=(sj0*x2777);
IkReal x2784=(cj0*x2776);
IkReal x2785=(sj0*x2776);
IkReal x2786=(cj0*x2777);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2787=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2788=((0.09)*x2787);
evalcond[0]=((0.542000000004466)+(((-0.555555555555556)*pp))+(((-0.0333333333333333)*pz))+(((5.3594771199795e-11)*x2776)));
evalcond[1]=((((-1.0)*x2781*x2786))+((py*x2785))+(((0.9)*x2777))+((px*x2784))+((px*x2783)));
evalcond[2]=((((0.00988235299224913)*x2777))+((x2777*x2788))+((x2777*x2780))+(((-1.0)*sj0*x2781))+(((-1.0)*cj0*x2782)));
evalcond[3]=((-0.00988235299224913)+(((-1.0)*x2780))+(((-1.0)*x2788))+((py*x2784))+((py*x2783))+(((-1.0)*x2782*x2785))+((px*x2786))+(((-0.9)*x2776)));
evalcond[4]=((-0.00415058824227405)+((x2779*x2786))+((x2778*x2784))+((x2778*x2783))+(((-0.0378)*x2787))+(((-0.0889411764705882)*pz))+(((-1.0)*x2779*x2785))+(((-0.135)*x2776)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
CheckValue<IkReal> x2789=IKPowWithIntegerCheck(((0.00988235299224913)+(((0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((0.211764705882353)*pz))),-1);
if(!x2789.valid){
continue;
}
if( IKabs(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2789.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp))))+IKsqr(((x2789.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp))), ((x2789.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2790=IKsin(j1);
IkReal x2791=IKcos(j1);
IkReal x2792=((0.15)*py);
IkReal x2793=((0.15)*px);
IkReal x2794=((0.211764705882353)*pz);
IkReal x2795=((1.0)*py);
IkReal x2796=((1.0)*px);
IkReal x2797=(sj0*x2791);
IkReal x2798=(cj0*x2790);
IkReal x2799=(sj0*x2790);
IkReal x2800=(cj0*x2791);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2801=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2802=((0.09)*x2801);
evalcond[0]=((0.542000000004466)+(((-0.555555555555556)*pp))+(((-0.0333333333333333)*pz))+(((5.3594771199795e-11)*x2790)));
evalcond[1]=(((py*x2799))+(((-1.0)*x2795*x2800))+(((0.9)*x2791))+((px*x2797))+((px*x2798)));
evalcond[2]=(((x2791*x2802))+(((-1.0)*sj0*x2795))+((x2791*x2794))+(((-1.0)*cj0*x2796))+(((0.00988235299224913)*x2791)));
evalcond[3]=((-0.00988235299224913)+(((-1.0)*x2802))+(((-1.0)*x2794))+((px*x2800))+(((-1.0)*x2796*x2799))+(((-0.9)*x2790))+((py*x2797))+((py*x2798)));
evalcond[4]=((-0.00415058824227405)+(((-0.135)*x2790))+(((-0.0889411764705882)*pz))+((x2792*x2798))+((x2792*x2797))+((x2793*x2800))+(((-0.0378)*x2801))+(((-1.0)*x2793*x2799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal gconst1=((0.16078431372549)+(((-0.522875816993464)*pz)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.16078431372549)+sj3+(((0.522875816993464)*pz)))))+(IKabs(((1.0)+(IKsign(cj3)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
IkReal x2803=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x2803)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))))));
if( (((-0.160784313599385)+x2803)) < -1-IKFAST_SINCOS_THRESH || (((-0.160784313599385)+x2803)) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(IKasin(((-0.160784313599385)+x2803))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x2803)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
j1eval[0]=((1.0)+(((-9.10714281007653)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((21.4285713178271)*pz)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2804=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x2804)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))))));
if( (((0.160784313599385)+(((-1.0)*x2804)))) < -1-IKFAST_SINCOS_THRESH || (((0.160784313599385)+(((-1.0)*x2804)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(((-1.0)*(IKasin(((0.160784313599385)+(((-1.0)*x2804))))))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x2804)));
j1eval[0]=((1.0)+(((-1.11111111111111)*cj0*py))+(((1.11111111111111)*px*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
IkReal x2805=((0.522875816993464)*pz);
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
sj3=((0.160784313599385)+(((-1.0)*x2805)));
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
cj3=((-1.0)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))))));
if( (((0.160784313599385)+(((-1.0)*x2805)))) < -1-IKFAST_SINCOS_THRESH || (((0.160784313599385)+(((-1.0)*x2805)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
j3=((3.14159265)+(((-1.0)*(IKasin(((0.160784313599385)+(((-1.0)*x2805))))))));
IkReal gconst1=((0.16078431372549)+(((-1.0)*x2805)));
j1eval[0]=(((cj0*px))+((py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(py)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2806=IKsin(j1);
IkReal x2807=IKcos(j1);
IkReal x2808=((0.211764705882353)*pz);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2809=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2810=((0.09)*x2809);
evalcond[0]=((0.9)*x2807);
evalcond[1]=((-0.00988235299224913)+(((-1.0)*x2808))+(((-0.9)*x2806))+x2810);
evalcond[2]=((-0.00415058824227405)+(((0.0378)*x2809))+(((-0.0889411764705882)*pz))+(((-0.135)*x2806)));
evalcond[3]=((((0.00988235299224913)*x2807))+(((-1.0)*x2807*x2810))+((x2807*x2808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j0), 6.28318530717959)))))+(IKabs(px)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*(py*py)))+(((10365853666.6667)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2811=IKcos(j1);
IkReal x2812=IKsin(j1);
IkReal x2813=((0.211764705882353)*pz);
IkReal x2814=(py*x2812);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2815=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2816=((0.09)*x2815);
evalcond[0]=((((0.9)*x2811))+(((-1.0)*py*x2811)));
evalcond[1]=((((0.00988235299224913)*x2811))+((x2811*x2813))+(((-1.0)*x2811*x2816)));
evalcond[2]=((-0.00988235299224913)+(((-0.9)*x2812))+(((-1.0)*x2813))+x2814+x2816);
evalcond[3]=((-0.00415058824227405)+(((0.0378)*x2815))+(((0.15)*x2814))+(((-0.0889411764705882)*pz))+(((-0.135)*x2812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(px))+(IKabs(((-3.14159265358979)+(IKfmod(j0, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*(py*py)))+(((10365853666.6667)*(pz*pz))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2817=IKcos(j1);
IkReal x2818=IKsin(j1);
IkReal x2819=((0.211764705882353)*pz);
IkReal x2820=(py*x2818);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2821=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2822=((0.09)*x2821);
evalcond[0]=((((0.9)*x2817))+((py*x2817)));
evalcond[1]=((((0.00988235299224913)*x2817))+(((-1.0)*x2817*x2822))+((x2817*x2819)));
evalcond[2]=((-0.00988235299224913)+(((-1.0)*x2820))+(((-0.9)*x2818))+(((-1.0)*x2819))+x2822);
evalcond[3]=((-0.00415058824227405)+(((0.0378)*x2821))+(((-0.0889411764705882)*pz))+(((-0.15)*x2820))+(((-0.135)*x2818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*(pz*pz)))+(((10365853666.6667)*(px*px))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2823=IKcos(j1);
IkReal x2824=IKsin(j1);
IkReal x2825=((0.211764705882353)*pz);
IkReal x2826=(px*x2824);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2827=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2828=((0.09)*x2827);
evalcond[0]=((((0.9)*x2823))+((px*x2823)));
evalcond[1]=(((x2823*x2825))+(((0.00988235299224913)*x2823))+(((-1.0)*x2823*x2828)));
evalcond[2]=((-0.00988235299224913)+(((-0.9)*x2824))+(((-1.0)*x2826))+(((-1.0)*x2825))+x2828);
evalcond[3]=((-0.00415058824227405)+(((0.0378)*x2827))+(((-0.0889411764705882)*pz))+(((-0.15)*x2826))+(((-0.135)*x2824)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(py))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j0), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
sj1array[0]=((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*(pz*pz)))+(((10365853666.6667)*(px*px))));
if( sj1array[0] >= -1-IKFAST_SINCOS_THRESH && sj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKasin(sj1array[0]);
    cj1array[0] = IKcos(j1array[0]);
    sj1array[1] = sj1array[0];
    j1array[1] = j1array[0] > 0 ? (IKPI-j1array[0]) : (-IKPI-j1array[0]);
    cj1array[1] = -cj1array[0];
}
else if( isnan(sj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2829=IKcos(j1);
IkReal x2830=IKsin(j1);
IkReal x2831=((0.211764705882353)*pz);
IkReal x2832=(px*x2830);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2833=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2834=((0.09)*x2833);
evalcond[0]=((((-1.0)*px*x2829))+(((0.9)*x2829)));
evalcond[1]=(((x2829*x2831))+(((0.00988235299224913)*x2829))+(((-1.0)*x2829*x2834)));
evalcond[2]=((-0.00988235299224913)+(((-1.0)*x2831))+(((-0.9)*x2830))+x2834+x2832);
evalcond[3]=((-0.00415058824227405)+(((0.15)*x2832))+(((0.0378)*x2833))+(((-0.0889411764705882)*pz))+(((-0.135)*x2830)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2835=(px*sj0);
IkReal x2836=((621951220.0)*pz);
IkReal x2837=(cj0*py);
IkReal x2838=((10365853666.6667)*pp);
CheckValue<IkReal> x2839=IKPowWithIntegerCheck((((cj0*px))+((py*sj0))),-1);
if(!x2839.valid){
continue;
}
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
if( IKabs(((-10112926837.2833)+x2838+x2836)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2839.value)*(((-9101634153.54512)+(((9329268300.0)*pp))+(((-1.0)*x2836*x2837))+(((559756098.211765)*pz))+(((-10112926837.2833)*x2835))+(((-1.0)*x2837*x2838))+(((-0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+((x2835*x2836))+((x2835*x2838))+(((10112926837.2833)*x2837)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-10112926837.2833)+x2838+x2836))+IKsqr(((x2839.value)*(((-9101634153.54512)+(((9329268300.0)*pp))+(((-1.0)*x2836*x2837))+(((559756098.211765)*pz))+(((-10112926837.2833)*x2835))+(((-1.0)*x2837*x2838))+(((-0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+((x2835*x2836))+((x2835*x2838))+(((10112926837.2833)*x2837))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-10112926837.2833)+x2838+x2836), ((x2839.value)*(((-9101634153.54512)+(((9329268300.0)*pp))+(((-1.0)*x2836*x2837))+(((559756098.211765)*pz))+(((-10112926837.2833)*x2835))+(((-1.0)*x2837*x2838))+(((-0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+((x2835*x2836))+((x2835*x2838))+(((10112926837.2833)*x2837))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2840=IKsin(j1);
IkReal x2841=IKcos(j1);
IkReal x2842=((0.15)*py);
IkReal x2843=((0.15)*px);
IkReal x2844=((0.211764705882353)*pz);
IkReal x2845=((1.0)*py);
IkReal x2846=((1.0)*px);
IkReal x2847=(sj0*x2841);
IkReal x2848=(cj0*x2840);
IkReal x2849=(sj0*x2840);
IkReal x2850=(cj0*x2841);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2851=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2852=((0.09)*x2851);
evalcond[0]=((0.542000000004466)+(((-0.555555555555556)*pp))+(((-0.0333333333333333)*pz))+(((5.3594771199795e-11)*x2840)));
evalcond[1]=((((-1.0)*x2845*x2850))+((px*x2848))+((px*x2847))+(((0.9)*x2841))+((py*x2849)));
evalcond[2]=((((-1.0)*cj0*x2846))+(((-1.0)*x2841*x2852))+(((0.00988235299224913)*x2841))+(((-1.0)*sj0*x2845))+((x2841*x2844)));
evalcond[3]=((-0.00988235299224913)+(((-1.0)*x2846*x2849))+((px*x2850))+(((-0.9)*x2840))+x2852+((py*x2848))+((py*x2847))+(((-1.0)*x2844)));
evalcond[4]=((-0.00415058824227405)+(((-0.135)*x2840))+(((-1.0)*x2843*x2849))+(((-0.0889411764705882)*pz))+((x2842*x2847))+((x2842*x2848))+(((0.0378)*x2851))+((x2843*x2850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2853=(cj0*px);
IkReal x2854=(py*sj0);
IkReal x2855=((10365853666.6667)*pp);
IkReal x2856=((621951220.0)*pz);
CheckValue<IkReal> x2857=IKPowWithIntegerCheck(((0.9)+((px*sj0))+(((-1.0)*cj0*py))),-1);
if(!x2857.valid){
continue;
}
if( IKabs(((-10112926837.2833)+x2855+x2856)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2857.value)*(((((10112926837.2833)*x2853))+(((10112926837.2833)*x2854))+(((-1.0)*x2854*x2855))+(((-1.0)*x2854*x2856))+(((-1.0)*x2853*x2855))+(((-1.0)*x2853*x2856)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-10112926837.2833)+x2855+x2856))+IKsqr(((x2857.value)*(((((10112926837.2833)*x2853))+(((10112926837.2833)*x2854))+(((-1.0)*x2854*x2855))+(((-1.0)*x2854*x2856))+(((-1.0)*x2853*x2855))+(((-1.0)*x2853*x2856))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-10112926837.2833)+x2855+x2856), ((x2857.value)*(((((10112926837.2833)*x2853))+(((10112926837.2833)*x2854))+(((-1.0)*x2854*x2855))+(((-1.0)*x2854*x2856))+(((-1.0)*x2853*x2855))+(((-1.0)*x2853*x2856))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2858=IKsin(j1);
IkReal x2859=IKcos(j1);
IkReal x2860=((0.15)*py);
IkReal x2861=((0.15)*px);
IkReal x2862=((0.211764705882353)*pz);
IkReal x2863=((1.0)*py);
IkReal x2864=((1.0)*px);
IkReal x2865=(sj0*x2859);
IkReal x2866=(cj0*x2858);
IkReal x2867=(sj0*x2858);
IkReal x2868=(cj0*x2859);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2869=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2870=((0.09)*x2869);
evalcond[0]=((0.542000000004466)+(((-0.555555555555556)*pp))+(((-0.0333333333333333)*pz))+(((5.3594771199795e-11)*x2858)));
evalcond[1]=(((py*x2867))+(((-1.0)*x2863*x2868))+((px*x2865))+((px*x2866))+(((0.9)*x2859)));
evalcond[2]=((((-1.0)*sj0*x2863))+(((-1.0)*x2859*x2870))+((x2859*x2862))+(((0.00988235299224913)*x2859))+(((-1.0)*cj0*x2864)));
evalcond[3]=((-0.00988235299224913)+(((-1.0)*x2864*x2867))+((py*x2866))+((py*x2865))+(((-1.0)*x2862))+((px*x2868))+(((-0.9)*x2858))+x2870);
evalcond[4]=((-0.00415058824227405)+(((0.0378)*x2869))+(((-1.0)*x2861*x2867))+(((-0.0889411764705882)*pz))+((x2861*x2868))+((x2860*x2866))+((x2860*x2865))+(((-0.135)*x2858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
CheckValue<IkReal> x2871=IKPowWithIntegerCheck(((0.00988235299224913)+(((-0.09)*(IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))))))+(((0.211764705882353)*pz))),-1);
if(!x2871.valid){
continue;
}
if( IKabs(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2871.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp))))+IKsqr(((x2871.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-10112926837.2833)+(((621951220.0)*pz))+(((10365853666.6667)*pp))), ((x2871.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2872=IKsin(j1);
IkReal x2873=IKcos(j1);
IkReal x2874=((0.15)*py);
IkReal x2875=((0.15)*px);
IkReal x2876=((0.211764705882353)*pz);
IkReal x2877=((1.0)*py);
IkReal x2878=((1.0)*px);
IkReal x2879=(sj0*x2873);
IkReal x2880=(cj0*x2872);
IkReal x2881=(sj0*x2872);
IkReal x2882=(cj0*x2873);
if((((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz)))) < -0.00001)
continue;
IkReal x2883=IKsqrt(((0.974148404459823)+(((-0.273399119996583)*(pz*pz)))+(((0.168140458797898)*pz))));
IkReal x2884=((0.09)*x2883);
evalcond[0]=((0.542000000004466)+(((-0.555555555555556)*pp))+(((5.3594771199795e-11)*x2872))+(((-0.0333333333333333)*pz)));
evalcond[1]=((((0.9)*x2873))+((px*x2880))+(((-1.0)*x2877*x2882))+((py*x2881))+((px*x2879)));
evalcond[2]=((((-1.0)*cj0*x2878))+(((-1.0)*x2873*x2884))+(((-1.0)*sj0*x2877))+(((0.00988235299224913)*x2873))+((x2873*x2876)));
evalcond[3]=((-0.00988235299224913)+(((-0.9)*x2872))+(((-1.0)*x2876))+((py*x2879))+((px*x2882))+((py*x2880))+(((-1.0)*x2878*x2881))+x2884);
evalcond[4]=((-0.00415058824227405)+(((-0.135)*x2872))+(((-0.0889411764705882)*pz))+((x2874*x2879))+((x2875*x2882))+((x2874*x2880))+(((0.0378)*x2883))+(((-1.0)*x2875*x2881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((3.10469847231699)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((1156810438.28432)+(((-1213967228.64635)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1156810438.28432)+(((-1213967228.64635)*pp))))+IKsqr(((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1156810438.28432)+(((-1213967228.64635)*pp))), ((((-2185141011.56343)*cj0*px))+(((-2185141011.56343)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2885=IKsin(j1);
IkReal x2886=IKcos(j1);
CheckValue<IkReal> x2894=IKPowWithIntegerCheck(py,-1);
if(!x2894.valid){
continue;
}
IkReal x2887=x2894.value;
IkReal x2888=(py*sj0);
IkReal x2889=((0.0833333333333333)*pp);
IkReal x2890=((1.0)*px);
IkReal x2891=((0.15)*x2886);
IkReal x2892=(px*x2886);
IkReal x2893=(cj0*x2885);
evalcond[0]=((0.529398529505718)+(((-0.555555555555556)*pp))+(((-4.57636369784904e-10)*x2885)));
evalcond[1]=((((-1.0)*cj0*x2890))+(((-4.57636369784904e-10)*x2886))+(((-1.0)*x2888)));
evalcond[2]=(((x2885*x2888))+((sj0*x2892))+(((0.9)*x2886))+((px*x2893))+(((-1.0)*cj0*py*x2886)));
evalcond[3]=((4.57636369784904e-10)+(((-0.9)*x2885))+((cj0*x2892))+(((-1.0)*sj0*x2885*x2890))+((py*x2893))+((x2886*x2888)));
evalcond[4]=((6.86454554677356e-11)+((x2885*x2889))+((x2887*x2889*x2892))+((sj0*x2887*x2891*(px*px)))+(((-0.0794097794258577)*x2885))+(((0.0555902205741423)*x2887*x2892))+((x2888*x2891)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-0.400443710475077)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
if( IKabs(((1529018594.85836)+(((-1526145402.02498)*pp)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1529018594.85836)+(((-1526145402.02498)*pp))))+IKsqr(((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((1529018594.85836)+(((-1526145402.02498)*pp))), ((((-2747061723.64497)*cj0*px))+(((-2747061723.64497)*py*sj0))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2895=IKsin(j1);
IkReal x2896=IKcos(j1);
CheckValue<IkReal> x2904=IKPowWithIntegerCheck(py,-1);
if(!x2904.valid){
continue;
}
IkReal x2897=x2904.value;
IkReal x2898=(py*sj0);
IkReal x2899=((0.0833333333333333)*pp);
IkReal x2900=(cj0*px);
IkReal x2901=(cj0*py);
IkReal x2902=(px*x2896);
IkReal x2903=((0.15)*x2896);
evalcond[0]=((0.556601470472081)+(((-0.555555555555556)*pp))+(((-3.64025311623919e-10)*x2895)));
evalcond[1]=((((-1.0)*x2898))+(((-3.64025311623919e-10)*x2896))+(((-1.0)*x2900)));
evalcond[2]=(((x2895*x2898))+(((-1.0)*x2896*x2901))+(((0.9)*x2896))+((x2895*x2900))+((sj0*x2902)));
evalcond[3]=((3.64025311623919e-10)+(((-0.9)*x2895))+(((-1.0)*px*sj0*x2895))+((x2896*x2898))+((x2896*x2900))+((x2895*x2901)));
evalcond[4]=((5.46037967435879e-11)+((x2897*x2899*x2902))+(((0.0515097794291878)*x2897*x2902))+((x2895*x2899))+(((0.15)*px*sj0*x2897*x2902))+((x2898*x2903))+(((-0.0834902205708122)*x2895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2905=(px*sj0);
IkReal x2906=((0.222222222222222)*pz);
IkReal x2907=(cj0*px);
IkReal x2908=((0.0518518518518519)*pz);
IkReal x2909=(py*sj0);
IkReal x2910=((0.555555555555556)*pp);
IkReal x2911=((0.0354166666666667)*sj3);
IkReal x2912=(cj0*py);
IkReal x2913=((0.425)*sj3);
CheckValue<IkReal> x2914=IKPowWithIntegerCheck(((0.0683333333333333)+(((-1.0)*x2906))+(((-1.0)*x2913))),-1);
if(!x2914.valid){
continue;
}
CheckValue<IkReal> x2915=IKPowWithIntegerCheck(((0.0615)+(((0.0683333333333333)*x2905))+(((-1.0)*x2905*x2906))+(((-0.2)*pz))+(((-1.0)*x2905*x2913))+(((-0.3825)*sj3))+(((-0.0683333333333333)*x2912))+((x2912*x2913))+((x2906*x2912))),-1);
if(!x2915.valid){
continue;
}
if( IKabs(((x2914.value)*(((-0.547694444444444)+x2910+x2911+x2908)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2915.value)*(((((-1.0)*x2907*x2911))+(((-1.0)*x2907*x2910))+(((-1.0)*x2908*x2909))+(((-1.0)*x2907*x2908))+(((-1.0)*x2909*x2910))+(((-1.0)*x2909*x2911))+(((0.547694444444444)*x2907))+(((0.547694444444444)*x2909)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2914.value)*(((-0.547694444444444)+x2910+x2911+x2908))))+IKsqr(((x2915.value)*(((((-1.0)*x2907*x2911))+(((-1.0)*x2907*x2910))+(((-1.0)*x2908*x2909))+(((-1.0)*x2907*x2908))+(((-1.0)*x2909*x2910))+(((-1.0)*x2909*x2911))+(((0.547694444444444)*x2907))+(((0.547694444444444)*x2909))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2914.value)*(((-0.547694444444444)+x2910+x2911+x2908))), ((x2915.value)*(((((-1.0)*x2907*x2911))+(((-1.0)*x2907*x2910))+(((-1.0)*x2908*x2909))+(((-1.0)*x2907*x2908))+(((-1.0)*x2909*x2910))+(((-1.0)*x2909*x2911))+(((0.547694444444444)*x2907))+(((0.547694444444444)*x2909))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2916=IKcos(j1);
IkReal x2917=IKsin(j1);
IkReal x2918=((0.15)*py);
IkReal x2919=((0.09)*cj3);
IkReal x2920=(px*sj0);
IkReal x2921=((0.405)*sj3);
IkReal x2922=(py*sj0);
IkReal x2923=((1.0)*cj0);
IkReal x2924=(sj0*x2916);
IkReal x2925=(cj0*x2917);
IkReal x2926=(cj0*px*x2916);
evalcond[0]=((((0.075)*x2916))+(((-1.0)*px*x2923))+((x2916*x2919))+(((-1.0)*x2916*x2921))+(((-1.0)*x2922)));
evalcond[1]=((0.547694444444444)+(((-0.555555555555556)*pp))+(((-0.0354166666666667)*sj3))+(((-0.0518518518518519)*pz))+(((-0.222222222222222)*pz*x2917))+(((0.0683333333333333)*x2917))+(((-0.425)*sj3*x2917)));
evalcond[2]=(((x2916*x2920))+(((-1.0)*py*x2916*x2923))+(((0.9)*x2916))+((x2917*x2922))+((px*x2925)));
evalcond[3]=((-0.075)+((x2916*x2922))+((py*x2925))+(((-1.0)*x2917*x2920))+(((-0.9)*x2917))+x2921+x2926+(((-1.0)*x2919)));
evalcond[4]=((-0.6444)+(((1.8)*cj0*py))+(((-0.135)*x2917))+(((-1.8)*x2920))+((x2918*x2925))+((x2918*x2924))+(((-1.0)*pp))+(((-0.06)*pz))+(((-0.15)*x2917*x2920))+(((0.15)*x2926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2927=(cj0*px);
IkReal x2928=(py*sj0);
IkReal x2929=((0.09)*cj3);
IkReal x2930=(cj0*sj0);
IkReal x2931=((0.405)*sj3);
IkReal x2932=(px*py);
CheckValue<IkReal> x2933=IKPowWithIntegerCheck(((((-1.0)*x2927*x2931))+((x2928*x2929))+(((0.075)*x2928))+(((0.075)*x2927))+(((-1.0)*x2928*x2931))+((x2927*x2929))),-1);
if(!x2933.valid){
continue;
}
CheckValue<IkReal> x2934=IKPowWithIntegerCheck(((0.075)+(((-1.0)*x2931))+x2929),-1);
if(!x2934.valid){
continue;
}
if( IKabs(((x2933.value)*(((((2.0)*cj0*py*x2927))+(((-1.0)*px*sj0*x2927))+(((-0.9)*x2927))+(((-0.9)*x2928))+(((-1.0)*x2932))+((cj0*py*x2928)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2934.value)*((x2928+x2927)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2933.value)*(((((2.0)*cj0*py*x2927))+(((-1.0)*px*sj0*x2927))+(((-0.9)*x2927))+(((-0.9)*x2928))+(((-1.0)*x2932))+((cj0*py*x2928))))))+IKsqr(((x2934.value)*((x2928+x2927))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2933.value)*(((((2.0)*cj0*py*x2927))+(((-1.0)*px*sj0*x2927))+(((-0.9)*x2927))+(((-0.9)*x2928))+(((-1.0)*x2932))+((cj0*py*x2928))))), ((x2934.value)*((x2928+x2927))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2935=IKcos(j1);
IkReal x2936=IKsin(j1);
IkReal x2937=((0.15)*py);
IkReal x2938=((0.09)*cj3);
IkReal x2939=(px*sj0);
IkReal x2940=((0.405)*sj3);
IkReal x2941=(py*sj0);
IkReal x2942=((1.0)*cj0);
IkReal x2943=(sj0*x2935);
IkReal x2944=(cj0*x2936);
IkReal x2945=(cj0*px*x2935);
evalcond[0]=((((-1.0)*x2941))+(((-1.0)*px*x2942))+(((-1.0)*x2935*x2940))+((x2935*x2938))+(((0.075)*x2935)));
evalcond[1]=((0.547694444444444)+(((-0.555555555555556)*pp))+(((-0.0354166666666667)*sj3))+(((0.0683333333333333)*x2936))+(((-0.0518518518518519)*pz))+(((-0.425)*sj3*x2936))+(((-0.222222222222222)*pz*x2936)));
evalcond[2]=(((px*x2944))+((x2936*x2941))+(((-1.0)*py*x2935*x2942))+(((0.9)*x2935))+((x2935*x2939)));
evalcond[3]=((-0.075)+((x2935*x2941))+(((-1.0)*x2938))+(((-0.9)*x2936))+(((-1.0)*x2936*x2939))+((py*x2944))+x2945+x2940);
evalcond[4]=((-0.6444)+(((-0.135)*x2936))+(((1.8)*cj0*py))+(((-0.15)*x2936*x2939))+(((-1.0)*pp))+(((-0.06)*pz))+(((-1.8)*x2939))+((x2937*x2943))+((x2937*x2944))+(((0.15)*x2945)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x2946=IKPowWithIntegerCheck(((0.0683333333333333)+(((-0.222222222222222)*pz))+(((-0.425)*sj3))),-1);
if(!x2946.valid){
continue;
}
CheckValue<IkReal> x2947=IKPowWithIntegerCheck(((0.075)+(((0.09)*cj3))+(((-0.405)*sj3))),-1);
if(!x2947.valid){
continue;
}
if( IKabs(((x2946.value)*(((-0.547694444444444)+(((0.0354166666666667)*sj3))+(((0.0518518518518519)*pz))+(((0.555555555555556)*pp)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2947.value)*((((cj0*px))+((py*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2946.value)*(((-0.547694444444444)+(((0.0354166666666667)*sj3))+(((0.0518518518518519)*pz))+(((0.555555555555556)*pp))))))+IKsqr(((x2947.value)*((((cj0*px))+((py*sj0))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2946.value)*(((-0.547694444444444)+(((0.0354166666666667)*sj3))+(((0.0518518518518519)*pz))+(((0.555555555555556)*pp))))), ((x2947.value)*((((cj0*px))+((py*sj0))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x2948=IKcos(j1);
IkReal x2949=IKsin(j1);
IkReal x2950=((0.15)*py);
IkReal x2951=((0.09)*cj3);
IkReal x2952=(px*sj0);
IkReal x2953=((0.405)*sj3);
IkReal x2954=(py*sj0);
IkReal x2955=((1.0)*cj0);
IkReal x2956=(sj0*x2948);
IkReal x2957=(cj0*x2949);
IkReal x2958=(cj0*px*x2948);
evalcond[0]=((((-1.0)*x2954))+(((-1.0)*x2948*x2953))+(((-1.0)*px*x2955))+((x2948*x2951))+(((0.075)*x2948)));
evalcond[1]=((0.547694444444444)+(((-0.555555555555556)*pp))+(((-0.0354166666666667)*sj3))+(((-0.0518518518518519)*pz))+(((0.0683333333333333)*x2949))+(((-0.425)*sj3*x2949))+(((-0.222222222222222)*pz*x2949)));
evalcond[2]=((((-1.0)*py*x2948*x2955))+((x2948*x2952))+((px*x2957))+(((0.9)*x2948))+((x2949*x2954)));
evalcond[3]=((-0.075)+(((-1.0)*x2951))+(((-0.9)*x2949))+((py*x2957))+((x2948*x2954))+(((-1.0)*x2949*x2952))+x2958+x2953);
evalcond[4]=((-0.6444)+((x2950*x2956))+((x2950*x2957))+(((1.8)*cj0*py))+(((-1.8)*x2952))+(((-1.0)*pp))+(((-0.06)*pz))+(((-0.15)*x2949*x2952))+(((0.15)*x2958))+(((-0.135)*x2949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2959=(cj0*px);
IkReal x2960=(px*py);
IkReal x2961=(py*sj0);
IkReal x2962=((0.365)*sj2);
IkReal x2963=(cj0*sj0);
IkReal x2964=((0.405)*cj3*sj2);
IkReal x2965=((0.405)*cj2*sj3);
IkReal x2966=((0.09)*cj2*cj3);
IkReal x2967=((0.09)*sj2*sj3);
CheckValue<IkReal> x2968=IKPowWithIntegerCheck(((((-1.0)*x2959*x2966))+((x2961*x2965))+((x2961*x2967))+((x2961*x2964))+((x2961*x2962))+(((0.075)*x2961))+((x2959*x2965))+((x2959*x2964))+((x2959*x2967))+((x2959*x2962))+(((-1.0)*x2961*x2966))+(((0.075)*x2959))),-1);
if(!x2968.valid){
continue;
}
CheckValue<IkReal> x2969=IKPowWithIntegerCheck(((0.075)+(((-1.0)*x2966))+x2965+x2964+x2967+x2962),-1);
if(!x2969.valid){
continue;
}
if( IKabs(((x2968.value)*(((((-0.9)*x2961))+(((-1.0)*x2960))+(((-1.0)*px*sj0*x2959))+(((-0.9)*x2959))+((cj0*py*x2961))+(((2.0)*cj0*py*x2959)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x2969.value)*((x2959+x2961)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x2968.value)*(((((-0.9)*x2961))+(((-1.0)*x2960))+(((-1.0)*px*sj0*x2959))+(((-0.9)*x2959))+((cj0*py*x2961))+(((2.0)*cj0*py*x2959))))))+IKsqr(((x2969.value)*((x2959+x2961))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((x2968.value)*(((((-0.9)*x2961))+(((-1.0)*x2960))+(((-1.0)*px*sj0*x2959))+(((-0.9)*x2959))+((cj0*py*x2961))+(((2.0)*cj0*py*x2959))))), ((x2969.value)*((x2959+x2961))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x2970=IKcos(j1);
IkReal x2971=IKsin(j1);
IkReal x2972=((0.405)*sj3);
IkReal x2973=(cj0*sj2);
IkReal x2974=((0.15)*cj0);
IkReal x2975=(px*sj0);
IkReal x2976=((0.09)*cj3);
IkReal x2977=((0.365)*sj2);
IkReal x2978=((1.0)*cj2);
IkReal x2979=((0.73)*sj2);
IkReal x2980=((1.0)*py);
IkReal x2981=((0.405)*cj3);
IkReal x2982=(cj2*pz);
IkReal x2983=(cj0*px);
IkReal x2984=(cj2*x2971);
IkReal x2985=(px*x2970);
IkReal x2986=(py*x2971);
IkReal x2987=((0.09)*sj2*sj3);
IkReal x2988=(sj2*x2971);
IkReal x2989=(cj2*x2970);
IkReal x2990=(py*sj0*x2970);
evalcond[0]=(((x2970*x2975))+((x2971*x2983))+(((0.9)*x2970))+((sj0*x2986))+(((-1.0)*cj0*x2970*x2980)));
evalcond[1]=((((-1.0)*sj0*x2980))+((x2970*x2977))+(((-1.0)*x2976*x2989))+((x2970*x2987))+(((-1.0)*x2983))+((sj2*x2970*x2981))+(((0.075)*x2970))+((x2972*x2989)));
evalcond[2]=((0.9)+(((-1.0)*cj0*x2980))+((x2971*x2977))+(((-1.0)*x2976*x2984))+((x2971*x2987))+((x2981*x2988))+(((0.075)*x2971))+((x2972*x2984))+x2975);
evalcond[3]=((-0.365)+(((-1.0)*x2975*x2988))+(((-0.09)*sj3))+(((-1.0)*x2981))+(((-0.335)*cj2))+(((-0.075)*sj2))+(((-0.9)*x2988))+x2982+((x2973*x2985))+((x2973*x2986))+((sj2*x2990)));
evalcond[4]=((((0.075)*cj2))+(((0.9)*x2984))+(((-1.0)*x2976))+(((-1.0)*x2978*x2990))+((pz*sj2))+((x2975*x2984))+(((-0.335)*sj2))+x2972+(((-1.0)*cj0*x2978*x2986))+(((-1.0)*x2970*x2978*x2983)));
evalcond[5]=((-0.88895)+(((-0.657)*x2988))+((x2979*x2990))+(((1.8)*cj0*py))+(((0.73)*x2982))+((x2974*x2986))+((x2974*x2985))+(((-1.0)*x2971*x2975*x2979))+(((0.67)*pz))+(((-1.0)*pp))+(((0.15)*x2990))+(((-1.8)*x2975))+(((-0.05475)*sj2))+(((-0.15)*x2971*x2975))+(((-0.135)*x2971))+(((-0.24455)*cj2))+(((0.73)*x2973*x2985))+(((0.73)*x2973*x2986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2991=(cj0*py);
IkReal x2992=(cj2*pz);
IkReal x2993=((0.405)*cj3);
IkReal x2994=((0.09)*sj3);
IkReal x2995=(py*sj0);
IkReal x2996=(cj0*px);
IkReal x2997=(px*sj0);
IkReal x2998=((0.335)*cj2);
IkReal x2999=((1.8)*sj2);
IkReal x3000=((0.075)*sj2);
IkReal x3001=(px*x3000);
CheckValue<IkReal> x3002=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj2*(pz*pz)))+((pp*sj2))+(((0.81)*sj2))+((x2997*x2999))+(((-1.0)*x2991*x2999)))),-1);
if(!x3002.valid){
continue;
}
CheckValue<IkReal> x3003 = IKatan2WithCheck(IkReal(((-0.3285)+(((-1.0)*x2997*x3000))+(((-0.365)*x2997))+((x2992*x2997))+(((0.9)*x2992))+(((-0.3645)*cj3))+((x2991*x2993))+((x2991*x2994))+((x2991*x2998))+(((-1.0)*x2997*x2998))+(((0.365)*x2991))+(((-1.0)*x2993*x2997))+(((-0.0675)*sj2))+(((-1.0)*x2994*x2997))+(((-0.3015)*cj2))+((x2991*x3000))+(((-0.081)*sj3))+(((-1.0)*x2991*x2992)))),IkReal((((x2995*x2998))+((x2996*x2998))+((x2995*x3000))+((x2996*x3000))+(((0.365)*x2996))+(((0.365)*x2995))+((x2993*x2996))+((x2993*x2995))+((x2994*x2995))+((x2994*x2996))+(((-1.0)*x2992*x2995))+(((-1.0)*x2992*x2996)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3003.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3002.value)))+(x3003.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3004=IKcos(j1);
IkReal x3005=IKsin(j1);
IkReal x3006=((0.405)*sj3);
IkReal x3007=(cj0*sj2);
IkReal x3008=((0.15)*cj0);
IkReal x3009=(px*sj0);
IkReal x3010=((0.09)*cj3);
IkReal x3011=((0.365)*sj2);
IkReal x3012=((1.0)*cj2);
IkReal x3013=((0.73)*sj2);
IkReal x3014=((1.0)*py);
IkReal x3015=((0.405)*cj3);
IkReal x3016=(cj2*pz);
IkReal x3017=(cj0*px);
IkReal x3018=(cj2*x3005);
IkReal x3019=(px*x3004);
IkReal x3020=(py*x3005);
IkReal x3021=((0.09)*sj2*sj3);
IkReal x3022=(sj2*x3005);
IkReal x3023=(cj2*x3004);
IkReal x3024=(py*sj0*x3004);
evalcond[0]=((((0.9)*x3004))+(((-1.0)*cj0*x3004*x3014))+((sj0*x3020))+((x3004*x3009))+((x3005*x3017)));
evalcond[1]=((((-1.0)*sj0*x3014))+(((0.075)*x3004))+(((-1.0)*x3010*x3023))+((x3004*x3021))+((x3006*x3023))+((x3004*x3011))+((sj2*x3004*x3015))+(((-1.0)*x3017)));
evalcond[2]=((0.9)+(((0.075)*x3005))+x3009+(((-1.0)*cj0*x3014))+((x3005*x3021))+((x3015*x3022))+(((-1.0)*x3010*x3018))+((x3005*x3011))+((x3006*x3018)));
evalcond[3]=((-0.365)+((sj2*x3024))+x3016+(((-0.09)*sj3))+(((-0.335)*cj2))+(((-0.075)*sj2))+((x3007*x3020))+(((-1.0)*x3009*x3022))+(((-1.0)*x3015))+(((-0.9)*x3022))+((x3007*x3019)));
evalcond[4]=((((0.9)*x3018))+((x3009*x3018))+x3006+(((-1.0)*cj0*x3012*x3020))+(((0.075)*cj2))+(((-1.0)*x3010))+(((-1.0)*x3012*x3024))+(((-1.0)*x3004*x3012*x3017))+((pz*sj2))+(((-0.335)*sj2)));
evalcond[5]=((-0.88895)+((x3013*x3024))+(((-1.0)*x3005*x3009*x3013))+(((0.73)*x3007*x3019))+(((0.15)*x3024))+((x3008*x3019))+(((1.8)*cj0*py))+(((-1.8)*x3009))+(((0.73)*x3016))+(((0.73)*x3007*x3020))+(((0.67)*pz))+(((-1.0)*pp))+((x3008*x3020))+(((-0.15)*x3005*x3009))+(((-0.05475)*sj2))+(((-0.135)*x3005))+(((-0.24455)*cj2))+(((-0.657)*x3022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x3025=IKPowWithIntegerCheck(IKsign(((0.075)+(((0.365)*sj2))+(((0.09)*sj2*sj3))+(((-0.09)*cj2*cj3))+(((0.405)*cj2*sj3))+(((0.405)*cj3*sj2)))),-1);
if(!x3025.valid){
continue;
}
CheckValue<IkReal> x3026 = IKatan2WithCheck(IkReal(((-0.9)+(((-1.0)*px*sj0))+((cj0*py)))),IkReal((((cj0*px))+((py*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3026.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3025.value)))+(x3026.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[6];
IkReal x3027=IKcos(j1);
IkReal x3028=IKsin(j1);
IkReal x3029=((0.405)*sj3);
IkReal x3030=(cj0*sj2);
IkReal x3031=((0.15)*cj0);
IkReal x3032=(px*sj0);
IkReal x3033=((0.09)*cj3);
IkReal x3034=((0.365)*sj2);
IkReal x3035=((1.0)*cj2);
IkReal x3036=((0.73)*sj2);
IkReal x3037=((1.0)*py);
IkReal x3038=((0.405)*cj3);
IkReal x3039=(cj2*pz);
IkReal x3040=(cj0*px);
IkReal x3041=(cj2*x3028);
IkReal x3042=(px*x3027);
IkReal x3043=(py*x3028);
IkReal x3044=((0.09)*sj2*sj3);
IkReal x3045=(sj2*x3028);
IkReal x3046=(cj2*x3027);
IkReal x3047=(py*sj0*x3027);
evalcond[0]=(((x3028*x3040))+(((0.9)*x3027))+((sj0*x3043))+(((-1.0)*cj0*x3027*x3037))+((x3027*x3032)));
evalcond[1]=(((sj2*x3027*x3038))+(((-1.0)*x3033*x3046))+((x3029*x3046))+(((0.075)*x3027))+(((-1.0)*x3040))+((x3027*x3044))+(((-1.0)*sj0*x3037))+((x3027*x3034)));
evalcond[2]=((0.9)+((x3028*x3034))+(((-1.0)*x3033*x3041))+((x3029*x3041))+x3032+(((0.075)*x3028))+(((-1.0)*cj0*x3037))+((x3028*x3044))+((x3038*x3045)));
evalcond[3]=((-0.365)+x3039+(((-0.09)*sj3))+((sj2*x3047))+(((-0.335)*cj2))+(((-0.9)*x3045))+(((-0.075)*sj2))+((x3030*x3042))+((x3030*x3043))+(((-1.0)*x3038))+(((-1.0)*x3032*x3045)));
evalcond[4]=(((x3032*x3041))+x3029+(((-1.0)*x3027*x3035*x3040))+(((0.075)*cj2))+(((-1.0)*cj0*x3035*x3043))+(((-1.0)*x3033))+(((-1.0)*x3035*x3047))+((pz*sj2))+(((-0.335)*sj2))+(((0.9)*x3041)));
evalcond[5]=((-0.88895)+(((0.73)*x3039))+(((1.8)*cj0*py))+(((-0.135)*x3028))+(((0.67)*pz))+(((-1.8)*x3032))+(((0.73)*x3030*x3042))+(((0.73)*x3030*x3043))+(((-1.0)*pp))+(((-0.657)*x3045))+(((0.15)*x3047))+(((-0.05475)*sj2))+(((-0.15)*x3028*x3032))+(((-1.0)*x3028*x3032*x3036))+(((-0.24455)*cj2))+((x3036*x3047))+((x3031*x3042))+((x3031*x3043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x90=(cj1*sj0);
IkReal x91=(cj0*sj1);
IkReal x92=(cj2*sj3);
IkReal x93=(cj3*sj2);
IkReal x94=(cj0*cj1);
IkReal x95=((1.0)*sj0*sj1);
IkReal x96=(((cj2*cj3))+(((-1.0)*sj2*sj3)));
IkReal x97=(x94+(((-1.0)*x95)));
IkReal x98=(x93+x92);
IkReal x99=(sj0*x96);
IkReal x100=((((-1.0)*x92))+(((-1.0)*x93)));
IkReal x101=(x94*x96);
IkReal x102=((((-1.0)*x91))+(((-1.0)*x90)));
IkReal x103=((((-1.0)*x95*x96))+x101);
IkReal x104=(((x90*x96))+((x91*x96)));
IkReal x105=(((x90*x98))+((x91*x98)));
IkReal x106=((((-1.0)*x95*x98))+((x94*x98)));
new_r00=(((r10*x104))+((r20*x100))+((r00*x103)));
new_r01=(((r21*x100))+((r01*x103))+((r11*x104)));
new_r02=(((r22*x100))+((r02*((x101+(((-1.0)*sj1*x99))))))+((r12*x104)));
new_r10=(((r10*x97))+((r00*x102)));
new_r11=(((r11*x97))+((r01*x102)));
new_r12=(((r02*x102))+((r12*x97)));
new_r20=(((r10*x105))+((r20*x96))+((r00*x106)));
new_r21=(((r21*x96))+((r01*x106))+((r11*x105)));
new_r22=(((r02*x106))+((r12*x105))+((r22*x96)));
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
cj5array[0]=new_r22;
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[3];
j4eval[0]=sj5;
j4eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j4eval[2]=IKsign(sj5);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
j6eval[0]=sj5;
j6eval[1]=((IKabs(new_r20))+(IKabs(new_r21)));
j6eval[2]=IKsign(sj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=new_r12;
j4eval[1]=sj5;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j6mul = 1;
j6=0;
j4mul=-1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(new_r00)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4=IKatan2(((-1.0)*new_r01), new_r00);
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].fmul = j4mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].fmul = j6mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j6mul = 1;
j6=0;
j4mul=1.0;
if( IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r01))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4=IKatan2(((-1.0)*new_r01), ((-1.0)*new_r00));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].fmul = j4mul;
vinfos[4].freeind = 0;
vinfos[4].maxsolutions = 0;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].fmul = j6mul;
vinfos[6].freeind = 0;
vinfos[6].maxsolutions = 0;
std::vector<int> vfree(1);
vfree[0] = 6;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x107=new_r22*new_r22;
IkReal x108=((16.0)*new_r10);
IkReal x109=((16.0)*new_r01);
IkReal x110=((16.0)*new_r22);
IkReal x111=((8.0)*new_r11);
IkReal x112=((8.0)*new_r00);
IkReal x113=(x107*x108);
IkReal x114=(x107*x109);
j4eval[0]=((IKabs(((((-1.0)*x114))+x109)))+(IKabs(((((-1.0)*x108))+x113)))+(IKabs(((((-1.0)*new_r22*x112))+((x107*x111)))))+(IKabs(((((32.0)*new_r11))+(((-1.0)*new_r00*x110))+(((-16.0)*new_r11*x107)))))+(IKabs((((new_r22*x111))+(((-1.0)*x112)))))+(IKabs(((((-1.0)*x113))+x108)))+(IKabs((((new_r11*x110))+(((-32.0)*new_r00*x107))+(((16.0)*new_r00)))))+(IKabs(((((-1.0)*x109))+x114))));
if( IKabs(j4eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j4, j6]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j4evalpoly[1];
IkReal x115=new_r22*new_r22;
IkReal x116=((16.0)*new_r10);
IkReal x117=(new_r11*new_r22);
IkReal x118=(x115*x116);
IkReal x119=((((8.0)*x117))+(((-8.0)*new_r00)));
op[0]=x119;
op[1]=((((-1.0)*x118))+x116);
op[2]=((((16.0)*x117))+(((16.0)*new_r00))+(((-32.0)*new_r00*x115)));
op[3]=((((-1.0)*x116))+x118);
op[4]=x119;
polyroots4(op,zeror,numroots);
IkReal j4array[4], cj4array[4], sj4array[4], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[4]={true,true,true,true};
_nj4 = 4;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

IkReal x120=new_r22*new_r22;
IkReal x121=((16.0)*new_r01);
IkReal x122=(new_r00*new_r22);
IkReal x123=((8.0)*x122);
IkReal x124=(new_r11*x120);
IkReal x125=(x120*x121);
IkReal x126=((8.0)*x124);
j4evalpoly[0]=(((htj4*(((((-1.0)*x125))+x121))))+(((htj4*htj4*htj4)*(((((-1.0)*x121))+x125))))+(((-1.0)*x123))+x126+(((htj4*htj4*htj4*htj4)*(((((-1.0)*x123))+x126))))+(((htj4*htj4)*(((((-16.0)*x122))+(((-16.0)*x124))+(((32.0)*new_r11)))))));
if( IKabs(j4evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
IkReal j6eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x127=cj4*cj4;
IkReal x128=(cj4*new_r22);
IkReal x129=((-1.0)+(((-1.0)*x127*(new_r22*new_r22)))+x127);
j6eval[0]=x129;
j6eval[1]=((IKabs((((new_r01*sj4))+(((-1.0)*new_r00*x128)))))+(IKabs((((new_r01*x128))+((new_r00*sj4))))));
j6eval[2]=IKsign(x129);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j6eval[0]=new_r22;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x130=new_r22*new_r22;
j6eval[0]=(((cj4*x130))+(((-1.0)*cj4)));
j6eval[1]=((((-1.0)*sj4))+((sj4*x130)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x131=IKsin(j6);
IkReal x132=IKcos(j6);
evalcond[0]=x131;
evalcond[1]=((-1.0)*x132);
evalcond[2]=((((-1.0)*x131))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x132))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x133=IKsin(j6);
IkReal x134=IKcos(j6);
evalcond[0]=x133;
evalcond[1]=((-1.0)*x134);
evalcond[2]=((((-1.0)*x133))+new_r00);
evalcond[3]=((((-1.0)*x134))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x135=IKsin(j6);
IkReal x136=IKcos(j6);
evalcond[0]=x135;
evalcond[1]=((-1.0)*x136);
evalcond[2]=((((-1.0)*x135))+new_r10);
evalcond[3]=((((-1.0)*x136))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x137=IKsin(j6);
IkReal x138=IKcos(j6);
evalcond[0]=x137;
evalcond[1]=((-1.0)*x138);
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x137)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x139=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x139.valid){
continue;
}
if((x139.value) < -0.00001)
continue;
IkReal gconst11=((-1.0)*(IKsqrt(x139.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj4)))))+(IKabs((cj4+(((-1.0)*gconst11)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst11*gconst11))))) < -0.00001)
continue;
sj4=IKsqrt(((1.0)+(((-1.0)*(gconst11*gconst11)))));
cj4=gconst11;
if( (gconst11) < -1-IKFAST_SINCOS_THRESH || (gconst11) > 1+IKFAST_SINCOS_THRESH )
    continue;
j4=IKacos(gconst11);
CheckValue<IkReal> x140=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x140.valid){
continue;
}
if((x140.value) < -0.00001)
continue;
IkReal gconst11=((-1.0)*(IKsqrt(x140.value)));
j6eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if((((1.0)+(((-1.0)*(gconst11*gconst11))))) < -0.00001)
continue;
CheckValue<IkReal> x141=IKPowWithIntegerCheck(gconst11,-1);
if(!x141.valid){
continue;
}
if( IKabs(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst11*gconst11))))))))+((gconst11*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x141.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst11*gconst11))))))))+((gconst11*new_r10))))+IKsqr((new_r11*(x141.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst11*gconst11))))))))+((gconst11*new_r10))), (new_r11*(x141.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x142=IKcos(j6);
IkReal x143=IKsin(j6);
IkReal x144=((1.0)*gconst11);
if((((1.0)+(((-1.0)*gconst11*x144)))) < -0.00001)
continue;
IkReal x145=IKsqrt(((1.0)+(((-1.0)*gconst11*x144))));
IkReal x146=((1.0)*x145);
evalcond[0]=x143;
evalcond[1]=((-1.0)*x142);
evalcond[2]=((((-1.0)*x142*x144))+new_r11);
evalcond[3]=((((-1.0)*x143*x144))+new_r10);
evalcond[4]=(((x142*x145))+new_r01);
evalcond[5]=(new_r00+((x143*x145)));
evalcond[6]=((((-1.0)*x143))+(((-1.0)*new_r00*x146))+((gconst11*new_r10)));
evalcond[7]=((((-1.0)*new_r01*x146))+(((-1.0)*x142))+((gconst11*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x147=IKPowWithIntegerCheck(IKsign(gconst11),-1);
if(!x147.valid){
continue;
}
CheckValue<IkReal> x148 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x148.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x147.value)))+(x148.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x149=IKcos(j6);
IkReal x150=IKsin(j6);
IkReal x151=((1.0)*gconst11);
if((((1.0)+(((-1.0)*gconst11*x151)))) < -0.00001)
continue;
IkReal x152=IKsqrt(((1.0)+(((-1.0)*gconst11*x151))));
IkReal x153=((1.0)*x152);
evalcond[0]=x150;
evalcond[1]=((-1.0)*x149);
evalcond[2]=(new_r11+(((-1.0)*x149*x151)));
evalcond[3]=((((-1.0)*x150*x151))+new_r10);
evalcond[4]=(((x149*x152))+new_r01);
evalcond[5]=(((x150*x152))+new_r00);
evalcond[6]=((((-1.0)*x150))+(((-1.0)*new_r00*x153))+((gconst11*new_r10)));
evalcond[7]=((((-1.0)*x149))+(((-1.0)*new_r01*x153))+((gconst11*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x154=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x154.valid){
continue;
}
if((x154.value) < -0.00001)
continue;
IkReal gconst11=((-1.0)*(IKsqrt(x154.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj4+(((-1.0)*gconst11)))))+(IKabs(((1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst11*gconst11))))) < -0.00001)
continue;
sj4=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst11*gconst11)))))));
cj4=gconst11;
if( (gconst11) < -1-IKFAST_SINCOS_THRESH || (gconst11) > 1+IKFAST_SINCOS_THRESH )
    continue;
j4=((-1.0)*(IKacos(gconst11)));
CheckValue<IkReal> x155=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x155.valid){
continue;
}
if((x155.value) < -0.00001)
continue;
IkReal gconst11=((-1.0)*(IKsqrt(x155.value)));
j6eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if((((1.0)+(((-1.0)*(gconst11*gconst11))))) < -0.00001)
continue;
CheckValue<IkReal> x156=IKPowWithIntegerCheck(gconst11,-1);
if(!x156.valid){
continue;
}
if( IKabs((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst11*gconst11))))))))+((gconst11*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x156.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst11*gconst11))))))))+((gconst11*new_r10))))+IKsqr((new_r11*(x156.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst11*gconst11))))))))+((gconst11*new_r10))), (new_r11*(x156.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x157=IKcos(j6);
IkReal x158=IKsin(j6);
IkReal x159=((1.0)*gconst11);
if((((1.0)+(((-1.0)*gconst11*x159)))) < -0.00001)
continue;
IkReal x160=IKsqrt(((1.0)+(((-1.0)*gconst11*x159))));
IkReal x161=((1.0)*x160);
evalcond[0]=x158;
evalcond[1]=((-1.0)*x157);
evalcond[2]=((((-1.0)*x157*x159))+new_r11);
evalcond[3]=((((-1.0)*x158*x159))+new_r10);
evalcond[4]=((((-1.0)*x157*x161))+new_r01);
evalcond[5]=((((-1.0)*x158*x161))+new_r00);
evalcond[6]=(((new_r00*x160))+(((-1.0)*x158))+((gconst11*new_r10)));
evalcond[7]=(((new_r01*x160))+(((-1.0)*x157))+((gconst11*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x162=IKPowWithIntegerCheck(IKsign(gconst11),-1);
if(!x162.valid){
continue;
}
CheckValue<IkReal> x163 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x163.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x162.value)))+(x163.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x164=IKcos(j6);
IkReal x165=IKsin(j6);
IkReal x166=((1.0)*gconst11);
if((((1.0)+(((-1.0)*gconst11*x166)))) < -0.00001)
continue;
IkReal x167=IKsqrt(((1.0)+(((-1.0)*gconst11*x166))));
IkReal x168=((1.0)*x167);
evalcond[0]=x165;
evalcond[1]=((-1.0)*x164);
evalcond[2]=(new_r11+(((-1.0)*x164*x166)));
evalcond[3]=(new_r10+(((-1.0)*x165*x166)));
evalcond[4]=(new_r01+(((-1.0)*x164*x168)));
evalcond[5]=(new_r00+(((-1.0)*x165*x168)));
evalcond[6]=(((new_r00*x167))+(((-1.0)*x165))+((gconst11*new_r10)));
evalcond[7]=(((new_r01*x167))+(((-1.0)*x164))+((gconst11*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x169=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x169.valid){
continue;
}
if((x169.value) < -0.00001)
continue;
IkReal gconst12=IKsqrt(x169.value);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj4)))))+(IKabs((cj4+(((-1.0)*gconst12)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
sj4=IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))));
cj4=gconst12;
if( (gconst12) < -1-IKFAST_SINCOS_THRESH || (gconst12) > 1+IKFAST_SINCOS_THRESH )
    continue;
j4=IKacos(gconst12);
CheckValue<IkReal> x170=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x170.valid){
continue;
}
if((x170.value) < -0.00001)
continue;
IkReal gconst12=IKsqrt(x170.value);
j6eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
CheckValue<IkReal> x171=IKPowWithIntegerCheck(gconst12,-1);
if(!x171.valid){
continue;
}
if( IKabs(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12))))))))+((gconst12*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x171.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12))))))))+((gconst12*new_r10))))+IKsqr((new_r11*(x171.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12))))))))+((gconst12*new_r10))), (new_r11*(x171.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x172=IKcos(j6);
IkReal x173=IKsin(j6);
IkReal x174=((1.0)*x172);
IkReal x175=((1.0)*x173);
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
IkReal x176=IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))));
IkReal x177=((1.0)*x176);
evalcond[0]=x173;
evalcond[1]=((-1.0)*x172);
evalcond[2]=(new_r11+(((-1.0)*gconst12*x174)));
evalcond[3]=(new_r10+(((-1.0)*gconst12*x175)));
evalcond[4]=(((x172*x176))+new_r01);
evalcond[5]=(((x173*x176))+new_r00);
evalcond[6]=((((-1.0)*x175))+(((-1.0)*new_r00*x177))+((gconst12*new_r10)));
evalcond[7]=((((-1.0)*x174))+(((-1.0)*new_r01*x177))+((gconst12*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x178 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x178.valid){
continue;
}
CheckValue<IkReal> x179=IKPowWithIntegerCheck(IKsign(gconst12),-1);
if(!x179.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x178.value)+(((1.5707963267949)*(x179.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x180=IKcos(j6);
IkReal x181=IKsin(j6);
IkReal x182=((1.0)*x180);
IkReal x183=((1.0)*x181);
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
IkReal x184=IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))));
IkReal x185=((1.0)*x184);
evalcond[0]=x181;
evalcond[1]=((-1.0)*x180);
evalcond[2]=((((-1.0)*gconst12*x182))+new_r11);
evalcond[3]=((((-1.0)*gconst12*x183))+new_r10);
evalcond[4]=(((x180*x184))+new_r01);
evalcond[5]=(new_r00+((x181*x184)));
evalcond[6]=((((-1.0)*x183))+(((-1.0)*new_r00*x185))+((gconst12*new_r10)));
evalcond[7]=((((-1.0)*x182))+(((-1.0)*new_r01*x185))+((gconst12*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x186=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x186.valid){
continue;
}
if((x186.value) < -0.00001)
continue;
IkReal gconst12=IKsqrt(x186.value);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj4+(((-1.0)*gconst12)))))+(IKabs(((1.0)+(IKsign(sj4)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
sj4=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))))));
cj4=gconst12;
if( (gconst12) < -1-IKFAST_SINCOS_THRESH || (gconst12) > 1+IKFAST_SINCOS_THRESH )
    continue;
j4=((-1.0)*(IKacos(gconst12)));
CheckValue<IkReal> x187=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(new_r22*new_r22)))),-1);
if(!x187.valid){
continue;
}
if((x187.value) < -0.00001)
continue;
IkReal gconst12=IKsqrt(x187.value);
j6eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
CheckValue<IkReal> x188=IKPowWithIntegerCheck(gconst12,-1);
if(!x188.valid){
continue;
}
if( IKabs((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12))))))))+((gconst12*new_r10)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r11*(x188.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12))))))))+((gconst12*new_r10))))+IKsqr((new_r11*(x188.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((new_r00*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12))))))))+((gconst12*new_r10))), (new_r11*(x188.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x189=IKcos(j6);
IkReal x190=IKsin(j6);
IkReal x191=((1.0)*x189);
IkReal x192=((1.0)*x190);
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
IkReal x193=IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))));
IkReal x194=((1.0)*x193);
evalcond[0]=x190;
evalcond[1]=((-1.0)*x189);
evalcond[2]=((((-1.0)*gconst12*x191))+new_r11);
evalcond[3]=((((-1.0)*gconst12*x192))+new_r10);
evalcond[4]=((((-1.0)*x191*x193))+new_r01);
evalcond[5]=((((-1.0)*x192*x193))+new_r00);
evalcond[6]=(((new_r00*x193))+(((-1.0)*x192))+((gconst12*new_r10)));
evalcond[7]=(((new_r01*x193))+(((-1.0)*x191))+((gconst12*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x195 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x195.valid){
continue;
}
CheckValue<IkReal> x196=IKPowWithIntegerCheck(IKsign(gconst12),-1);
if(!x196.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x195.value)+(((1.5707963267949)*(x196.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x197=IKcos(j6);
IkReal x198=IKsin(j6);
IkReal x199=((1.0)*x197);
IkReal x200=((1.0)*x198);
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
IkReal x201=IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))));
IkReal x202=((1.0)*x201);
evalcond[0]=x198;
evalcond[1]=((-1.0)*x197);
evalcond[2]=((((-1.0)*gconst12*x199))+new_r11);
evalcond[3]=((((-1.0)*gconst12*x200))+new_r10);
evalcond[4]=((((-1.0)*x199*x201))+new_r01);
evalcond[5]=((((-1.0)*x200*x201))+new_r00);
evalcond[6]=(((new_r00*x201))+(((-1.0)*x200))+((gconst12*new_r10)));
evalcond[7]=((((-1.0)*x199))+((new_r01*x201))+((gconst12*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x203=new_r22*new_r22;
CheckValue<IkReal> x204=IKPowWithIntegerCheck((((cj4*x203))+(((-1.0)*cj4))),-1);
if(!x204.valid){
continue;
}
CheckValue<IkReal> x205=IKPowWithIntegerCheck(((((-1.0)*sj4))+((sj4*x203))),-1);
if(!x205.valid){
continue;
}
if( IKabs(((x204.value)*(((((-1.0)*new_r01*new_r22))+(((-1.0)*new_r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x205.value)*((((new_r10*new_r22))+new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x204.value)*(((((-1.0)*new_r01*new_r22))+(((-1.0)*new_r10))))))+IKsqr(((x205.value)*((((new_r10*new_r22))+new_r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((x204.value)*(((((-1.0)*new_r01*new_r22))+(((-1.0)*new_r10))))), ((x205.value)*((((new_r10*new_r22))+new_r01))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[10];
IkReal x206=IKsin(j6);
IkReal x207=IKcos(j6);
IkReal x208=((1.0)*sj4);
IkReal x209=(cj4*new_r01);
IkReal x210=(new_r10*sj4);
IkReal x211=(new_r11*sj4);
IkReal x212=(cj4*new_r00);
IkReal x213=((1.0)*x207);
IkReal x214=(sj4*x206);
IkReal x215=(new_r22*x206);
IkReal x216=((1.0)*x206);
evalcond[0]=(x211+x215+x209);
evalcond[1]=(((new_r22*x211))+x206+((new_r22*x209)));
evalcond[2]=((((-1.0)*new_r00*x208))+((cj4*new_r10))+(((-1.0)*x216)));
evalcond[3]=(((cj4*new_r11))+(((-1.0)*x213))+(((-1.0)*new_r01*x208)));
evalcond[4]=(((cj4*x215))+((sj4*x207))+new_r01);
evalcond[5]=(x210+x212+(((-1.0)*new_r22*x213)));
evalcond[6]=(x214+(((-1.0)*cj4*new_r22*x213))+new_r00);
evalcond[7]=(((new_r22*x214))+(((-1.0)*cj4*x213))+new_r11);
evalcond[8]=(((new_r22*x212))+((new_r22*x210))+(((-1.0)*x213)));
evalcond[9]=((((-1.0)*new_r22*x207*x208))+(((-1.0)*cj4*x216))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x217=((1.0)*sj4);
CheckValue<IkReal> x218=IKPowWithIntegerCheck(new_r22,-1);
if(!x218.valid){
continue;
}
if( IKabs(((x218.value)*(((((-1.0)*cj4*new_r01))+(((-1.0)*new_r11*x217)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*new_r11))+(((-1.0)*new_r01*x217)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x218.value)*(((((-1.0)*cj4*new_r01))+(((-1.0)*new_r11*x217))))))+IKsqr((((cj4*new_r11))+(((-1.0)*new_r01*x217))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((x218.value)*(((((-1.0)*cj4*new_r01))+(((-1.0)*new_r11*x217))))), (((cj4*new_r11))+(((-1.0)*new_r01*x217))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[10];
IkReal x219=IKsin(j6);
IkReal x220=IKcos(j6);
IkReal x221=((1.0)*sj4);
IkReal x222=(cj4*new_r01);
IkReal x223=(new_r10*sj4);
IkReal x224=(new_r11*sj4);
IkReal x225=(cj4*new_r00);
IkReal x226=((1.0)*x220);
IkReal x227=(sj4*x219);
IkReal x228=(new_r22*x219);
IkReal x229=((1.0)*x219);
evalcond[0]=(x228+x222+x224);
evalcond[1]=(x219+((new_r22*x224))+((new_r22*x222)));
evalcond[2]=(((cj4*new_r10))+(((-1.0)*x229))+(((-1.0)*new_r00*x221)));
evalcond[3]=((((-1.0)*new_r01*x221))+((cj4*new_r11))+(((-1.0)*x226)));
evalcond[4]=(((sj4*x220))+((cj4*x228))+new_r01);
evalcond[5]=(x223+x225+(((-1.0)*new_r22*x226)));
evalcond[6]=(x227+(((-1.0)*cj4*new_r22*x226))+new_r00);
evalcond[7]=((((-1.0)*cj4*x226))+((new_r22*x227))+new_r11);
evalcond[8]=(((new_r22*x225))+((new_r22*x223))+(((-1.0)*x226)));
evalcond[9]=((((-1.0)*cj4*x229))+new_r10+(((-1.0)*new_r22*x220*x221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x230=cj4*cj4;
IkReal x231=(cj4*new_r22);
CheckValue<IkReal> x232 = IKatan2WithCheck(IkReal((((new_r01*x231))+((new_r00*sj4)))),IkReal(((((-1.0)*new_r00*x231))+((new_r01*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x232.valid){
continue;
}
CheckValue<IkReal> x233=IKPowWithIntegerCheck(IKsign(((-1.0)+x230+(((-1.0)*x230*(new_r22*new_r22))))),-1);
if(!x233.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x232.value)+(((1.5707963267949)*(x233.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[10];
IkReal x234=IKsin(j6);
IkReal x235=IKcos(j6);
IkReal x236=((1.0)*sj4);
IkReal x237=(cj4*new_r01);
IkReal x238=(new_r10*sj4);
IkReal x239=(new_r11*sj4);
IkReal x240=(cj4*new_r00);
IkReal x241=((1.0)*x235);
IkReal x242=(sj4*x234);
IkReal x243=(new_r22*x234);
IkReal x244=((1.0)*x234);
evalcond[0]=(x239+x237+x243);
evalcond[1]=(((new_r22*x237))+((new_r22*x239))+x234);
evalcond[2]=(((cj4*new_r10))+(((-1.0)*x244))+(((-1.0)*new_r00*x236)));
evalcond[3]=(((cj4*new_r11))+(((-1.0)*x241))+(((-1.0)*new_r01*x236)));
evalcond[4]=(((cj4*x243))+((sj4*x235))+new_r01);
evalcond[5]=((((-1.0)*new_r22*x241))+x238+x240);
evalcond[6]=((((-1.0)*cj4*new_r22*x241))+x242+new_r00);
evalcond[7]=((((-1.0)*cj4*x241))+((new_r22*x242))+new_r11);
evalcond[8]=(((new_r22*x240))+((new_r22*x238))+(((-1.0)*x241)));
evalcond[9]=((((-1.0)*new_r22*x235*x236))+(((-1.0)*cj4*x244))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4, j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x246=IKPowWithIntegerCheck(sj5,-1);
if(!x246.valid){
continue;
}
IkReal x245=x246.value;
CheckValue<IkReal> x247=IKPowWithIntegerCheck(new_r12,-1);
if(!x247.valid){
continue;
}
if( IKabs((x245*(x247.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj5*cj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x245)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x245*(x247.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj5*cj5)))))))+IKsqr((new_r02*x245))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x245*(x247.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj5*cj5)))))), (new_r02*x245));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x248=IKcos(j4);
IkReal x249=IKsin(j4);
IkReal x250=((1.0)*sj5);
IkReal x251=((1.0)*cj5);
IkReal x252=(new_r12*x249);
IkReal x253=(new_r02*x248);
evalcond[0]=((((-1.0)*x248*x250))+new_r02);
evalcond[1]=((((-1.0)*x249*x250))+new_r12);
evalcond[2]=(((new_r12*x248))+(((-1.0)*new_r02*x249)));
evalcond[3]=(x252+x253+(((-1.0)*x250)));
evalcond[4]=(((cj5*x253))+((cj5*x252))+(((-1.0)*new_r22*x250)));
evalcond[5]=((((-1.0)*new_r10*x249*x250))+(((-1.0)*new_r00*x248*x250))+(((-1.0)*new_r20*x251)));
evalcond[6]=((((-1.0)*new_r21*x251))+(((-1.0)*new_r11*x249*x250))+(((-1.0)*new_r01*x248*x250)));
evalcond[7]=((1.0)+(((-1.0)*x250*x252))+(((-1.0)*x250*x253))+(((-1.0)*new_r22*x251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[3];
j6eval[0]=sj5;
j6eval[1]=((IKabs(new_r20))+(IKabs(new_r21)));
j6eval[2]=IKsign(sj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
j6eval[0]=sj4;
j6eval[1]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
j6eval[0]=cj4;
j6eval[1]=cj5;
j6eval[2]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j6eval[0]=new_r12;
j6eval[1]=IKsign(new_r12);
j6eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j6eval[0]=cj5;
j6eval[1]=IKsign(cj5);
j6eval[2]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j6eval[0]=new_r12;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x254=IKcos(j6);
IkReal x255=((1.0)*(IKsin(j6)));
evalcond[0]=(x254+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x255)));
evalcond[2]=((((-1.0)*new_r00))+(((-1.0)*x255)));
evalcond[3]=((((-1.0)*new_r01))+(((-1.0)*x254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x256=IKsin(j6);
IkReal x257=((1.0)*(IKcos(j6)));
evalcond[0]=(x256+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x257)));
evalcond[2]=((((-1.0)*new_r00))+(((-1.0)*x256)));
evalcond[3]=((((-1.0)*new_r01))+(((-1.0)*x257)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r12);
evalcond[1]=new_r20;
evalcond[2]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
new_r12=0;
j6eval[0]=cj5;
j6eval[1]=IKsign(cj5);
j6eval[2]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
new_r12=0;
j6eval[0]=cj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r11;
evalcond[2]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x258=IKsin(j6);
IkReal x259=IKcos(j6);
evalcond[0]=x258;
evalcond[1]=((-1.0)*x259);
evalcond[2]=((((-1.0)*new_r00))+(((-1.0)*x258)));
evalcond[3]=((((-1.0)*new_r01))+(((-1.0)*x259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r11;
evalcond[2]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x260=IKsin(j6);
IkReal x261=IKcos(j6);
evalcond[0]=x260;
evalcond[1]=((-1.0)*x261);
evalcond[2]=((((-1.0)*x260))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x261))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x262=IKsin(j6);
IkReal x263=IKcos(j6);
IkReal x264=((-1.0)*x263);
evalcond[0]=x262;
evalcond[1]=(cj5*x262);
evalcond[2]=x264;
evalcond[3]=(cj5*x264);
evalcond[4]=((((-1.0)*x262))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x263))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x265=IKPowWithIntegerCheck(cj5,-1);
if(!x265.valid){
continue;
}
if( IKabs(((-1.0)*cj5*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r10*(x265.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj5*new_r11))+IKsqr((new_r10*(x265.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*cj5*new_r11), (new_r10*(x265.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x266=IKsin(j6);
IkReal x267=IKcos(j6);
IkReal x268=((1.0)*x267);
evalcond[0]=(((cj5*x266))+new_r11);
evalcond[1]=(((cj5*new_r11))+x266);
evalcond[2]=((((-1.0)*cj5*x268))+new_r10);
evalcond[3]=((((-1.0)*x266))+(((-1.0)*new_r00)));
evalcond[4]=((((-1.0)*new_r01))+(((-1.0)*x268)));
evalcond[5]=(((cj5*new_r10))+(((-1.0)*x268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x269 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x269.valid){
continue;
}
CheckValue<IkReal> x270=IKPowWithIntegerCheck(IKsign(cj5),-1);
if(!x270.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x269.value)+(((1.5707963267949)*(x270.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x271=IKsin(j6);
IkReal x272=IKcos(j6);
IkReal x273=((1.0)*x272);
evalcond[0]=(((cj5*x271))+new_r11);
evalcond[1]=(((cj5*new_r11))+x271);
evalcond[2]=((((-1.0)*cj5*x273))+new_r10);
evalcond[3]=((((-1.0)*x271))+(((-1.0)*new_r00)));
evalcond[4]=((((-1.0)*x273))+(((-1.0)*new_r01)));
evalcond[5]=(((cj5*new_r10))+(((-1.0)*x273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x274=IKsin(j6);
IkReal x275=IKcos(j6);
IkReal x276=((-1.0)*x275);
evalcond[0]=x274;
evalcond[1]=(new_r22*x274);
evalcond[2]=x276;
evalcond[3]=(new_r22*x276);
evalcond[4]=((((-1.0)*x274))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x275))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x277=IKPowWithIntegerCheck(new_r12,-1);
if(!x277.valid){
continue;
}
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x277.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r20*(x277.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r20*(x277.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x278=IKsin(j6);
IkReal x279=IKcos(j6);
IkReal x280=((1.0)*sj5);
IkReal x281=((1.0)*x279);
IkReal x282=((1.0)*x278);
evalcond[0]=(new_r20+((new_r12*x279)));
evalcond[1]=(((cj5*x278))+new_r11);
evalcond[2]=((((-1.0)*new_r12*x282))+new_r21);
evalcond[3]=((((-1.0)*cj5*x281))+new_r10);
evalcond[4]=((((-1.0)*x282))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x281))+(((-1.0)*new_r01)));
evalcond[6]=(((cj5*new_r11))+x278+(((-1.0)*new_r21*x280)));
evalcond[7]=(((cj5*new_r10))+(((-1.0)*x281))+(((-1.0)*new_r20*x280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x283 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x283.valid){
continue;
}
CheckValue<IkReal> x284=IKPowWithIntegerCheck(IKsign(cj5),-1);
if(!x284.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x283.value)+(((1.5707963267949)*(x284.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x285=IKsin(j6);
IkReal x286=IKcos(j6);
IkReal x287=((1.0)*sj5);
IkReal x288=((1.0)*x286);
IkReal x289=((1.0)*x285);
evalcond[0]=(((new_r12*x286))+new_r20);
evalcond[1]=(new_r11+((cj5*x285)));
evalcond[2]=((((-1.0)*new_r12*x289))+new_r21);
evalcond[3]=((((-1.0)*cj5*x288))+new_r10);
evalcond[4]=((((-1.0)*x289))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x288))+(((-1.0)*new_r01)));
evalcond[6]=(((cj5*new_r11))+x285+(((-1.0)*new_r21*x287)));
evalcond[7]=(((cj5*new_r10))+(((-1.0)*x288))+(((-1.0)*new_r20*x287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x290 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x290.valid){
continue;
}
CheckValue<IkReal> x291=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x291.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x290.value)+(((1.5707963267949)*(x291.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x292=IKsin(j6);
IkReal x293=IKcos(j6);
IkReal x294=((1.0)*sj5);
IkReal x295=((1.0)*x293);
IkReal x296=((1.0)*x292);
evalcond[0]=(((new_r12*x293))+new_r20);
evalcond[1]=(((cj5*x292))+new_r11);
evalcond[2]=((((-1.0)*new_r12*x296))+new_r21);
evalcond[3]=((((-1.0)*cj5*x295))+new_r10);
evalcond[4]=((((-1.0)*x296))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x295))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r21*x294))+((cj5*new_r11))+x292);
evalcond[7]=((((-1.0)*new_r20*x294))+((cj5*new_r10))+(((-1.0)*x295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x297=IKsin(j6);
IkReal x298=IKcos(j6);
CheckValue<IkReal> x303=IKPowWithIntegerCheck(new_r12,-1);
if(!x303.valid){
continue;
}
IkReal x299=x303.value;
IkReal x300=new_r22*new_r22;
IkReal x301=((1.0)*x298);
IkReal x302=(x299*x300);
evalcond[0]=(((new_r12*x297))+new_r21);
evalcond[1]=((((-1.0)*x297))+new_r00);
evalcond[2]=(new_r01+(((-1.0)*x301)));
evalcond[3]=((((-1.0)*new_r12*x301))+new_r20);
evalcond[4]=(((cj5*x297))+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*cj5*x301))+(((-1.0)*new_r10)));
evalcond[6]=(((new_r21*x302))+((new_r12*new_r21))+x297);
evalcond[7]=(((new_r12*new_r20))+((new_r20*x302))+(((-1.0)*x301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x304=IKcos(j6);
IkReal x305=IKsin(j6);
IkReal x306=((1.0)*sj4);
IkReal x307=((1.0)*x305);
IkReal x308=((1.0)*x304);
evalcond[0]=(x304+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x307)));
evalcond[2]=(((sj4*x304))+new_r01);
evalcond[3]=(((sj4*x305))+new_r00);
evalcond[4]=((((-1.0)*cj4*x308))+new_r11);
evalcond[5]=((((-1.0)*cj4*x307))+new_r10);
evalcond[6]=(((cj4*new_r10))+(((-1.0)*new_r00*x306))+(((-1.0)*x307)));
evalcond[7]=(((cj4*new_r11))+(((-1.0)*new_r01*x306))+(((-1.0)*x308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x309=IKcos(j6);
IkReal x310=IKsin(j6);
IkReal x311=((1.0)*sj4);
IkReal x312=((1.0)*x309);
IkReal x313=((1.0)*x310);
evalcond[0]=(x310+new_r21);
evalcond[1]=((((-1.0)*x312))+new_r20);
evalcond[2]=(((sj4*x309))+new_r01);
evalcond[3]=(((sj4*x310))+new_r00);
evalcond[4]=((((-1.0)*cj4*x312))+new_r11);
evalcond[5]=((((-1.0)*cj4*x313))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x311))+((cj4*new_r10))+(((-1.0)*x313)));
evalcond[7]=(((cj4*new_r11))+(((-1.0)*x312))+(((-1.0)*new_r01*x311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x314=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj4*x314))+(((-1.0)*new_r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj4*x314))+((cj4*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x314))+(((-1.0)*new_r00*sj4))))+IKsqr(((((-1.0)*sj4*x314))+((cj4*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj4*x314))+(((-1.0)*new_r00*sj4))), ((((-1.0)*sj4*x314))+((cj4*new_r00))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x315=IKsin(j6);
IkReal x316=IKcos(j6);
IkReal x317=((1.0)*sj4);
IkReal x318=((1.0)*x316);
IkReal x319=(sj4*x315);
IkReal x320=(sj4*x316);
IkReal x321=(cj4*x315);
IkReal x322=(cj4*x318);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x315);
evalcond[1]=(x320+x321+new_r01);
evalcond[2]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x318)));
evalcond[3]=((((-1.0)*new_r00*x317))+((cj4*new_r10))+(((-1.0)*x315)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x318))+(((-1.0)*new_r01*x317)));
evalcond[5]=((((-1.0)*x322))+x319+new_r00);
evalcond[6]=((((-1.0)*x322))+x319+new_r11);
evalcond[7]=((((-1.0)*x321))+new_r10+(((-1.0)*x316*x317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x323=((1.0)*new_r00);
if( IKabs((((cj4*new_r01))+(((-1.0)*sj4*x323)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x323)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj4*new_r01))+(((-1.0)*sj4*x323))))+IKsqr(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x323))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((((cj4*new_r01))+(((-1.0)*sj4*x323))), ((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x323))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x324=IKcos(j6);
IkReal x325=IKsin(j6);
IkReal x326=((1.0)*sj4);
IkReal x327=((1.0)*x325);
IkReal x328=(sj4*x324);
IkReal x329=((1.0)*x324);
IkReal x330=(cj4*x327);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x324);
evalcond[1]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x327)));
evalcond[2]=(((sj4*x325))+((cj4*x324))+new_r00);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x327))+(((-1.0)*new_r00*x326)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x329))+(((-1.0)*new_r01*x326)));
evalcond[5]=(x328+(((-1.0)*x330))+new_r01);
evalcond[6]=(x328+(((-1.0)*x330))+new_r10);
evalcond[7]=((((-1.0)*x325*x326))+new_r11+(((-1.0)*cj4*x329)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x331=IKcos(j6);
IkReal x332=IKsin(j6);
IkReal x333=((1.0)*sj5);
IkReal x334=((1.0)*x331);
IkReal x335=((1.0)*x332);
evalcond[0]=(((new_r02*x331))+new_r20);
evalcond[1]=((((-1.0)*x335))+new_r10);
evalcond[2]=((((-1.0)*x334))+new_r11);
evalcond[3]=(((cj5*x332))+new_r01);
evalcond[4]=(new_r21+(((-1.0)*new_r02*x335)));
evalcond[5]=((((-1.0)*cj5*x334))+new_r00);
evalcond[6]=(((cj5*new_r01))+(((-1.0)*new_r21*x333))+x332);
evalcond[7]=(((cj5*new_r00))+(((-1.0)*new_r20*x333))+(((-1.0)*x334)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j6eval[0]=new_r02;
j6eval[1]=IKsign(new_r02);
j6eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j6eval[0]=new_r02;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j6eval[0]=new_r02;
j6eval[1]=cj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x336=IKcos(j6);
IkReal x337=((1.0)*(IKsin(j6)));
evalcond[0]=(x336+new_r20);
evalcond[1]=((((-1.0)*x337))+new_r21);
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x337)));
evalcond[3]=((((-1.0)*x336))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x338=IKsin(j6);
IkReal x339=((1.0)*(IKcos(j6)));
evalcond[0]=(x338+new_r21);
evalcond[1]=((((-1.0)*x339))+new_r20);
evalcond[2]=((((-1.0)*x338))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x340=IKsin(j6);
IkReal x341=IKcos(j6);
IkReal x342=((-1.0)*x341);
evalcond[0]=x340;
evalcond[1]=(new_r22*x340);
evalcond[2]=x342;
evalcond[3]=(new_r22*x342);
evalcond[4]=((((-1.0)*new_r10))+(((-1.0)*x340)));
evalcond[5]=((((-1.0)*new_r11))+(((-1.0)*x341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x343=IKPowWithIntegerCheck(new_r02,-1);
if(!x343.valid){
continue;
}
CheckValue<IkReal> x344=IKPowWithIntegerCheck(cj5,-1);
if(!x344.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*(x343.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00*(x344.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*(x343.value)))+IKsqr(((-1.0)*new_r00*(x344.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21*(x343.value)), ((-1.0)*new_r00*(x344.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x345=IKsin(j6);
IkReal x346=IKcos(j6);
CheckValue<IkReal> x351=IKPowWithIntegerCheck(new_r02,-1);
if(!x351.valid){
continue;
}
IkReal x347=x351.value;
IkReal x348=new_r22*new_r22;
IkReal x349=((1.0)*x346);
IkReal x350=(x347*x348);
evalcond[0]=(((new_r02*x345))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x349))+new_r20);
evalcond[2]=((((-1.0)*new_r10))+(((-1.0)*x345)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x349)));
evalcond[4]=(((cj5*x345))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*cj5*x349))+(((-1.0)*new_r00)));
evalcond[6]=(((new_r21*x350))+x345+((new_r02*new_r21)));
evalcond[7]=(((new_r20*x350))+((new_r02*new_r20))+(((-1.0)*x349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x352=IKPowWithIntegerCheck(new_r02,-1);
if(!x352.valid){
continue;
}
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r20*(x352.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr((new_r20*(x352.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r10), (new_r20*(x352.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x353=IKsin(j6);
IkReal x354=IKcos(j6);
CheckValue<IkReal> x359=IKPowWithIntegerCheck(new_r02,-1);
if(!x359.valid){
continue;
}
IkReal x355=x359.value;
IkReal x356=new_r22*new_r22;
IkReal x357=((1.0)*x354);
IkReal x358=(x355*x356);
evalcond[0]=(new_r21+((new_r02*x353)));
evalcond[1]=((((-1.0)*new_r02*x357))+new_r20);
evalcond[2]=((((-1.0)*x353))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x357))+(((-1.0)*new_r11)));
evalcond[4]=(((cj5*x353))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*new_r00))+(((-1.0)*cj5*x357)));
evalcond[6]=(((new_r21*x358))+x353+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*x357))+((new_r20*x358))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x360 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x360.valid){
continue;
}
CheckValue<IkReal> x361=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x361.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x360.value)+(((1.5707963267949)*(x361.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x362=IKsin(j6);
IkReal x363=IKcos(j6);
CheckValue<IkReal> x368=IKPowWithIntegerCheck(new_r02,-1);
if(!x368.valid){
continue;
}
IkReal x364=x368.value;
IkReal x365=new_r22*new_r22;
IkReal x366=((1.0)*x363);
IkReal x367=(x364*x365);
evalcond[0]=(new_r21+((new_r02*x362)));
evalcond[1]=(new_r20+(((-1.0)*new_r02*x366)));
evalcond[2]=((((-1.0)*x362))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x366))+(((-1.0)*new_r11)));
evalcond[4]=(((cj5*x362))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*cj5*x366))+(((-1.0)*new_r00)));
evalcond[6]=(x362+((new_r21*x367))+((new_r02*new_r21)));
evalcond[7]=(((new_r20*x367))+(((-1.0)*x366))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j6eval[0]=1.0;
if( IKabs(j6eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j6]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j6array[2], cj6array[2], sj6array[2], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[2]={true,true};
_nj6 = 2;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x370=IKPowWithIntegerCheck(sj5,-1);
if(!x370.valid){
continue;
}
IkReal x369=x370.value;
CheckValue<IkReal> x371=IKPowWithIntegerCheck(cj4,-1);
if(!x371.valid){
continue;
}
CheckValue<IkReal> x372=IKPowWithIntegerCheck(cj5,-1);
if(!x372.valid){
continue;
}
if( IKabs((x369*(x371.value)*(x372.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x369)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x369*(x371.value)*(x372.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))))+IKsqr(((-1.0)*new_r20*x369))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x369*(x371.value)*(x372.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))), ((-1.0)*new_r20*x369));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x373=IKsin(j6);
IkReal x374=IKcos(j6);
IkReal x375=((1.0)*sj5);
IkReal x376=((1.0)*sj4);
IkReal x377=(cj5*sj4);
IkReal x378=(cj4*new_r01);
IkReal x379=(cj4*new_r00);
IkReal x380=((1.0)*x374);
IkReal x381=(cj5*x373);
IkReal x382=((1.0)*x373);
evalcond[0]=(((sj5*x374))+new_r20);
evalcond[1]=((((-1.0)*x373*x375))+new_r21);
evalcond[2]=(((new_r11*sj4))+x381+x378);
evalcond[3]=((((-1.0)*new_r00*x376))+((cj4*new_r10))+(((-1.0)*x382)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x380))+(((-1.0)*new_r01*x376)));
evalcond[5]=(((sj4*x374))+new_r01+((cj4*x381)));
evalcond[6]=(((new_r10*sj4))+x379+(((-1.0)*cj5*x380)));
evalcond[7]=((((-1.0)*cj4*cj5*x380))+((sj4*x373))+new_r00);
evalcond[8]=((((-1.0)*cj4*x380))+new_r11+((x373*x377)));
evalcond[9]=((((-1.0)*cj5*x374*x376))+(((-1.0)*cj4*x382))+new_r10);
evalcond[10]=((((-1.0)*new_r21*x375))+((cj5*x378))+x373+((new_r11*x377)));
evalcond[11]=((((-1.0)*new_r20*x375))+((cj5*x379))+(((-1.0)*x380))+((new_r10*x377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x384=IKPowWithIntegerCheck(sj5,-1);
if(!x384.valid){
continue;
}
IkReal x383=x384.value;
CheckValue<IkReal> x385=IKPowWithIntegerCheck(sj4,-1);
if(!x385.valid){
continue;
}
if( IKabs((x383*(x385.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x383)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x383*(x385.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))))+IKsqr(((-1.0)*new_r20*x383))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x383*(x385.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))), ((-1.0)*new_r20*x383));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x386=IKsin(j6);
IkReal x387=IKcos(j6);
IkReal x388=((1.0)*sj5);
IkReal x389=((1.0)*sj4);
IkReal x390=(cj5*sj4);
IkReal x391=(cj4*new_r01);
IkReal x392=(cj4*new_r00);
IkReal x393=((1.0)*x387);
IkReal x394=(cj5*x386);
IkReal x395=((1.0)*x386);
evalcond[0]=(((sj5*x387))+new_r20);
evalcond[1]=((((-1.0)*x386*x388))+new_r21);
evalcond[2]=(((new_r11*sj4))+x394+x391);
evalcond[3]=((((-1.0)*x395))+((cj4*new_r10))+(((-1.0)*new_r00*x389)));
evalcond[4]=((((-1.0)*x393))+((cj4*new_r11))+(((-1.0)*new_r01*x389)));
evalcond[5]=(((cj4*x394))+((sj4*x387))+new_r01);
evalcond[6]=((((-1.0)*cj5*x393))+((new_r10*sj4))+x392);
evalcond[7]=((((-1.0)*cj4*cj5*x393))+((sj4*x386))+new_r00);
evalcond[8]=((((-1.0)*cj4*x393))+new_r11+((x386*x390)));
evalcond[9]=((((-1.0)*cj4*x395))+(((-1.0)*cj5*x387*x389))+new_r10);
evalcond[10]=(((new_r11*x390))+((cj5*x391))+x386+(((-1.0)*new_r21*x388)));
evalcond[11]=((((-1.0)*x393))+((cj5*x392))+(((-1.0)*new_r20*x388))+((new_r10*x390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x396=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x396.valid){
continue;
}
CheckValue<IkReal> x397 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x397.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x396.value)))+(x397.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x398=IKsin(j6);
IkReal x399=IKcos(j6);
IkReal x400=((1.0)*sj5);
IkReal x401=((1.0)*sj4);
IkReal x402=(cj5*sj4);
IkReal x403=(cj4*new_r01);
IkReal x404=(cj4*new_r00);
IkReal x405=((1.0)*x399);
IkReal x406=(cj5*x398);
IkReal x407=((1.0)*x398);
evalcond[0]=(((sj5*x399))+new_r20);
evalcond[1]=((((-1.0)*x398*x400))+new_r21);
evalcond[2]=(((new_r11*sj4))+x403+x406);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x401))+(((-1.0)*x407)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*new_r01*x401))+(((-1.0)*x405)));
evalcond[5]=(((cj4*x406))+new_r01+((sj4*x399)));
evalcond[6]=(((new_r10*sj4))+x404+(((-1.0)*cj5*x405)));
evalcond[7]=(new_r00+(((-1.0)*cj4*cj5*x405))+((sj4*x398)));
evalcond[8]=(new_r11+((x398*x402))+(((-1.0)*cj4*x405)));
evalcond[9]=((((-1.0)*cj5*x399*x401))+new_r10+(((-1.0)*cj4*x407)));
evalcond[10]=(((cj5*x403))+x398+(((-1.0)*new_r21*x400))+((new_r11*x402)));
evalcond[11]=((((-1.0)*new_r20*x400))+((cj5*x404))+((new_r10*x402))+(((-1.0)*x405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x408=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x408.valid){
continue;
}
CheckValue<IkReal> x409 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x409.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x408.value)))+(x409.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=(new_r20+((sj5*(IKcos(j6)))));
evalcond[1]=((((-1.0)*sj5*(IKsin(j6))))+new_r21);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
j4eval[0]=sj5;
j4eval[1]=((IKabs(new_r12))+(IKabs(new_r02)));
j4eval[2]=IKsign(sj5);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj6;
j4eval[1]=sj5;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(new_r10)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*new_r00), new_r10);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[18];
IkReal x410=IKsin(j4);
IkReal x411=IKcos(j4);
IkReal x412=((1.0)*sj5);
IkReal x413=(new_r22*x410);
IkReal x414=(new_r11*x410);
IkReal x415=(new_r02*x411);
IkReal x416=(new_r22*x411);
IkReal x417=(new_r12*x410);
IkReal x418=(new_r10*x410);
IkReal x419=((1.0)*x410);
IkReal x420=(x411*x412);
evalcond[0]=(x410+new_r00);
evalcond[1]=(x416+new_r01);
evalcond[2]=(x413+new_r11);
evalcond[3]=(new_r10+(((-1.0)*x411)));
evalcond[4]=((((-1.0)*x420))+new_r02);
evalcond[5]=((((-1.0)*x410*x412))+new_r12);
evalcond[6]=(x418+((new_r00*x411)));
evalcond[7]=(((new_r12*x411))+(((-1.0)*new_r02*x419)));
evalcond[8]=(((new_r11*x411))+(((-1.0)*new_r01*x419)));
evalcond[9]=(x414+new_r22+((new_r01*x411)));
evalcond[10]=((-1.0)+((new_r10*x411))+(((-1.0)*new_r00*x419)));
evalcond[11]=(((new_r10*x413))+((new_r00*x416)));
evalcond[12]=(x417+x415+(((-1.0)*x412)));
evalcond[13]=((((-1.0)*new_r00*x420))+(((-1.0)*x412*x418)));
evalcond[14]=(((new_r22*x415))+((new_r12*x413))+(((-1.0)*new_r22*x412)));
evalcond[15]=((((-1.0)*cj5*new_r21))+(((-1.0)*x412*x414))+(((-1.0)*new_r01*x420)));
evalcond[16]=((1.0)+(((-1.0)*sj5*x412))+((new_r11*x413))+((new_r01*x416)));
evalcond[17]=((1.0)+(((-1.0)*x412*x417))+(((-1.0)*x412*x415))+(((-1.0)*(new_r22*new_r22))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j6)))), 6.28318530717959)));
evalcond[1]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(new_r00, ((-1.0)*new_r10));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[18];
IkReal x421=IKcos(j4);
IkReal x422=IKsin(j4);
IkReal x423=(new_r22*sj5);
IkReal x424=((1.0)*sj5);
IkReal x425=((1.0)*x421);
IkReal x426=(new_r22*x422);
IkReal x427=(new_r11*x422);
IkReal x428=(new_r02*x421);
IkReal x429=(new_r01*x421);
IkReal x430=(new_r12*x422);
IkReal x431=((1.0)*x422);
IkReal x432=(new_r10*x422);
IkReal x433=(new_r00*x421);
evalcond[0]=(x421+new_r10);
evalcond[1]=((((-1.0)*x431))+new_r00);
evalcond[2]=((((-1.0)*x421*x424))+new_r02);
evalcond[3]=((((-1.0)*x422*x424))+new_r12);
evalcond[4]=((((-1.0)*new_r22*x425))+new_r01);
evalcond[5]=((((-1.0)*x426))+new_r11);
evalcond[6]=(x432+x433);
evalcond[7]=(((new_r12*x421))+(((-1.0)*new_r02*x431)));
evalcond[8]=((((-1.0)*new_r01*x431))+((new_r11*x421)));
evalcond[9]=((1.0)+(((-1.0)*new_r00*x431))+((new_r10*x421)));
evalcond[10]=(((new_r10*x426))+((new_r22*x433)));
evalcond[11]=((((-1.0)*x424))+x428+x430);
evalcond[12]=(x429+x427+(((-1.0)*new_r22)));
evalcond[13]=((((-1.0)*x424*x432))+(((-1.0)*x424*x433)));
evalcond[14]=((((-1.0)*x423))+((new_r22*x428))+((new_r12*x426)));
evalcond[15]=((-1.0)+((new_r22*x429))+((new_r11*x426))+(sj5*sj5));
evalcond[16]=(x423+(((-1.0)*x424*x429))+(((-1.0)*x424*x427)));
evalcond[17]=((1.0)+(((-1.0)*x424*x430))+(((-1.0)*x424*x428))+(((-1.0)*(new_r22*new_r22))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x434=((1.0)*sj6);
if( IKabs(((((-1.0)*new_r00*x434))+(((-1.0)*cj6*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*x434))+((cj6*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*new_r00*x434))+(((-1.0)*cj6*new_r01))))+IKsqr(((((-1.0)*new_r01*x434))+((cj6*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*new_r00*x434))+(((-1.0)*cj6*new_r01))), ((((-1.0)*new_r01*x434))+((cj6*new_r00))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x435=IKcos(j4);
IkReal x436=IKsin(j4);
IkReal x437=((1.0)*cj6);
IkReal x438=(sj6*x436);
IkReal x439=(cj6*x436);
IkReal x440=(sj6*x435);
IkReal x441=((1.0)*x436);
IkReal x442=(x435*x437);
evalcond[0]=(((new_r01*x435))+sj6+((new_r11*x436)));
evalcond[1]=(x439+x440+new_r01);
evalcond[2]=((((-1.0)*x442))+x438+new_r00);
evalcond[3]=((((-1.0)*x442))+x438+new_r11);
evalcond[4]=((((-1.0)*x437))+((new_r00*x435))+((new_r10*x436)));
evalcond[5]=((((-1.0)*x440))+(((-1.0)*x436*x437))+new_r10);
evalcond[6]=((((-1.0)*sj6))+(((-1.0)*new_r00*x441))+((new_r10*x435)));
evalcond[7]=((((-1.0)*x437))+(((-1.0)*new_r01*x441))+((new_r11*x435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x443=((1.0)*new_r00);
if( IKabs(((((-1.0)*cj6*new_r01))+(((-1.0)*sj6*x443)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj6*x443))+((new_r01*sj6)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj6*new_r01))+(((-1.0)*sj6*x443))))+IKsqr(((((-1.0)*cj6*x443))+((new_r01*sj6))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((((-1.0)*cj6*new_r01))+(((-1.0)*sj6*x443))), ((((-1.0)*cj6*x443))+((new_r01*sj6))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x444=IKsin(j4);
IkReal x445=IKcos(j4);
IkReal x446=((1.0)*sj6);
IkReal x447=(cj6*x444);
IkReal x448=(cj6*x445);
IkReal x449=((1.0)*x444);
IkReal x450=(x445*x446);
evalcond[0]=(((new_r00*x445))+cj6+((new_r10*x444)));
evalcond[1]=(((sj6*x444))+x448+new_r00);
evalcond[2]=((((-1.0)*x450))+x447+new_r01);
evalcond[3]=((((-1.0)*x450))+x447+new_r10);
evalcond[4]=((((-1.0)*x446))+((new_r01*x445))+((new_r11*x444)));
evalcond[5]=((((-1.0)*x444*x446))+(((-1.0)*x448))+new_r11);
evalcond[6]=((((-1.0)*x446))+(((-1.0)*new_r00*x449))+((new_r10*x445)));
evalcond[7]=((((-1.0)*new_r01*x449))+((new_r11*x445))+(((-1.0)*cj6)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j4eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j4eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j4eval[0]=((IKabs((new_r11*new_r22)))+(IKabs((new_r01*new_r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x452 = IKatan2WithCheck(IkReal((new_r01*new_r22)),IkReal((new_r11*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x452.valid){
continue;
}
IkReal x451=x452.value;
j4array[0]=((-1.0)*x451);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x451)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x453=IKcos(j4);
IkReal x454=IKsin(j4);
IkReal x455=(new_r00*x453);
IkReal x456=(new_r10*x454);
IkReal x457=((1.0)*x454);
evalcond[0]=(((new_r11*x454))+((new_r01*x453)));
evalcond[1]=(x456+x455);
evalcond[2]=(((new_r10*x453))+(((-1.0)*new_r00*x457)));
evalcond[3]=(((new_r11*x453))+(((-1.0)*new_r01*x457)));
evalcond[4]=(((new_r22*x456))+((new_r22*x455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x459 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x459.valid){
continue;
}
IkReal x458=x459.value;
j4array[0]=((-1.0)*x458);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x458)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x460=IKcos(j4);
IkReal x461=IKsin(j4);
IkReal x462=(new_r01*x460);
IkReal x463=(new_r11*x461);
IkReal x464=((1.0)*x461);
evalcond[0]=(x463+x462);
evalcond[1]=(((new_r10*x460))+(((-1.0)*new_r00*x464)));
evalcond[2]=(((new_r11*x460))+(((-1.0)*new_r01*x464)));
evalcond[3]=(((new_r22*x462))+((new_r22*x463)));
evalcond[4]=(((new_r00*new_r22*x460))+((new_r10*new_r22*x461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x466 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x466.valid){
continue;
}
IkReal x465=x466.value;
j4array[0]=((-1.0)*x465);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+(((-1.0)*x465)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x467=IKcos(j4);
IkReal x468=IKsin(j4);
IkReal x469=(new_r00*x467);
IkReal x470=(new_r22*x468);
IkReal x471=((1.0)*x468);
evalcond[0]=(((new_r10*x468))+x469);
evalcond[1]=(((new_r10*x467))+(((-1.0)*new_r00*x471)));
evalcond[2]=(((new_r11*x467))+(((-1.0)*new_r01*x471)));
evalcond[3]=(((new_r11*x470))+((new_r01*new_r22*x467)));
evalcond[4]=(((new_r10*x470))+((new_r22*x469)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x473=IKPowWithIntegerCheck(sj5,-1);
if(!x473.valid){
continue;
}
IkReal x472=x473.value;
CheckValue<IkReal> x474=IKPowWithIntegerCheck(cj6,-1);
if(!x474.valid){
continue;
}
if( IKabs((x472*(x474.value)*(((((-1.0)*new_r01*sj5))+(((-1.0)*cj5*new_r02*sj6)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x472)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x472*(x474.value)*(((((-1.0)*new_r01*sj5))+(((-1.0)*cj5*new_r02*sj6))))))+IKsqr((new_r02*x472))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x472*(x474.value)*(((((-1.0)*new_r01*sj5))+(((-1.0)*cj5*new_r02*sj6))))), (new_r02*x472));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[18];
IkReal x475=IKcos(j4);
IkReal x476=IKsin(j4);
IkReal x477=((1.0)*cj6);
IkReal x478=(cj5*sj6);
IkReal x479=((1.0)*cj5);
IkReal x480=((1.0)*sj5);
IkReal x481=((1.0)*x475);
IkReal x482=(cj5*x476);
IkReal x483=(new_r11*x476);
IkReal x484=(cj5*x475);
IkReal x485=(new_r12*x476);
IkReal x486=(new_r10*x476);
IkReal x487=((1.0)*x476);
evalcond[0]=((((-1.0)*x475*x480))+new_r02);
evalcond[1]=((((-1.0)*x476*x480))+new_r12);
evalcond[2]=(((new_r12*x475))+(((-1.0)*new_r02*x487)));
evalcond[3]=(((cj6*x476))+new_r01+((x475*x478)));
evalcond[4]=((((-1.0)*x480))+((new_r02*x475))+x485);
evalcond[5]=(((new_r01*x475))+x483+x478);
evalcond[6]=(((sj6*x476))+(((-1.0)*x477*x484))+new_r00);
evalcond[7]=((((-1.0)*x475*x477))+new_r11+((x476*x478)));
evalcond[8]=((((-1.0)*sj6))+(((-1.0)*new_r00*x487))+((new_r10*x475)));
evalcond[9]=((((-1.0)*new_r01*x487))+((new_r11*x475))+(((-1.0)*x477)));
evalcond[10]=((((-1.0)*cj5*x477))+((new_r00*x475))+x486);
evalcond[11]=((((-1.0)*x477*x482))+(((-1.0)*sj6*x481))+new_r10);
evalcond[12]=(((new_r02*x484))+((new_r12*x482))+(((-1.0)*new_r22*x480)));
evalcond[13]=((((-1.0)*new_r21*x480))+sj6+((new_r11*x482))+((new_r01*x484)));
evalcond[14]=((((-1.0)*new_r00*x475*x480))+(((-1.0)*x480*x486))+(((-1.0)*new_r20*x479)));
evalcond[15]=((((-1.0)*new_r21*x479))+(((-1.0)*x480*x483))+(((-1.0)*new_r01*x475*x480)));
evalcond[16]=((1.0)+(((-1.0)*new_r02*x475*x480))+(((-1.0)*new_r22*x479))+(((-1.0)*x480*x485)));
evalcond[17]=((((-1.0)*new_r20*x480))+(((-1.0)*x477))+((new_r10*x482))+((new_r00*x484)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x488=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x488.valid){
continue;
}
CheckValue<IkReal> x489 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x489.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x488.value)))+(x489.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[18];
IkReal x490=IKcos(j4);
IkReal x491=IKsin(j4);
IkReal x492=((1.0)*cj6);
IkReal x493=(cj5*sj6);
IkReal x494=((1.0)*cj5);
IkReal x495=((1.0)*sj5);
IkReal x496=((1.0)*x490);
IkReal x497=(cj5*x491);
IkReal x498=(new_r11*x491);
IkReal x499=(cj5*x490);
IkReal x500=(new_r12*x491);
IkReal x501=(new_r10*x491);
IkReal x502=((1.0)*x491);
evalcond[0]=((((-1.0)*x490*x495))+new_r02);
evalcond[1]=((((-1.0)*x491*x495))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x502))+((new_r12*x490)));
evalcond[3]=(((cj6*x491))+((x490*x493))+new_r01);
evalcond[4]=(((new_r02*x490))+(((-1.0)*x495))+x500);
evalcond[5]=(x498+x493+((new_r01*x490)));
evalcond[6]=(new_r00+((sj6*x491))+(((-1.0)*x492*x499)));
evalcond[7]=(((x491*x493))+(((-1.0)*x490*x492))+new_r11);
evalcond[8]=((((-1.0)*sj6))+(((-1.0)*new_r00*x502))+((new_r10*x490)));
evalcond[9]=((((-1.0)*new_r01*x502))+(((-1.0)*x492))+((new_r11*x490)));
evalcond[10]=(x501+(((-1.0)*cj5*x492))+((new_r00*x490)));
evalcond[11]=((((-1.0)*sj6*x496))+new_r10+(((-1.0)*x492*x497)));
evalcond[12]=(((new_r02*x499))+((new_r12*x497))+(((-1.0)*new_r22*x495)));
evalcond[13]=(sj6+(((-1.0)*new_r21*x495))+((new_r11*x497))+((new_r01*x499)));
evalcond[14]=((((-1.0)*new_r20*x494))+(((-1.0)*x495*x501))+(((-1.0)*new_r00*x490*x495)));
evalcond[15]=((((-1.0)*x495*x498))+(((-1.0)*new_r21*x494))+(((-1.0)*new_r01*x490*x495)));
evalcond[16]=((1.0)+(((-1.0)*new_r02*x490*x495))+(((-1.0)*x495*x500))+(((-1.0)*new_r22*x494)));
evalcond[17]=((((-1.0)*new_r20*x495))+(((-1.0)*x492))+((new_r10*x497))+((new_r00*x499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x503=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x503.valid){
continue;
}
CheckValue<IkReal> x504 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x504.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x503.value)))+(x504.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[8];
IkReal x505=IKcos(j4);
IkReal x506=IKsin(j4);
IkReal x507=((1.0)*sj5);
IkReal x508=((1.0)*cj5);
IkReal x509=(new_r12*x506);
IkReal x510=(new_r02*x505);
evalcond[0]=((((-1.0)*x505*x507))+new_r02);
evalcond[1]=((((-1.0)*x506*x507))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x506))+((new_r12*x505)));
evalcond[3]=((((-1.0)*x507))+x509+x510);
evalcond[4]=(((cj5*x510))+((cj5*x509))+(((-1.0)*new_r22*x507)));
evalcond[5]=((((-1.0)*new_r20*x508))+(((-1.0)*new_r00*x505*x507))+(((-1.0)*new_r10*x506*x507)));
evalcond[6]=((((-1.0)*new_r21*x508))+(((-1.0)*new_r11*x506*x507))+(((-1.0)*new_r01*x505*x507)));
evalcond[7]=((1.0)+(((-1.0)*x507*x509))+(((-1.0)*new_r22*x508))+(((-1.0)*x507*x510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j6eval[3];
j6eval[0]=sj5;
j6eval[1]=((IKabs(new_r20))+(IKabs(new_r21)));
j6eval[2]=IKsign(sj5);
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
j6eval[0]=sj4;
j6eval[1]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
j6eval[0]=cj4;
j6eval[1]=cj5;
j6eval[2]=sj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j6eval[0]=new_r12;
j6eval[1]=IKsign(new_r12);
j6eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j6eval[0]=cj5;
j6eval[1]=IKsign(cj5);
j6eval[2]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
j6eval[0]=new_r12;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x511=IKcos(j6);
IkReal x512=((1.0)*(IKsin(j6)));
evalcond[0]=(x511+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x512)));
evalcond[2]=((((-1.0)*new_r00))+(((-1.0)*x512)));
evalcond[3]=((((-1.0)*x511))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r11;
evalcond[3]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x513=IKsin(j6);
IkReal x514=((1.0)*(IKcos(j6)));
evalcond[0]=(x513+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x514)));
evalcond[2]=((((-1.0)*x513))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*new_r01))+(((-1.0)*x514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r12);
evalcond[1]=new_r20;
evalcond[2]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
new_r12=0;
j6eval[0]=cj5;
j6eval[1]=IKsign(cj5);
j6eval[2]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
new_r12=0;
j6eval[0]=cj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r11;
evalcond[2]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x515=IKsin(j6);
IkReal x516=IKcos(j6);
evalcond[0]=x515;
evalcond[1]=((-1.0)*x516);
evalcond[2]=((((-1.0)*x515))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x516))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r11;
evalcond[2]=new_r10;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x517=IKsin(j6);
IkReal x518=IKcos(j6);
evalcond[0]=x517;
evalcond[1]=((-1.0)*x518);
evalcond[2]=((((-1.0)*x517))+(((-1.0)*new_r00)));
evalcond[3]=((((-1.0)*x518))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x519=IKsin(j6);
IkReal x520=IKcos(j6);
IkReal x521=((-1.0)*x520);
evalcond[0]=x519;
evalcond[1]=(cj5*x519);
evalcond[2]=x521;
evalcond[3]=(cj5*x521);
evalcond[4]=((((-1.0)*x519))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x520))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x522=IKPowWithIntegerCheck(cj5,-1);
if(!x522.valid){
continue;
}
if( IKabs(((-1.0)*cj5*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r10*(x522.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj5*new_r11))+IKsqr((new_r10*(x522.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*cj5*new_r11), (new_r10*(x522.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x523=IKsin(j6);
IkReal x524=IKcos(j6);
IkReal x525=((1.0)*x524);
evalcond[0]=(((cj5*x523))+new_r11);
evalcond[1]=(((cj5*new_r11))+x523);
evalcond[2]=(new_r10+(((-1.0)*cj5*x525)));
evalcond[3]=((((-1.0)*x523))+(((-1.0)*new_r00)));
evalcond[4]=((((-1.0)*x525))+(((-1.0)*new_r01)));
evalcond[5]=(((cj5*new_r10))+(((-1.0)*x525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x526 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x526.valid){
continue;
}
CheckValue<IkReal> x527=IKPowWithIntegerCheck(IKsign(cj5),-1);
if(!x527.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x526.value)+(((1.5707963267949)*(x527.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x528=IKsin(j6);
IkReal x529=IKcos(j6);
IkReal x530=((1.0)*x529);
evalcond[0]=(((cj5*x528))+new_r11);
evalcond[1]=(((cj5*new_r11))+x528);
evalcond[2]=(new_r10+(((-1.0)*cj5*x530)));
evalcond[3]=((((-1.0)*x528))+(((-1.0)*new_r00)));
evalcond[4]=((((-1.0)*x530))+(((-1.0)*new_r01)));
evalcond[5]=(((cj5*new_r10))+(((-1.0)*x530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x531=IKsin(j6);
IkReal x532=IKcos(j6);
IkReal x533=((-1.0)*x532);
evalcond[0]=x531;
evalcond[1]=(new_r22*x531);
evalcond[2]=x533;
evalcond[3]=(new_r22*x533);
evalcond[4]=((((-1.0)*x531))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x532))+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x534=IKPowWithIntegerCheck(new_r12,-1);
if(!x534.valid){
continue;
}
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*(x534.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r20*(x534.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r20*(x534.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x535=IKsin(j6);
IkReal x536=IKcos(j6);
IkReal x537=((1.0)*sj5);
IkReal x538=((1.0)*x536);
IkReal x539=((1.0)*x535);
evalcond[0]=(((new_r12*x536))+new_r20);
evalcond[1]=(((cj5*x535))+new_r11);
evalcond[2]=((((-1.0)*new_r12*x539))+new_r21);
evalcond[3]=(new_r10+(((-1.0)*cj5*x538)));
evalcond[4]=((((-1.0)*x539))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x538))+(((-1.0)*new_r01)));
evalcond[6]=(((cj5*new_r11))+(((-1.0)*new_r21*x537))+x535);
evalcond[7]=(((cj5*new_r10))+(((-1.0)*x538))+(((-1.0)*new_r20*x537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x540 = IKatan2WithCheck(IkReal(((-1.0)*new_r11)),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x540.valid){
continue;
}
CheckValue<IkReal> x541=IKPowWithIntegerCheck(IKsign(cj5),-1);
if(!x541.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x540.value)+(((1.5707963267949)*(x541.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x542=IKsin(j6);
IkReal x543=IKcos(j6);
IkReal x544=((1.0)*sj5);
IkReal x545=((1.0)*x543);
IkReal x546=((1.0)*x542);
evalcond[0]=(((new_r12*x543))+new_r20);
evalcond[1]=(((cj5*x542))+new_r11);
evalcond[2]=((((-1.0)*new_r12*x546))+new_r21);
evalcond[3]=(new_r10+(((-1.0)*cj5*x545)));
evalcond[4]=((((-1.0)*x546))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x545))+(((-1.0)*new_r01)));
evalcond[6]=(((cj5*new_r11))+(((-1.0)*new_r21*x544))+x542);
evalcond[7]=(((cj5*new_r10))+(((-1.0)*new_r20*x544))+(((-1.0)*x545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x547 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x547.valid){
continue;
}
CheckValue<IkReal> x548=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x548.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x547.value)+(((1.5707963267949)*(x548.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x549=IKsin(j6);
IkReal x550=IKcos(j6);
IkReal x551=((1.0)*sj5);
IkReal x552=((1.0)*x550);
IkReal x553=((1.0)*x549);
evalcond[0]=(((new_r12*x550))+new_r20);
evalcond[1]=(((cj5*x549))+new_r11);
evalcond[2]=((((-1.0)*new_r12*x553))+new_r21);
evalcond[3]=((((-1.0)*cj5*x552))+new_r10);
evalcond[4]=((((-1.0)*x553))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x552))+(((-1.0)*new_r01)));
evalcond[6]=(((cj5*new_r11))+(((-1.0)*new_r21*x551))+x549);
evalcond[7]=(((cj5*new_r10))+(((-1.0)*x552))+(((-1.0)*new_r20*x551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r00, new_r01);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x554=IKsin(j6);
IkReal x555=IKcos(j6);
CheckValue<IkReal> x560=IKPowWithIntegerCheck(new_r12,-1);
if(!x560.valid){
continue;
}
IkReal x556=x560.value;
IkReal x557=new_r22*new_r22;
IkReal x558=((1.0)*x555);
IkReal x559=(x556*x557);
evalcond[0]=(((new_r12*x554))+new_r21);
evalcond[1]=((((-1.0)*x554))+new_r00);
evalcond[2]=((((-1.0)*x558))+new_r01);
evalcond[3]=((((-1.0)*new_r12*x558))+new_r20);
evalcond[4]=(((cj5*x554))+(((-1.0)*new_r11)));
evalcond[5]=((((-1.0)*cj5*x558))+(((-1.0)*new_r10)));
evalcond[6]=(((new_r21*x559))+((new_r12*new_r21))+x554);
evalcond[7]=(((new_r12*new_r20))+(((-1.0)*x558))+((new_r20*x559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x561=IKcos(j6);
IkReal x562=IKsin(j6);
IkReal x563=((1.0)*sj4);
IkReal x564=((1.0)*x562);
IkReal x565=((1.0)*x561);
evalcond[0]=(x561+new_r20);
evalcond[1]=(new_r21+(((-1.0)*x564)));
evalcond[2]=(((sj4*x561))+new_r01);
evalcond[3]=(((sj4*x562))+new_r00);
evalcond[4]=((((-1.0)*cj4*x565))+new_r11);
evalcond[5]=((((-1.0)*cj4*x564))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x563))+((cj4*new_r10))+(((-1.0)*x564)));
evalcond[7]=(((cj4*new_r11))+(((-1.0)*x565))+(((-1.0)*new_r01*x563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x566=IKcos(j6);
IkReal x567=IKsin(j6);
IkReal x568=((1.0)*sj4);
IkReal x569=((1.0)*x566);
IkReal x570=((1.0)*x567);
evalcond[0]=(x567+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x569)));
evalcond[2]=(((sj4*x566))+new_r01);
evalcond[3]=(((sj4*x567))+new_r00);
evalcond[4]=((((-1.0)*cj4*x569))+new_r11);
evalcond[5]=((((-1.0)*cj4*x570))+new_r10);
evalcond[6]=((((-1.0)*new_r00*x568))+((cj4*new_r10))+(((-1.0)*x570)));
evalcond[7]=(((cj4*new_r11))+(((-1.0)*x569))+(((-1.0)*new_r01*x568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j5))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x571=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj4*x571))+(((-1.0)*new_r00*sj4)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj4*new_r00))+(((-1.0)*sj4*x571)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*x571))+(((-1.0)*new_r00*sj4))))+IKsqr((((cj4*new_r00))+(((-1.0)*sj4*x571))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*cj4*x571))+(((-1.0)*new_r00*sj4))), (((cj4*new_r00))+(((-1.0)*sj4*x571))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x572=IKsin(j6);
IkReal x573=IKcos(j6);
IkReal x574=((1.0)*sj4);
IkReal x575=((1.0)*x573);
IkReal x576=(sj4*x572);
IkReal x577=(sj4*x573);
IkReal x578=(cj4*x572);
IkReal x579=(cj4*x575);
evalcond[0]=(((cj4*new_r01))+((new_r11*sj4))+x572);
evalcond[1]=(x578+x577+new_r01);
evalcond[2]=(((cj4*new_r00))+((new_r10*sj4))+(((-1.0)*x575)));
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x572))+(((-1.0)*new_r00*x574)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x575))+(((-1.0)*new_r01*x574)));
evalcond[5]=((((-1.0)*x579))+x576+new_r00);
evalcond[6]=((((-1.0)*x579))+x576+new_r11);
evalcond[7]=((((-1.0)*x573*x574))+(((-1.0)*x578))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j5)))), 6.28318530717959)));
evalcond[1]=new_r20;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r21;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x580=((1.0)*new_r00);
if( IKabs(((((-1.0)*sj4*x580))+((cj4*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x580)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj4*x580))+((cj4*new_r01))))+IKsqr(((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x580))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((-1.0)*sj4*x580))+((cj4*new_r01))), ((((-1.0)*new_r01*sj4))+(((-1.0)*cj4*x580))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x581=IKcos(j6);
IkReal x582=IKsin(j6);
IkReal x583=((1.0)*sj4);
IkReal x584=((1.0)*x582);
IkReal x585=(sj4*x581);
IkReal x586=((1.0)*x581);
IkReal x587=(cj4*x584);
evalcond[0]=(((cj4*new_r00))+((new_r10*sj4))+x581);
evalcond[1]=(((cj4*new_r01))+((new_r11*sj4))+(((-1.0)*x584)));
evalcond[2]=(((cj4*x581))+((sj4*x582))+new_r00);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x584))+(((-1.0)*new_r00*x583)));
evalcond[4]=((((-1.0)*new_r01*x583))+((cj4*new_r11))+(((-1.0)*x586)));
evalcond[5]=(x585+new_r01+(((-1.0)*x587)));
evalcond[6]=(x585+new_r10+(((-1.0)*x587)));
evalcond[7]=((((-1.0)*x582*x583))+(((-1.0)*cj4*x586))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r10, new_r11);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x588=IKcos(j6);
IkReal x589=IKsin(j6);
IkReal x590=((1.0)*sj5);
IkReal x591=((1.0)*x588);
IkReal x592=((1.0)*x589);
evalcond[0]=(((new_r02*x588))+new_r20);
evalcond[1]=((((-1.0)*x592))+new_r10);
evalcond[2]=((((-1.0)*x591))+new_r11);
evalcond[3]=(((cj5*x589))+new_r01);
evalcond[4]=((((-1.0)*new_r02*x592))+new_r21);
evalcond[5]=((((-1.0)*cj5*x591))+new_r00);
evalcond[6]=((((-1.0)*new_r21*x590))+((cj5*new_r01))+x589);
evalcond[7]=((((-1.0)*new_r20*x590))+((cj5*new_r00))+(((-1.0)*x591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[3];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j6eval[0]=new_r02;
j6eval[1]=IKsign(new_r02);
j6eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  || IKabs(j6eval[2]) < 0.0000010000000000  )
{
{
IkReal j6eval[1];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j6eval[0]=new_r02;
if( IKabs(j6eval[0]) < 0.0000010000000000  )
{
{
IkReal j6eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
j6eval[0]=new_r02;
j6eval[1]=cj5;
if( IKabs(j6eval[0]) < 0.0000010000000000  || IKabs(j6eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x593=IKcos(j6);
IkReal x594=((1.0)*(IKsin(j6)));
evalcond[0]=(x593+new_r20);
evalcond[1]=((((-1.0)*x594))+new_r21);
evalcond[2]=((((-1.0)*x594))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x593))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j5)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=new_r01;
evalcond[3]=new_r00;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x595=IKsin(j6);
IkReal x596=((1.0)*(IKcos(j6)));
evalcond[0]=(x595+new_r21);
evalcond[1]=((((-1.0)*x596))+new_r20);
evalcond[2]=((((-1.0)*x595))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x596))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x597=IKsin(j6);
IkReal x598=IKcos(j6);
IkReal x599=((-1.0)*x598);
evalcond[0]=x597;
evalcond[1]=(new_r22*x597);
evalcond[2]=x599;
evalcond[3]=(new_r22*x599);
evalcond[4]=((((-1.0)*x597))+(((-1.0)*new_r10)));
evalcond[5]=((((-1.0)*x598))+(((-1.0)*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x600=IKPowWithIntegerCheck(new_r02,-1);
if(!x600.valid){
continue;
}
CheckValue<IkReal> x601=IKPowWithIntegerCheck(cj5,-1);
if(!x601.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*(x600.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00*(x601.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*(x600.value)))+IKsqr(((-1.0)*new_r00*(x601.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r21*(x600.value)), ((-1.0)*new_r00*(x601.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x602=IKsin(j6);
IkReal x603=IKcos(j6);
CheckValue<IkReal> x608=IKPowWithIntegerCheck(new_r02,-1);
if(!x608.valid){
continue;
}
IkReal x604=x608.value;
IkReal x605=new_r22*new_r22;
IkReal x606=((1.0)*x603);
IkReal x607=(x604*x605);
evalcond[0]=(((new_r02*x602))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x606))+new_r20);
evalcond[2]=((((-1.0)*x602))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*new_r11))+(((-1.0)*x606)));
evalcond[4]=(((cj5*x602))+(((-1.0)*new_r01)));
evalcond[5]=((((-1.0)*cj5*x606))+(((-1.0)*new_r00)));
evalcond[6]=(((new_r21*x607))+x602+((new_r02*new_r21)));
evalcond[7]=(((new_r20*x607))+(((-1.0)*x606))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x609=IKPowWithIntegerCheck(new_r02,-1);
if(!x609.valid){
continue;
}
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r20*(x609.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr((new_r20*(x609.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((-1.0)*new_r10), (new_r20*(x609.value)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x610=IKsin(j6);
IkReal x611=IKcos(j6);
CheckValue<IkReal> x616=IKPowWithIntegerCheck(new_r02,-1);
if(!x616.valid){
continue;
}
IkReal x612=x616.value;
IkReal x613=new_r22*new_r22;
IkReal x614=((1.0)*x611);
IkReal x615=(x612*x613);
evalcond[0]=(((new_r02*x610))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x614))+new_r20);
evalcond[2]=((((-1.0)*x610))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x614))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*new_r01))+((cj5*x610)));
evalcond[5]=((((-1.0)*cj5*x614))+(((-1.0)*new_r00)));
evalcond[6]=(((new_r21*x615))+x610+((new_r02*new_r21)));
evalcond[7]=(((new_r20*x615))+(((-1.0)*x614))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x617 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x617.valid){
continue;
}
CheckValue<IkReal> x618=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x618.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(x617.value)+(((1.5707963267949)*(x618.value))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x619=IKsin(j6);
IkReal x620=IKcos(j6);
CheckValue<IkReal> x625=IKPowWithIntegerCheck(new_r02,-1);
if(!x625.valid){
continue;
}
IkReal x621=x625.value;
IkReal x622=new_r22*new_r22;
IkReal x623=((1.0)*x620);
IkReal x624=(x621*x622);
evalcond[0]=(((new_r02*x619))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x623))+new_r20);
evalcond[2]=((((-1.0)*x619))+(((-1.0)*new_r10)));
evalcond[3]=((((-1.0)*x623))+(((-1.0)*new_r11)));
evalcond[4]=((((-1.0)*new_r01))+((cj5*x619)));
evalcond[5]=((((-1.0)*cj5*x623))+(((-1.0)*new_r00)));
evalcond[6]=(x619+((new_r21*x624))+((new_r02*new_r21)));
evalcond[7]=((((-1.0)*x623))+((new_r20*x624))+((new_r02*new_r20)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j6eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j6eval[0]=1.0;
if( IKabs(j6eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j6]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=1.0;
op[1]=0;
op[2]=-1.0;
polyroots2(op,zeror,numroots);
IkReal j6array[2], cj6array[2], sj6array[2], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((2.0)*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[2]={true,true};
_nj6 = 2;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j6]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x627=IKPowWithIntegerCheck(sj5,-1);
if(!x627.valid){
continue;
}
IkReal x626=x627.value;
CheckValue<IkReal> x628=IKPowWithIntegerCheck(cj4,-1);
if(!x628.valid){
continue;
}
CheckValue<IkReal> x629=IKPowWithIntegerCheck(cj5,-1);
if(!x629.valid){
continue;
}
if( IKabs((x626*(x628.value)*(x629.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x626)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x626*(x628.value)*(x629.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))))+IKsqr(((-1.0)*new_r20*x626))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x626*(x628.value)*(x629.value)*((((new_r20*sj4))+(((-1.0)*new_r01*sj5))))), ((-1.0)*new_r20*x626));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x630=IKsin(j6);
IkReal x631=IKcos(j6);
IkReal x632=((1.0)*sj5);
IkReal x633=((1.0)*sj4);
IkReal x634=(cj5*sj4);
IkReal x635=(cj4*new_r01);
IkReal x636=(cj4*new_r00);
IkReal x637=((1.0)*x631);
IkReal x638=(cj5*x630);
IkReal x639=((1.0)*x630);
evalcond[0]=(((sj5*x631))+new_r20);
evalcond[1]=((((-1.0)*x630*x632))+new_r21);
evalcond[2]=(((new_r11*sj4))+x635+x638);
evalcond[3]=((((-1.0)*new_r00*x633))+((cj4*new_r10))+(((-1.0)*x639)));
evalcond[4]=((((-1.0)*new_r01*x633))+((cj4*new_r11))+(((-1.0)*x637)));
evalcond[5]=(((sj4*x631))+((cj4*x638))+new_r01);
evalcond[6]=(((new_r10*sj4))+(((-1.0)*cj5*x637))+x636);
evalcond[7]=(((sj4*x630))+new_r00+(((-1.0)*cj4*cj5*x637)));
evalcond[8]=((((-1.0)*cj4*x637))+new_r11+((x630*x634)));
evalcond[9]=((((-1.0)*cj5*x631*x633))+(((-1.0)*cj4*x639))+new_r10);
evalcond[10]=(((cj5*x635))+(((-1.0)*new_r21*x632))+((new_r11*x634))+x630);
evalcond[11]=((((-1.0)*x637))+((cj5*x636))+(((-1.0)*new_r20*x632))+((new_r10*x634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x641=IKPowWithIntegerCheck(sj5,-1);
if(!x641.valid){
continue;
}
IkReal x640=x641.value;
CheckValue<IkReal> x642=IKPowWithIntegerCheck(sj4,-1);
if(!x642.valid){
continue;
}
if( IKabs((x640*(x642.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x640)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x640*(x642.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))))+IKsqr(((-1.0)*new_r20*x640))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2((x640*(x642.value)*(((((-1.0)*new_r00*sj5))+(((-1.0)*cj4*cj5*new_r20))))), ((-1.0)*new_r20*x640));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x643=IKsin(j6);
IkReal x644=IKcos(j6);
IkReal x645=((1.0)*sj5);
IkReal x646=((1.0)*sj4);
IkReal x647=(cj5*sj4);
IkReal x648=(cj4*new_r01);
IkReal x649=(cj4*new_r00);
IkReal x650=((1.0)*x644);
IkReal x651=(cj5*x643);
IkReal x652=((1.0)*x643);
evalcond[0]=(((sj5*x644))+new_r20);
evalcond[1]=((((-1.0)*x643*x645))+new_r21);
evalcond[2]=(((new_r11*sj4))+x648+x651);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*x652))+(((-1.0)*new_r00*x646)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*x650))+(((-1.0)*new_r01*x646)));
evalcond[5]=(((cj4*x651))+((sj4*x644))+new_r01);
evalcond[6]=(((new_r10*sj4))+x649+(((-1.0)*cj5*x650)));
evalcond[7]=(((sj4*x643))+(((-1.0)*cj4*cj5*x650))+new_r00);
evalcond[8]=(((x643*x647))+new_r11+(((-1.0)*cj4*x650)));
evalcond[9]=((((-1.0)*cj5*x644*x646))+new_r10+(((-1.0)*cj4*x652)));
evalcond[10]=(((cj5*x648))+((new_r11*x647))+(((-1.0)*new_r21*x645))+x643);
evalcond[11]=(((cj5*x649))+(((-1.0)*x650))+((new_r10*x647))+(((-1.0)*new_r20*x645)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
CheckValue<IkReal> x653=IKPowWithIntegerCheck(IKsign(sj5),-1);
if(!x653.valid){
continue;
}
CheckValue<IkReal> x654 = IKatan2WithCheck(IkReal(new_r21),IkReal(((-1.0)*new_r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x654.valid){
continue;
}
j6array[0]=((-1.5707963267949)+(((1.5707963267949)*(x653.value)))+(x654.value));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[12];
IkReal x655=IKsin(j6);
IkReal x656=IKcos(j6);
IkReal x657=((1.0)*sj5);
IkReal x658=((1.0)*sj4);
IkReal x659=(cj5*sj4);
IkReal x660=(cj4*new_r01);
IkReal x661=(cj4*new_r00);
IkReal x662=((1.0)*x656);
IkReal x663=(cj5*x655);
IkReal x664=((1.0)*x655);
evalcond[0]=(((sj5*x656))+new_r20);
evalcond[1]=((((-1.0)*x655*x657))+new_r21);
evalcond[2]=(((new_r11*sj4))+x660+x663);
evalcond[3]=(((cj4*new_r10))+(((-1.0)*new_r00*x658))+(((-1.0)*x664)));
evalcond[4]=(((cj4*new_r11))+(((-1.0)*new_r01*x658))+(((-1.0)*x662)));
evalcond[5]=(((sj4*x656))+new_r01+((cj4*x663)));
evalcond[6]=(((new_r10*sj4))+(((-1.0)*cj5*x662))+x661);
evalcond[7]=(((sj4*x655))+(((-1.0)*cj4*cj5*x662))+new_r00);
evalcond[8]=((((-1.0)*cj4*x662))+((x655*x659))+new_r11);
evalcond[9]=((((-1.0)*cj5*x656*x658))+(((-1.0)*cj4*x664))+new_r10);
evalcond[10]=(x655+((new_r11*x659))+(((-1.0)*new_r21*x657))+((cj5*x660)));
evalcond[11]=((((-1.0)*new_r20*x657))+(((-1.0)*x662))+((new_r10*x659))+((cj5*x661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "451254753a48ed5d2d02a6aa48cbc2d4"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif

#include <ros/ros.h>
#include <vector>

int main(int argc, char** argv)
{
    ros::init(argc, argv, "ikfast_playground");
    ros::NodeHandle nh;

    // Define the number of joints in your robot
    int numJoints = 7;

    // // Create an array for arbitrary joint angles
    // IkReal j[numJoints];

    // // Initialize joint angles
    // for (int i = 0; i < numJoints; i++) {
    //     j[i] = 0.0; // Set all joints to 0 radians initially
    // }

    // // Set specific joint angles
    // j[0] = 0.5 * M_PI;  // Joint 0 set to 90 degrees (π/2 radians)
    // j[1] = -0.5 * M_PI; // Joint 1 set to -90 degrees (-π/2 radians)
    // j[3] = 0.5 * M_PI;  // Joint 3 set to 90 degrees (π/2 radians)

    // // Create arrays for end-effector translation and rotation
    // IkReal eetrans[3]; // Assuming a 3D translation
    // IkReal eerot[9];   // Assuming a 3x3 rotation matrix

    // // Call the ComputeFk function to calculate forward kinematics
    // ComputeFk(j, eetrans, eerot);

    // // Print the values of eetrans (translation)
    // printf("End-Effector Translation (eetrans):\n");
    // printf("X: %f\n", eetrans[0]);
    // printf("Y: %f\n", eetrans[1]);
    // printf("Z: %f\n", eetrans[2]);

    // // Print the values of eerot (rotation matrix)
    // printf("\nEnd-Effector Rotation Matrix (eerot):\n");
    // for (int i = 0; i < 3; i++) {
    //     for (int j = 0; j < 3; j++) {
    //         printf("%f\t", eerot[i * 3 + j]);
    //     }
    //     printf("\n");
    // }


      // Replace these with your specific position and rotation values
    IkReal eerot[9] = {0.0, 0.0, 1.0, 0.0, 1.0, 0.0, -1.0, 0.0, 0.0};
    IkReal eetrans[3] = {-0.258363, -0.091600, 0.822452};

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());

    // Assuming vfree doesn't require special values; fill in if needed
    for(std::size_t i = 0; i < vfree.size(); ++i) {
        vfree[i] = 0.0;
    }

    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if (!bSuccess) {
        ROS_ERROR("Failed to get IK solution");
        return -1;
    }

    ROS_INFO("Found %d IK solutions:", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());

    for (std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        ROS_INFO("sol%d (free=%d):", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0], vsolfree.size() > 0 ? &vsolfree[0] : NULL);
        
        std::string solution_str;
        for (std::size_t j = 0; j < solvalues.size(); ++j) {
            solution_str += std::to_string(solvalues[j]) + ", ";
        }

        ROS_INFO("%s", solution_str.c_str());
    }


    return 0;
}

#endif
